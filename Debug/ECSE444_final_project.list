
ECSE444_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009118  08009118  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009120  08009120  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033c8  20000074  0800919c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000343c  0800919c  0002343c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021956  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0b  00000000  00000000  000419fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00045908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b08  00000000  00000000  000475b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed3e  00000000  00000000  000490c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211b5  00000000  00000000  00077dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bf54  00000000  00000000  00098fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008504  00000000  00000000  001b4f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008dbc 	.word	0x08008dbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08008dbc 	.word	0x08008dbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f901 	bl	80007c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	200f      	movs	r0, #15
 80005c6:	f006 ffed 	bl	80075a4 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f006 fd4b 	bl	8007070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	20000090 	.word	0x20000090

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000090 	.word	0x20000090

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_Delay+0x44>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000004 	.word	0x20000004

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff4c 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ee:	f7ff ff61 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 80007f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	68b9      	ldr	r1, [r7, #8]
 80007f8:	6978      	ldr	r0, [r7, #20]
 80007fa:	f7ff ffb1 	bl	8000760 <NVIC_EncodePriority>
 80007fe:	4602      	mov	r2, r0
 8000800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff80 	bl	800070c <__NVIC_SetPriority>
}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff54 	bl	80006d0 <__NVIC_EnableIRQ>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e014      	b.n	800086c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f006 fc34 	bl	80070c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d120      	bne.n	80008ce <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089a:	d118      	bne.n	80008ce <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2204      	movs	r2, #4
 80008a0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	f043 0201 	orr.w	r2, r3, #1
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008c6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 f82d 	bl	8000928 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008dc:	d120      	bne.n	8000920 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008ec:	d118      	bne.n	8000920 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2204      	movs	r2, #4
 80008f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	f043 0202 	orr.w	r2, r3, #2
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000918:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f94e 	bl	8000bbc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d101      	bne.n	8000958 <HAL_DAC_ConfigChannel+0x1c>
 8000954:	2302      	movs	r3, #2
 8000956:	e12a      	b.n	8000bae <HAL_DAC_ConfigChannel+0x272>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2201      	movs	r2, #1
 800095c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2202      	movs	r2, #2
 8000962:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d174      	bne.n	8000a56 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800096c:	f7ff fe4e 	bl	800060c <HAL_GetTick>
 8000970:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d134      	bne.n	80009e2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000978:	e011      	b.n	800099e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800097a:	f7ff fe47 	bl	800060c <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d90a      	bls.n	800099e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	f043 0208 	orr.w	r2, r3, #8
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2203      	movs	r2, #3
 8000998:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e107      	b.n	8000bae <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e6      	bne.n	800097a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fe39 	bl	8000624 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	69d2      	ldr	r2, [r2, #28]
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
 80009bc:	e01e      	b.n	80009fc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80009be:	f7ff fe25 	bl	800060c <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d90a      	bls.n	80009e2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	f043 0208 	orr.w	r2, r3, #8
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2203      	movs	r2, #3
 80009dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80009de:	2303      	movs	r3, #3
 80009e0:	e0e5      	b.n	8000bae <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dbe8      	blt.n	80009be <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fe19 	bl	8000624 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	69d2      	ldr	r2, [r2, #28]
 80009fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	ea02 0103 	and.w	r1, r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	6a1a      	ldr	r2, [r3, #32]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	409a      	lsls	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	ea02 0103 	and.w	r1, r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d11d      	bne.n	8000a9a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	221f      	movs	r2, #31
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa0:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	400a      	ands	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b3e:	d104      	bne.n	8000b4a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e018      	b.n	8000b7c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e00f      	b.n	8000b7c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000b5c:	f002 f856 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8000b60:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_DAC_ConfigChannel+0x27c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d904      	bls.n	8000b74 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e003      	b.n	8000b7c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b7a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	22c0      	movs	r2, #192	; 0xc0
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	400a      	ands	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	04c4b400 	.word	0x04c4b400

08000bbc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0ac      	b.n	8000d3c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 faac 	bl	8001144 <DFSDM_GetChannelFromInstance>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a55      	ldr	r2, [pc, #340]	; (8000d44 <HAL_DFSDM_ChannelInit+0x174>)
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e09f      	b.n	8000d3c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f006 fb81 	bl	8007304 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <HAL_DFSDM_ChannelInit+0x178>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <HAL_DFSDM_ChannelInit+0x178>)
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <HAL_DFSDM_ChannelInit+0x178>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d125      	bne.n	8000c60 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000c1e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	4948      	ldr	r1, [pc, #288]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c34:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000c38:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	791b      	ldrb	r3, [r3, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	493f      	ldr	r1, [pc, #252]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000c54:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <HAL_DFSDM_ChannelInit+0x17c>)
 8000c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c5e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000c6e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c7e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c84:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 020f 	bic.w	r2, r2, #15
 8000c9c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000cc4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6899      	ldr	r1, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f002 0207 	and.w	r2, r2, #7
 8000cf0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6859      	ldr	r1, [r3, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fa0a 	bl	8001144 <DFSDM_GetChannelFromInstance>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4904      	ldr	r1, [pc, #16]	; (8000d44 <HAL_DFSDM_ChannelInit+0x174>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000098 	.word	0x20000098
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	40016000 	.word	0x40016000

08000d50 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0ca      	b.n	8000ef8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a66      	ldr	r2, [pc, #408]	; (8000f00 <HAL_DFSDM_FilterInit+0x1b0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d109      	bne.n	8000d80 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d003      	beq.n	8000d7c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e0bb      	b.n	8000ef8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f006 fa07 	bl	80071ac <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000dac:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7a1b      	ldrb	r3, [r3, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d108      	bne.n	8000dc8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7a5b      	ldrb	r3, [r3, #9]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000e10:	f023 0308 	bic.w	r3, r3, #8
 8000e14:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d108      	bne.n	8000e30 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7c1b      	ldrb	r3, [r3, #16]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0210 	bic.w	r2, r2, #16
 8000e58:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7c5b      	ldrb	r3, [r3, #17]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0220 	orr.w	r2, r2, #32
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0220 	bic.w	r2, r2, #32
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000e92:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000e96:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6959      	ldr	r1, [r3, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000eaa:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000eb2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7c1a      	ldrb	r2, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40016100 	.word	0x40016100

08000f04 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02e      	beq.n	8000f7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d029      	beq.n	8000f7c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10d      	bne.n	8000f5e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f50:	431a      	orrs	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e00a      	b.n	8000f74 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
 8000f7a:	e001      	b.n	8000f80 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	e064      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000fc0:	d002      	beq.n	8000fc8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
 8000fc6:	e059      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10e      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d002      	beq.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	75fb      	strb	r3, [r7, #23]
 8000fec:	e046      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001004:	2b20      	cmp	r3, #32
 8001006:	d102      	bne.n	800100e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	75fb      	strb	r3, [r7, #23]
 800100c:	e036      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001014:	2b01      	cmp	r3, #1
 8001016:	d004      	beq.n	8001022 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800101e:	2b03      	cmp	r3, #3
 8001020:	d12a      	bne.n	8001078 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001038:	2b20      	cmp	r3, #32
 800103a:	d101      	bne.n	8001040 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800103e:	e000      	b.n	8001042 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001040:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	331c      	adds	r3, #28
 8001052:	4619      	mov	r1, r3
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f000 fa0c 	bl	8001474 <HAL_DMA_Start_IT>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800106e:	e005      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f8b3 	bl	80011dc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001076:	e001      	b.n	800107c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800107c:	7dfb      	ldrb	r3, [r7, #23]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	08001105 	.word	0x08001105
 800108c:	08001121 	.word	0x08001121
 8001090:	080010e9 	.word	0x080010e9

08001094 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d007      	beq.n	80010ba <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d002      	beq.n	80010ba <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e007      	b.n	80010ca <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fa53 	bl	800156a <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8df 	bl	8001288 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f005 fc6e 	bl	80069d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f005 fc70 	bl	80069f8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2203      	movs	r2, #3
 8001132:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ffcd 	bl	80010d4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e02b      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <DFSDM_GetChannelFromInstance+0x80>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e024      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <DFSDM_GetChannelFromInstance+0x84>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d102      	bne.n	8001176 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e01d      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <DFSDM_GetChannelFromInstance+0x88>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e016      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d102      	bne.n	8001192 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800118c:	2305      	movs	r3, #5
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e00f      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <DFSDM_GetChannelFromInstance+0x90>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d102      	bne.n	80011a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800119a:	2306      	movs	r3, #6
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e008      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <DFSDM_GetChannelFromInstance+0x94>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d102      	bne.n	80011ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e001      	b.n	80011b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40016000 	.word	0x40016000
 80011c4:	40016020 	.word	0x40016020
 80011c8:	40016040 	.word	0x40016040
 80011cc:	40016080 	.word	0x40016080
 80011d0:	400160a0 	.word	0x400160a0
 80011d4:	400160c0 	.word	0x400160c0
 80011d8:	400160e0 	.word	0x400160e0

080011dc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d108      	bne.n	80011fe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e033      	b.n	8001266 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800121c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001234:	2b03      	cmp	r3, #3
 8001236:	d116      	bne.n	8001266 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0202 	orr.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001256:	2b01      	cmp	r3, #1
 8001258:	d102      	bne.n	8001260 <DFSDM_RegConvStart+0x84>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	e000      	b.n	8001262 <DFSDM_RegConvStart+0x86>
 8001260:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <DFSDM_RegConvStart+0x98>
 8001270:	2202      	movs	r2, #2
 8001272:	e000      	b.n	8001276 <DFSDM_RegConvStart+0x9a>
 8001274:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d116      	bne.n	8001300 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d107      	bne.n	80012ea <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0202 	orr.w	r2, r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <DFSDM_RegConvStop+0x72>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	e000      	b.n	80012fc <DFSDM_RegConvStop+0x74>
 80012fa:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001306:	2b02      	cmp	r3, #2
 8001308:	d101      	bne.n	800130e <DFSDM_RegConvStop+0x86>
 800130a:	2201      	movs	r2, #1
 800130c:	e000      	b.n	8001310 <DFSDM_RegConvStop+0x88>
 800130e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e08d      	b.n	8001452 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_DMA_Init+0x138>)
 800133e:	429a      	cmp	r2, r3
 8001340:	d80f      	bhi.n	8001362 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_DMA_Init+0x13c>)
 800134a:	4413      	add	r3, r2
 800134c:	4a45      	ldr	r2, [pc, #276]	; (8001464 <HAL_DMA_Init+0x140>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	009a      	lsls	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_DMA_Init+0x144>)
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
 8001360:	e00e      	b.n	8001380 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <HAL_DMA_Init+0x148>)
 800136a:	4413      	add	r3, r2
 800136c:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_DMA_Init+0x140>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	009a      	lsls	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <HAL_DMA_Init+0x14c>)
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800139a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa12 	bl	80017fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013e0:	d102      	bne.n	80013e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013fc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <HAL_DMA_Init+0x104>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d80c      	bhi.n	8001428 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fa32 	bl	8001878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	e008      	b.n	800143a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40020407 	.word	0x40020407
 8001460:	bffdfff8 	.word	0xbffdfff8
 8001464:	cccccccd 	.word	0xcccccccd
 8001468:	40020000 	.word	0x40020000
 800146c:	bffdfbf8 	.word	0xbffdfbf8
 8001470:	40020400 	.word	0x40020400

08001474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_DMA_Start_IT+0x20>
 8001490:	2302      	movs	r3, #2
 8001492:	e066      	b.n	8001562 <HAL_DMA_Start_IT+0xee>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d155      	bne.n	8001554 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f957 	bl	8001780 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 020e 	orr.w	r2, r2, #14
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e00f      	b.n	800150c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0204 	bic.w	r2, r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 020a 	orr.w	r2, r2, #10
 800150a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001528:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001540:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e005      	b.n	8001560 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800155c:	2302      	movs	r3, #2
 800155e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d008      	beq.n	8001594 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e040      	b.n	8001616 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 020e 	bic.w	r2, r2, #14
 80015a2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 021c 	and.w	r2, r3, #28
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001602:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f003 031c 	and.w	r3, r3, #28
 8001642:	2204      	movs	r2, #4
 8001644:	409a      	lsls	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d026      	beq.n	800169c <HAL_DMA_IRQHandler+0x7a>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d021      	beq.n	800169c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b00      	cmp	r3, #0
 8001664:	d107      	bne.n	8001676 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0204 	bic.w	r2, r2, #4
 8001674:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 021c 	and.w	r2, r3, #28
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2104      	movs	r1, #4
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	2b00      	cmp	r3, #0
 8001690:	d071      	beq.n	8001776 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800169a:	e06c      	b.n	8001776 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031c 	and.w	r3, r3, #28
 80016a4:	2202      	movs	r2, #2
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02e      	beq.n	800170e <HAL_DMA_IRQHandler+0xec>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d029      	beq.n	800170e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10b      	bne.n	80016e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020a 	bic.w	r2, r2, #10
 80016d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 021c 	and.w	r2, r3, #28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2102      	movs	r1, #2
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d038      	beq.n	8001776 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800170c:	e033      	b.n	8001776 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 031c 	and.w	r3, r3, #28
 8001716:	2208      	movs	r2, #8
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d02a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x156>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d025      	beq.n	8001778 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020e 	bic.w	r2, r2, #14
 800173a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f003 021c 	and.w	r2, r3, #28
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001776:	bf00      	nop
 8001778:	bf00      	nop
}
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001796:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017a8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f003 021c 	and.w	r2, r3, #28
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d108      	bne.n	80017e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017de:	e007      	b.n	80017f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800180c:	429a      	cmp	r2, r3
 800180e:	d80a      	bhi.n	8001826 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800181c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6493      	str	r3, [r2, #72]	; 0x48
 8001824:	e007      	b.n	8001836 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	009a      	lsls	r2, r3, #2
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001830:	4413      	add	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3b08      	subs	r3, #8
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800184c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40020407 	.word	0x40020407
 800186c:	4002081c 	.word	0x4002081c
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40020880 	.word	0x40020880

08001878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800189a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2201      	movs	r2, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	1000823f 	.word	0x1000823f
 80018bc:	40020940 	.word	0x40020940

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e166      	b.n	8001b9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8158 	beq.w	8001b98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d005      	beq.n	8001900 <HAL_GPIO_Init+0x40>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d130      	bne.n	8001962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001936:	2201      	movs	r2, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	f003 0201 	and.w	r2, r3, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b03      	cmp	r3, #3
 800196c:	d017      	beq.n	800199e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d123      	bne.n	80019f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	6939      	ldr	r1, [r7, #16]
 80019ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0203 	and.w	r2, r3, #3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80b2 	beq.w	8001b98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_GPIO_Init+0x2fc>)
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a38:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_GPIO_Init+0x2fc>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_GPIO_Init+0x2fc>)
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a4c:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_GPIO_Init+0x300>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a76:	d02b      	beq.n	8001ad0 <HAL_GPIO_Init+0x210>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d025      	beq.n	8001acc <HAL_GPIO_Init+0x20c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_Init+0x308>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d01f      	beq.n	8001ac8 <HAL_GPIO_Init+0x208>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d019      	beq.n	8001ac4 <HAL_GPIO_Init+0x204>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_Init+0x310>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_GPIO_Init+0x200>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_GPIO_Init+0x314>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00d      	beq.n	8001abc <HAL_GPIO_Init+0x1fc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x318>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x1f8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x31c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_GPIO_Init+0x1f4>
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	e00e      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	e00c      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ab8:	2306      	movs	r3, #6
 8001aba:	e00a      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001abc:	2305      	movs	r3, #5
 8001abe:	e008      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e006      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae2:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_GPIO_Init+0x300>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b14:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f47f ae91 	bne.w	80018d0 <HAL_GPIO_Init+0x10>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	48000c00 	.word	0x48000c00
 8001bd0:	48001000 	.word	0x48001000
 8001bd4:	48001400 	.word	0x48001400
 8001bd8:	48001800 	.word	0x48001800
 8001bdc:	48001c00 	.word	0x48001c00
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	041a      	lsls	r2, r3, #16
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43d9      	mvns	r1, r3
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	400b      	ands	r3, r1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fed6 	bl	8006a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e081      	b.n	8001d8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f005 fba0 	bl	80073e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d104      	bne.n	8001d12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d138      	bne.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e032      	b.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2224      	movs	r2, #36	; 0x24
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d139      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e033      	b.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed4:	d102      	bne.n	8001edc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	e00b      	b.n	8001ef4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	d102      	bne.n	8001ef2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef0:	e000      	b.n	8001ef4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ef2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40007000 	.word	0x40007000

08001f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d141      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	d131      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f38:	4a41      	ldr	r2, [pc, #260]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2232      	movs	r2, #50	; 0x32
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	0c9b      	lsrs	r3, r3, #18
 8001f52:	3301      	adds	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f56:	e002      	b.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d102      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f2      	bne.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d158      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e057      	b.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f94:	e04d      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d141      	bne.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001faa:	d131      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2232      	movs	r2, #50	; 0x32
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9b      	lsrs	r3, r3, #18
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe2:	e002      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d102      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f2      	bne.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200a:	d112      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e011      	b.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002020:	e007      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002030:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40007000 	.word	0x40007000
 8002044:	2000000c 	.word	0x2000000c
 8002048:	431bde83 	.word	0x431bde83

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f000 bc08 	b.w	8002870 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002060:	4b96      	ldr	r3, [pc, #600]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80e4 	beq.w	800224a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_RCC_OscConfig+0x4c>
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	f040 808b 	bne.w	80021a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b01      	cmp	r3, #1
 8002094:	f040 8087 	bne.w	80021a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002098:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x64>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e3df      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_RCC_OscConfig+0x7e>
 80020c0:	4b7e      	ldr	r3, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c8:	e005      	b.n	80020d6 <HAL_RCC_OscConfig+0x8a>
 80020ca:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d223      	bcs.n	8002122 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fdfe 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e3c0      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a72      	ldr	r2, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	496d      	ldr	r1, [pc, #436]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4968      	ldr	r1, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	e025      	b.n	800216e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002122:	4b66      	ldr	r3, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a65      	ldr	r2, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4960      	ldr	r1, [pc, #384]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	495b      	ldr	r1, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fdbe 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e380      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216e:	f000 fcc1 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	4950      	ldr	r1, [pc, #320]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_RCC_OscConfig+0x278>)
 800218c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f005 fa06 	bl	80075a4 <HAL_InitTick>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d052      	beq.n	8002248 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	e364      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d032      	beq.n	8002214 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ba:	f7fe fa27 	bl	800060c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c2:	f7fe fa23 	bl	800060c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e34d      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a35      	ldr	r2, [pc, #212]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4930      	ldr	r1, [pc, #192]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	492b      	ldr	r1, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
 8002212:	e01a      	b.n	800224a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002220:	f7fe f9f4 	bl	800060c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002228:	f7fe f9f0 	bl	800060c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e31a      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1dc>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d073      	beq.n	800233e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d005      	beq.n	8002268 <HAL_RCC_OscConfig+0x21c>
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d10e      	bne.n	8002280 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d063      	beq.n	800233c <HAL_RCC_OscConfig+0x2f0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d15f      	bne.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e2f7      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x24c>
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e025      	b.n	80022e4 <HAL_RCC_OscConfig+0x298>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d114      	bne.n	80022cc <HAL_RCC_OscConfig+0x280>
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x298>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08008f88 	.word	0x08008f88
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	20000000 	.word	0x20000000
 80022cc:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9f      	ldr	r2, [pc, #636]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a9c      	ldr	r2, [pc, #624]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe f98e 	bl	800060c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe f98a 	bl	800060c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e2b4      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2a8>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe f97a 	bl	800060c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe f976 	bl	800060c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e2a0      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x2d0>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d060      	beq.n	800240c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x310>
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d119      	bne.n	800238a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d116      	bne.n	800238a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235c:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x328>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e27d      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	4973      	ldr	r1, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002388:	e040      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d023      	beq.n	80023da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe f935 	bl	800060c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe f931 	bl	800060c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e25b      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	495f      	ldr	r1, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e018      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5c      	ldr	r2, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe f911 	bl	800060c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7fe f90d 	bl	800060c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e237      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03c      	beq.n	8002492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01c      	beq.n	800245a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe f8ec 	bl	800060c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe f8e8 	bl	800060c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e212      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ef      	beq.n	8002438 <HAL_RCC_OscConfig+0x3ec>
 8002458:	e01b      	b.n	8002492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7fe f8cf 	bl	800060c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002472:	f7fe f8cb 	bl	800060c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1f5      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ef      	bne.n	8002472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a6 	beq.w	80025ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	4a26      	ldr	r2, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	; 0x58
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d118      	bne.n	800250a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCC_OscConfig+0x508>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x508>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e4:	f7fe f892 	bl	800060c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7fe f88e 	bl	800060c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1b8      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x508>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x4d8>
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002522:	e029      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d115      	bne.n	8002558 <HAL_RCC_OscConfig+0x50c>
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_RCC_OscConfig+0x504>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x52c>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	4b9d      	ldr	r3, [pc, #628]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	4a9c      	ldr	r2, [pc, #624]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002568:	4b99      	ldr	r3, [pc, #612]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe f844 	bl	800060c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe f840 	bl	800060c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e168      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ed      	beq.n	8002588 <HAL_RCC_OscConfig+0x53c>
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe f82d 	bl	800060c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe f829 	bl	800060c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e151      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025cc:	4b80      	ldr	r3, [pc, #512]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ed      	bne.n	80025b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03c      	beq.n	8002672 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01c      	beq.n	800263a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002600:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002606:	4a72      	ldr	r2, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fd fffc 	bl	800060c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002618:	f7fd fff8 	bl	800060c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e122      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262a:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800262c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ef      	beq.n	8002618 <HAL_RCC_OscConfig+0x5cc>
 8002638:	e01b      	b.n	8002672 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800263c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002640:	4a63      	ldr	r2, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fd ffdf 	bl	800060c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002652:	f7fd ffdb 	bl	800060c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e105      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ef      	bne.n	8002652 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80f9 	beq.w	800286e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	2b02      	cmp	r3, #2
 8002682:	f040 80cf 	bne.w	8002824 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002686:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0203 	and.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	429a      	cmp	r2, r3
 8002698:	d12c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	3b01      	subs	r3, #1
 80026a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d123      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d11b      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d113      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	3b01      	subs	r3, #1
 80026da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d109      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d071      	beq.n	80027d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d068      	beq.n	80027cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026fa:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0ac      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002716:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800271c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002720:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002722:	f7fd ff73 	bl	800060c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7fd ff6f 	bl	800060c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e099      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x788>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002758:	3a01      	subs	r2, #1
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002762:	0212      	lsls	r2, r2, #8
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0552      	lsls	r2, r2, #21
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0652      	lsls	r2, r2, #25
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002782:	06d2      	lsls	r2, r2, #27
 8002784:	430a      	orrs	r2, r1
 8002786:	4912      	ldr	r1, [pc, #72]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a4:	f7fd ff32 	bl	800060c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fd ff2e 	bl	800060c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e058      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_RCC_OscConfig+0x784>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ca:	e050      	b.n	800286e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e04f      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
 80027d0:	40021000 	.word	0x40021000
 80027d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d144      	bne.n	800286e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027fc:	f7fd ff06 	bl	800060c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fd ff02 	bl	800060c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e02c      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x7b8>
 8002822:	e024      	b.n	800286e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d01f      	beq.n	800286a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 8002830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fd fee9 	bl	800060c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7fd fee5 	bl	800060c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e00f      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4905      	ldr	r1, [pc, #20]	; (8002878 <HAL_RCC_OscConfig+0x82c>)
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x830>)
 8002864:	4013      	ands	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
 8002868:	e001      	b.n	800286e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	feeefffc 	.word	0xfeeefffc

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e11d      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b90      	ldr	r3, [pc, #576]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	498b      	ldr	r1, [pc, #556]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b89      	ldr	r3, [pc, #548]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e105      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d908      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b7e      	ldr	r3, [pc, #504]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	497b      	ldr	r1, [pc, #492]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d079      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d11e      	bne.n	8002948 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0dc      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800291a:	f000 fa3b 	bl	8002d94 <RCC_GetSysClockFreqFromPLLSource>
 800291e:	4603      	mov	r3, r0
 8002920:	4a70      	ldr	r2, [pc, #448]	; (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d946      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002926:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d140      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002932:	4b6b      	ldr	r3, [pc, #428]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293a:	4a69      	ldr	r2, [pc, #420]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e035      	b.n	80029b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002950:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d115      	bne.n	8002988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b9      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002968:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0ad      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0a5      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002988:	f000 f8b4 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 800298c:	4603      	mov	r3, r0
 800298e:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d90f      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 0203 	bic.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4947      	ldr	r1, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c6:	f7fd fe21 	bl	800060c <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ce:	f7fd fe1d 	bl	800060c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e077      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e4:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 020c 	and.w	r2, r3, #12
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d1eb      	bne.n	80029ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b80      	cmp	r3, #128	; 0x80
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029fc:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a37      	ldr	r2, [pc, #220]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d208      	bcs.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	492b      	ldr	r1, [pc, #172]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d210      	bcs.n	8002a66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 020f 	bic.w	r2, r3, #15
 8002a4c:	4923      	ldr	r1, [pc, #140]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e036      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4918      	ldr	r1, [pc, #96]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa4:	f000 f826 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	490c      	ldr	r1, [pc, #48]	; (8002ae8 <HAL_RCC_ClockConfig+0x268>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x26c>)
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fd6b 	bl	80075a4 <HAL_InitTick>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	04c4b400 	.word	0x04c4b400
 8002ae8:	08008f88 	.word	0x08008f88
 8002aec:	2000000c 	.word	0x2000000c
 8002af0:	20000000 	.word	0x20000000

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d121      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d11e      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e004      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d134      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8002b98:	e005      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba2:	617b      	str	r3, [r7, #20]
      break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	617b      	str	r3, [r7, #20]
      break;
 8002baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	fb03 f202 	mul.w	r2, r3, r2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	0e5b      	lsrs	r3, r3, #25
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bec:	69bb      	ldr	r3, [r7, #24]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08008fa0 	.word	0x08008fa0
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	007a1200 	.word	0x007a1200

08002c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2000000c 	.word	0x2000000c

08002c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c28:	f7ff fff0 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4904      	ldr	r1, [pc, #16]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08008f98 	.word	0x08008f98

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c54:	f7ff ffda 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0adb      	lsrs	r3, r3, #11
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4904      	ldr	r1, [pc, #16]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08008f98 	.word	0x08008f98

08002c7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	220f      	movs	r2, #15
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RCC_GetClockConfig+0x60>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40022000 	.word	0x40022000

08002ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf8:	f7ff f8e4 	bl	8001ec4 <HAL_PWREx_GetVoltageRange>
 8002cfc:	6178      	str	r0, [r7, #20]
 8002cfe:	e014      	b.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d18:	f7ff f8d4 	bl	8001ec4 <HAL_PWREx_GetVoltageRange>
 8002d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d10b      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d913      	bls.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d3c:	d902      	bls.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3e:	2302      	movs	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e00d      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e00a      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4e:	d902      	bls.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d50:	2302      	movs	r3, #2
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e004      	b.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b70      	cmp	r3, #112	; 0x70
 8002d5a:	d101      	bne.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 020f 	bic.w	r2, r3, #15
 8002d68:	4909      	ldr	r1, [pc, #36]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40022000 	.word	0x40022000

08002d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d00b      	beq.n	8002dc2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d825      	bhi.n	8002dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d008      	beq.n	8002dc8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11f      	bne.n	8002dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dbe:	613b      	str	r3, [r7, #16]
    break;
 8002dc0:	e01f      	b.n	8002e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002dc4:	613b      	str	r3, [r7, #16]
    break;
 8002dc6:	e01c      	b.n	8002e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd4:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e005      	b.n	8002df0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002df0:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	613b      	str	r3, [r7, #16]
    break;
 8002dfa:	e002      	b.n	8002e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
    break;
 8002e00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	fb03 f202 	mul.w	r2, r3, r2
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0e5b      	lsrs	r3, r3, #25
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e42:	683b      	ldr	r3, [r7, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200
 8002e5c:	08008fa0 	.word	0x08008fa0

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d040      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d02a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d825      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e88:	2b60      	cmp	r3, #96	; 0x60
 8002e8a:	d026      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d821      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d006      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d81d      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea2:	4b89      	ldr	r3, [pc, #548]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a88      	ldr	r2, [pc, #544]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eae:	e015      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fb02 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec0:	e00c      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3320      	adds	r3, #32
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fbed 	bl	80036a8 <RCCEx_PLLSAI2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed2:	e003      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	74fb      	strb	r3, [r7, #19]
      break;
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee2:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ee8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef0:	4975      	ldr	r1, [pc, #468]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ef8:	e001      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d047      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d030      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d82a      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d02a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d824      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d81e      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f3c:	e018      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a61      	ldr	r2, [pc, #388]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4a:	e015      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fab4 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3320      	adds	r3, #32
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fb9f 	bl	80036a8 <RCCEx_PLLSAI2_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6e:	e003      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	74fb      	strb	r3, [r7, #19]
      break;
 8002f74:	e000      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7e:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	494e      	ldr	r1, [pc, #312]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f94:	e001      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 809f 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a40      	ldr	r2, [pc, #256]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fea:	f7fd fb0f 	bl	800060c <HAL_GetTick>
 8002fee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff0:	e009      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fd fb0b 	bl	800060c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d902      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	74fb      	strb	r3, [r7, #19]
        break;
 8003004:	e005      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ef      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d15b      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01f      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	429a      	cmp	r2, r3
 8003034:	d019      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fd faca 	bl	800060c <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	e00b      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fd fac6 	bl	800060c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d902      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	74fb      	strb	r3, [r7, #19]
            break;
 8003092:	e006      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ec      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10c      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030c0:	e008      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	74bb      	strb	r3, [r7, #18]
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4ba0      	ldr	r3, [pc, #640]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a9f      	ldr	r2, [pc, #636]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b9a      	ldr	r3, [pc, #616]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	4996      	ldr	r1, [pc, #600]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	4b91      	ldr	r3, [pc, #580]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 020c 	bic.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	498e      	ldr	r1, [pc, #568]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	4985      	ldr	r1, [pc, #532]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	4b80      	ldr	r3, [pc, #512]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003166:	497d      	ldr	r1, [pc, #500]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4b78      	ldr	r3, [pc, #480]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003188:	4974      	ldr	r1, [pc, #464]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	496c      	ldr	r1, [pc, #432]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031cc:	4963      	ldr	r1, [pc, #396]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	4b5e      	ldr	r3, [pc, #376]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	495b      	ldr	r1, [pc, #364]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4b56      	ldr	r3, [pc, #344]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	4952      	ldr	r1, [pc, #328]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	4b4d      	ldr	r3, [pc, #308]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	494a      	ldr	r1, [pc, #296]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	4941      	ldr	r1, [pc, #260]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003268:	4b3c      	ldr	r3, [pc, #240]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	4939      	ldr	r1, [pc, #228]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d028      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328a:	4b34      	ldr	r3, [pc, #208]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	4930      	ldr	r1, [pc, #192]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b4:	60d3      	str	r3, [r2, #12]
 80032b6:	e011      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f8f9 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d04d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f0:	d108      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003302:	e012      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330a:	4a14      	ldr	r2, [pc, #80]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003310:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	490e      	ldr	r1, [pc, #56]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003332:	d106      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
 8003340:	e020      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334a:	d109      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a02      	ldr	r2, [pc, #8]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e014      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003368:	d10c      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f8a5 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d028      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003390:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339e:	4947      	ldr	r1, [pc, #284]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ae:	d106      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b42      	ldr	r3, [pc, #264]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a41      	ldr	r2, [pc, #260]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
 80033bc:	e011      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f876 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01e      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	492f      	ldr	r1, [pc, #188]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f851 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343e:	f023 0204 	bic.w	r2, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003448:	491c      	ldr	r1, [pc, #112]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003462:	f023 0218 	bic.w	r2, r3, #24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	4913      	ldr	r1, [pc, #76]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003490:	490a      	ldr	r1, [pc, #40]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000

080034c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ce:	4b72      	ldr	r3, [pc, #456]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00e      	beq.n	80034f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0203 	and.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d103      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
       ||
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d142      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e03f      	b.n	8003578 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d018      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x72>
 8003500:	2b03      	cmp	r3, #3
 8003502:	d825      	bhi.n	8003550 <RCCEx_PLLSAI1_Config+0x90>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x4e>
 8003508:	2b02      	cmp	r3, #2
 800350a:	d009      	beq.n	8003520 <RCCEx_PLLSAI1_Config+0x60>
 800350c:	e020      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800350e:	4b62      	ldr	r3, [pc, #392]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e01a      	b.n	8003556 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003520:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e013      	b.n	800355a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003532:	4b59      	ldr	r3, [pc, #356]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800353e:	4b56      	ldr	r3, [pc, #344]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800354e:	e006      	b.n	800355e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e004      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800355e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003566:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4949      	ldr	r1, [pc, #292]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 8086 	bne.w	800368c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a44      	ldr	r2, [pc, #272]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800358a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fd f83e 	bl	800060c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003592:	e009      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003594:	f7fd f83a 	bl	800060c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	73fb      	strb	r3, [r7, #15]
        break;
 80035a6:	e005      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a8:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ef      	bne.n	8003594 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d113      	bne.n	80035e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6892      	ldr	r2, [r2, #8]
 80035cc:	0211      	lsls	r1, r2, #8
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	06d2      	lsls	r2, r2, #27
 80035d4:	4311      	orrs	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6852      	ldr	r2, [r2, #4]
 80035da:	3a01      	subs	r2, #1
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	430a      	orrs	r2, r1
 80035e0:	492d      	ldr	r1, [pc, #180]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
 80035e6:	e02d      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d115      	bne.n	800361a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	0211      	lsls	r1, r2, #8
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6912      	ldr	r2, [r2, #16]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	3a01      	subs	r2, #1
 8003604:	0552      	lsls	r2, r2, #21
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	3a01      	subs	r2, #1
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	430a      	orrs	r2, r1
 8003612:	4921      	ldr	r1, [pc, #132]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	610b      	str	r3, [r1, #16]
 8003618:	e014      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	0211      	lsls	r1, r2, #8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6952      	ldr	r2, [r2, #20]
 800362c:	0852      	lsrs	r2, r2, #1
 800362e:	3a01      	subs	r2, #1
 8003630:	0652      	lsls	r2, r2, #25
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6852      	ldr	r2, [r2, #4]
 8003638:	3a01      	subs	r2, #1
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	430a      	orrs	r2, r1
 800363e:	4916      	ldr	r1, [pc, #88]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fc ffdc 	bl	800060c <HAL_GetTick>
 8003654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003656:	e009      	b.n	800366c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003658:	f7fc ffd8 	bl	800060c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d902      	bls.n	800366c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	73fb      	strb	r3, [r7, #15]
          break;
 800366a:	e005      	b.n	8003678 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ef      	beq.n	8003658 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	4904      	ldr	r1, [pc, #16]	; (8003698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	07ff800f 	.word	0x07ff800f
 80036a0:	ff9f800f 	.word	0xff9f800f
 80036a4:	f9ff800f 	.word	0xf9ff800f

080036a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036b6:	4b72      	ldr	r3, [pc, #456]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036c2:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d103      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
       ||
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d142      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	e03f      	b.n	8003760 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d018      	beq.n	800371a <RCCEx_PLLSAI2_Config+0x72>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d825      	bhi.n	8003738 <RCCEx_PLLSAI2_Config+0x90>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <RCCEx_PLLSAI2_Config+0x4e>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d009      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0x60>
 80036f4:	e020      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f6:	4b62      	ldr	r3, [pc, #392]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11d      	bne.n	800373e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003706:	e01a      	b.n	800373e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003708:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e013      	b.n	8003742 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800371a:	4b59      	ldr	r3, [pc, #356]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003726:	4b56      	ldr	r3, [pc, #344]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003736:	e006      	b.n	8003746 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e004      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003746:	bf00      	nop
    }

    if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800374e:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4949      	ldr	r1, [pc, #292]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f040 8086 	bne.w	8003874 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003768:	4b45      	ldr	r3, [pc, #276]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a44      	ldr	r2, [pc, #272]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fc ff4a 	bl	800060c <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800377c:	f7fc ff46 	bl	800060c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
        break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ef      	bne.n	800377c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d168      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d113      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a8:	4b35      	ldr	r3, [pc, #212]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <RCCEx_PLLSAI2_Config+0x1dc>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	0211      	lsls	r1, r2, #8
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	06d2      	lsls	r2, r2, #27
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	3a01      	subs	r2, #1
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	430a      	orrs	r2, r1
 80037c8:	492d      	ldr	r1, [pc, #180]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	614b      	str	r3, [r1, #20]
 80037ce:	e02d      	b.n	800382c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d115      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <RCCEx_PLLSAI2_Config+0x1e0>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	0211      	lsls	r1, r2, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6912      	ldr	r2, [r2, #16]
 80037e8:	0852      	lsrs	r2, r2, #1
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0552      	lsls	r2, r2, #21
 80037ee:	4311      	orrs	r1, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4921      	ldr	r1, [pc, #132]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	614b      	str	r3, [r1, #20]
 8003800:	e014      	b.n	800382c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	0211      	lsls	r1, r2, #8
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6952      	ldr	r2, [r2, #20]
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	3a01      	subs	r2, #1
 8003818:	0652      	lsls	r2, r2, #25
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	3a01      	subs	r2, #1
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fc fee8 	bl	800060c <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003840:	f7fc fee4 	bl	800060c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4904      	ldr	r1, [pc, #16]	; (8003880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	07ff800f 	.word	0x07ff800f
 8003888:	ff9f800f 	.word	0xff9f800f
 800388c:	f9ff800f 	.word	0xf9ff800f

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e049      	b.n	8003936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f003 fdf2 	bl	80074a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fab6 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d001      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e04f      	b.n	80039f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01d      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d018      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_TIM_Base_Start_IT+0x76>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d115      	bne.n	80039e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b06      	cmp	r3, #6
 80039c6:	d015      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0xb4>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ce:	d011      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	e008      	b.n	80039f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e000      	b.n	80039f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800
 8003a10:	40000c00 	.word	0x40000c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	00010007 	.word	0x00010007

08003a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0202 	mvn.w	r2, #2
 8003a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9ce 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9c0 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f9d1 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d122      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d11b      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0204 	mvn.w	r2, #4
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9a4 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f996 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f9a7 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d122      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d11b      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0208 	mvn.w	r2, #8
 8003af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2204      	movs	r2, #4
 8003afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f97a 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f96c 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f97d 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0210 	mvn.w	r2, #16
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f950 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f942 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f953 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d10e      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0201 	mvn.w	r2, #1
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f003 fa4e 	bl	8007040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d107      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fafe 	bl	80041cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d10e      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 faf1 	bl	80041e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d10e      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d107      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f901 	bl	8003e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0220 	mvn.w	r2, #32
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fab1 	bl	80041b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_ConfigClockSource+0x1c>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0b6      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x18a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	d03e      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xd8>
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbc:	f200 8087 	bhi.w	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	f000 8086 	beq.w	8003dd4 <HAL_TIM_ConfigClockSource+0x176>
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d87f      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cce:	2b70      	cmp	r3, #112	; 0x70
 8003cd0:	d01a      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xaa>
 8003cd2:	2b70      	cmp	r3, #112	; 0x70
 8003cd4:	d87b      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cd6:	2b60      	cmp	r3, #96	; 0x60
 8003cd8:	d050      	beq.n	8003d7c <HAL_TIM_ConfigClockSource+0x11e>
 8003cda:	2b60      	cmp	r3, #96	; 0x60
 8003cdc:	d877      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cde:	2b50      	cmp	r3, #80	; 0x50
 8003ce0:	d03c      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xfe>
 8003ce2:	2b50      	cmp	r3, #80	; 0x50
 8003ce4:	d873      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d058      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x13e>
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d86f      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cee:	2b30      	cmp	r3, #48	; 0x30
 8003cf0:	d064      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x15e>
 8003cf2:	2b30      	cmp	r3, #48	; 0x30
 8003cf4:	d86b      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d060      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x15e>
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d867      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d05c      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x15e>
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d05a      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x15e>
 8003d06:	e062      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f000 f9a6 	bl	8004068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]
      break;
 8003d34:	e04f      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 f98f 	bl	8004068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e03c      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f000 f903 	bl	8003f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2150      	movs	r1, #80	; 0x50
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f95c 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003d7a:	e02c      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f000 f922 	bl	8003fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2160      	movs	r1, #96	; 0x60
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f94c 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003d9a:	e01c      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f000 f8e3 	bl	8003f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f93c 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 f933 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d01b      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d017      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x128>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x130>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00f      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <TIM_Base_SetConfig+0x128>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <TIM_Base_SetConfig+0x130>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40013400 	.word	0x40013400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	40014800 	.word	0x40014800

08003f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 030a 	bic.w	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0210 	bic.w	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 0307 	orr.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040bc:	2302      	movs	r3, #2
 80040be:	e068      	b.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d018      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10c      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40013400 	.word	0x40013400
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40014000 	.word	0x40014000

080041b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e042      	b.n	800428c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f003 f965 	bl	80074e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2224      	movs	r2, #36	; 0x24
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8c4 	bl	80043c4 <UART_SetConfig>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e022      	b.n	800428c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fbb4 	bl	80049bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fc3b 	bl	8004b00 <UART_CheckIdleState>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 8084 	bne.w	80043b8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Transmit+0x28>
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e07c      	b.n	80043ba <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Transmit+0x3a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e075      	b.n	80043ba <HAL_UART_Transmit+0x126>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2221      	movs	r2, #33	; 0x21
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e6:	f7fc f991 	bl	800060c <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d108      	bne.n	8004318 <HAL_UART_Transmit+0x84>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	e003      	b.n	8004320 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004328:	e02d      	b.n	8004386 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fc2e 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e03a      	b.n	80043ba <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	881a      	ldrh	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004356:	b292      	uxth	r2, r2
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	3302      	adds	r3, #2
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e008      	b.n	8004374 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b292      	uxth	r2, r2
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3301      	adds	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1cb      	bne.n	800432a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2140      	movs	r1, #64	; 0x40
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fbfa 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e006      	b.n	80043ba <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b08c      	sub	sp, #48	; 0x30
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4baa      	ldr	r3, [pc, #680]	; (800469c <UART_SetConfig+0x2d8>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a9f      	ldr	r2, [pc, #636]	; (80046a0 <UART_SetConfig+0x2dc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	4313      	orrs	r3, r2
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800443a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004444:	430b      	orrs	r3, r1
 8004446:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	f023 010f 	bic.w	r1, r3, #15
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a90      	ldr	r2, [pc, #576]	; (80046a4 <UART_SetConfig+0x2e0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d125      	bne.n	80044b4 <UART_SetConfig+0xf0>
 8004468:	4b8f      	ldr	r3, [pc, #572]	; (80046a8 <UART_SetConfig+0x2e4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	d81a      	bhi.n	80044ac <UART_SetConfig+0xe8>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0xb8>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	0800448d 	.word	0x0800448d
 8004480:	0800449d 	.word	0x0800449d
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a5 	.word	0x080044a5
 800448c:	2301      	movs	r3, #1
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004492:	e116      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449a:	e112      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a2:	e10e      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044aa:	e10a      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b2:	e106      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7c      	ldr	r2, [pc, #496]	; (80046ac <UART_SetConfig+0x2e8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d138      	bne.n	8004530 <UART_SetConfig+0x16c>
 80044be:	4b7a      	ldr	r3, [pc, #488]	; (80046a8 <UART_SetConfig+0x2e4>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d82d      	bhi.n	8004528 <UART_SetConfig+0x164>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x110>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004529 	.word	0x08004529
 80044e0:	08004529 	.word	0x08004529
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004529 	.word	0x08004529
 80044ec:	08004529 	.word	0x08004529
 80044f0:	08004529 	.word	0x08004529
 80044f4:	08004511 	.word	0x08004511
 80044f8:	08004529 	.word	0x08004529
 80044fc:	08004529 	.word	0x08004529
 8004500:	08004529 	.word	0x08004529
 8004504:	08004521 	.word	0x08004521
 8004508:	2300      	movs	r3, #0
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450e:	e0d8      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004510:	2302      	movs	r3, #2
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004516:	e0d4      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451e:	e0d0      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004526:	e0cc      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452e:	e0c8      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5e      	ldr	r2, [pc, #376]	; (80046b0 <UART_SetConfig+0x2ec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d125      	bne.n	8004586 <UART_SetConfig+0x1c2>
 800453a:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <UART_SetConfig+0x2e4>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d016      	beq.n	8004576 <UART_SetConfig+0x1b2>
 8004548:	2b30      	cmp	r3, #48	; 0x30
 800454a:	d818      	bhi.n	800457e <UART_SetConfig+0x1ba>
 800454c:	2b20      	cmp	r3, #32
 800454e:	d00a      	beq.n	8004566 <UART_SetConfig+0x1a2>
 8004550:	2b20      	cmp	r3, #32
 8004552:	d814      	bhi.n	800457e <UART_SetConfig+0x1ba>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <UART_SetConfig+0x19a>
 8004558:	2b10      	cmp	r3, #16
 800455a:	d008      	beq.n	800456e <UART_SetConfig+0x1aa>
 800455c:	e00f      	b.n	800457e <UART_SetConfig+0x1ba>
 800455e:	2300      	movs	r3, #0
 8004560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004564:	e0ad      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004566:	2302      	movs	r3, #2
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456c:	e0a9      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800456e:	2304      	movs	r3, #4
 8004570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004574:	e0a5      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004576:	2308      	movs	r3, #8
 8004578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457c:	e0a1      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800457e:	2310      	movs	r3, #16
 8004580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004584:	e09d      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <UART_SetConfig+0x2f0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d125      	bne.n	80045dc <UART_SetConfig+0x218>
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <UART_SetConfig+0x2e4>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800459a:	2bc0      	cmp	r3, #192	; 0xc0
 800459c:	d016      	beq.n	80045cc <UART_SetConfig+0x208>
 800459e:	2bc0      	cmp	r3, #192	; 0xc0
 80045a0:	d818      	bhi.n	80045d4 <UART_SetConfig+0x210>
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d00a      	beq.n	80045bc <UART_SetConfig+0x1f8>
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d814      	bhi.n	80045d4 <UART_SetConfig+0x210>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <UART_SetConfig+0x1f0>
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d008      	beq.n	80045c4 <UART_SetConfig+0x200>
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x210>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ba:	e082      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c2:	e07e      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e07a      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e076      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e072      	b.n	80046c2 <UART_SetConfig+0x2fe>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <UART_SetConfig+0x2f4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d12a      	bne.n	800463c <UART_SetConfig+0x278>
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <UART_SetConfig+0x2e4>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f4:	d01a      	beq.n	800462c <UART_SetConfig+0x268>
 80045f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fa:	d81b      	bhi.n	8004634 <UART_SetConfig+0x270>
 80045fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004600:	d00c      	beq.n	800461c <UART_SetConfig+0x258>
 8004602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004606:	d815      	bhi.n	8004634 <UART_SetConfig+0x270>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <UART_SetConfig+0x250>
 800460c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004610:	d008      	beq.n	8004624 <UART_SetConfig+0x260>
 8004612:	e00f      	b.n	8004634 <UART_SetConfig+0x270>
 8004614:	2300      	movs	r3, #0
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e052      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800461c:	2302      	movs	r3, #2
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e04e      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462a:	e04a      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004632:	e046      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463a:	e042      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <UART_SetConfig+0x2dc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d13a      	bne.n	80046bc <UART_SetConfig+0x2f8>
 8004646:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <UART_SetConfig+0x2e4>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004654:	d01a      	beq.n	800468c <UART_SetConfig+0x2c8>
 8004656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465a:	d81b      	bhi.n	8004694 <UART_SetConfig+0x2d0>
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004660:	d00c      	beq.n	800467c <UART_SetConfig+0x2b8>
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d815      	bhi.n	8004694 <UART_SetConfig+0x2d0>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <UART_SetConfig+0x2b0>
 800466c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004670:	d008      	beq.n	8004684 <UART_SetConfig+0x2c0>
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x2d0>
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e022      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800467c:	2302      	movs	r3, #2
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004682:	e01e      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468a:	e01a      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e016      	b.n	80046c2 <UART_SetConfig+0x2fe>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469a:	e012      	b.n	80046c2 <UART_SetConfig+0x2fe>
 800469c:	cfff69f3 	.word	0xcfff69f3
 80046a0:	40008000 	.word	0x40008000
 80046a4:	40013800 	.word	0x40013800
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40004400 	.word	0x40004400
 80046b0:	40004800 	.word	0x40004800
 80046b4:	40004c00 	.word	0x40004c00
 80046b8:	40005000 	.word	0x40005000
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4aae      	ldr	r2, [pc, #696]	; (8004980 <UART_SetConfig+0x5bc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f040 8097 	bne.w	80047fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d823      	bhi.n	800471e <UART_SetConfig+0x35a>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0x318>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004701 	.word	0x08004701
 80046e0:	0800471f 	.word	0x0800471f
 80046e4:	08004709 	.word	0x08004709
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	0800470f 	.word	0x0800470f
 80046f0:	0800471f 	.word	0x0800471f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800471f 	.word	0x0800471f
 80046fc:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fa90 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004706:	e010      	b.n	800472a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b9e      	ldr	r3, [pc, #632]	; (8004984 <UART_SetConfig+0x5c0>)
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800470c:	e00d      	b.n	800472a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7fe f9f1 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004714:	e009      	b.n	800472a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800471c:	e005      	b.n	800472a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8130 	beq.w	8004992 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	4a94      	ldr	r2, [pc, #592]	; (8004988 <UART_SetConfig+0x5c4>)
 8004738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800473c:	461a      	mov	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	fbb3 f3f2 	udiv	r3, r3, r2
 8004744:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	429a      	cmp	r2, r3
 8004754:	d305      	bcc.n	8004762 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	429a      	cmp	r2, r3
 8004760:	d903      	bls.n	800476a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004768:	e113      	b.n	8004992 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2200      	movs	r2, #0
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	60fa      	str	r2, [r7, #12]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	4a84      	ldr	r2, [pc, #528]	; (8004988 <UART_SetConfig+0x5c4>)
 8004778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800477c:	b29b      	uxth	r3, r3
 800477e:	2200      	movs	r2, #0
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800478c:	f7fb fd90 	bl	80002b0 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	020b      	lsls	r3, r1, #8
 80047a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047a6:	0202      	lsls	r2, r0, #8
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	6849      	ldr	r1, [r1, #4]
 80047ac:	0849      	lsrs	r1, r1, #1
 80047ae:	2000      	movs	r0, #0
 80047b0:	460c      	mov	r4, r1
 80047b2:	4605      	mov	r5, r0
 80047b4:	eb12 0804 	adds.w	r8, r2, r4
 80047b8:	eb43 0905 	adc.w	r9, r3, r5
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	469a      	mov	sl, r3
 80047c4:	4693      	mov	fp, r2
 80047c6:	4652      	mov	r2, sl
 80047c8:	465b      	mov	r3, fp
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fb fd6f 	bl	80002b0 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4613      	mov	r3, r2
 80047d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e0:	d308      	bcc.n	80047f4 <UART_SetConfig+0x430>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e8:	d204      	bcs.n	80047f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a3a      	ldr	r2, [r7, #32]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e0ce      	b.n	8004992 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047fa:	e0ca      	b.n	8004992 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d166      	bne.n	80048d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800480a:	2b08      	cmp	r3, #8
 800480c:	d827      	bhi.n	800485e <UART_SetConfig+0x49a>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x450>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004839 	.word	0x08004839
 8004818:	08004841 	.word	0x08004841
 800481c:	08004849 	.word	0x08004849
 8004820:	0800485f 	.word	0x0800485f
 8004824:	0800484f 	.word	0x0800484f
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800485f 	.word	0x0800485f
 8004830:	0800485f 	.word	0x0800485f
 8004834:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fe f9f4 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800483e:	e014      	b.n	800486a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe fa06 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8004844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004846:	e010      	b.n	800486a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <UART_SetConfig+0x5c0>)
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800484c:	e00d      	b.n	800486a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe f951 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004854:	e009      	b.n	800486a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800485c:	e005      	b.n	800486a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8090 	beq.w	8004992 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	4a44      	ldr	r2, [pc, #272]	; (8004988 <UART_SetConfig+0x5c4>)
 8004878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800487c:	461a      	mov	r2, r3
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	fbb3 f3f2 	udiv	r3, r3, r2
 8004884:	005a      	lsls	r2, r3, #1
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	441a      	add	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d916      	bls.n	80048cc <UART_SetConfig+0x508>
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d212      	bcs.n	80048cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f023 030f 	bic.w	r3, r3, #15
 80048ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	8bfb      	ldrh	r3, [r7, #30]
 80048be:	4313      	orrs	r3, r2
 80048c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	8bfa      	ldrh	r2, [r7, #30]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e062      	b.n	8004992 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048d2:	e05e      	b.n	8004992 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d828      	bhi.n	800492e <UART_SetConfig+0x56a>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x520>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800492f 	.word	0x0800492f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800492f 	.word	0x0800492f
 80048fc:	0800492f 	.word	0x0800492f
 8004900:	0800492f 	.word	0x0800492f
 8004904:	08004927 	.word	0x08004927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe f98c 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800490c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800490e:	e014      	b.n	800493a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fe f99e 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004916:	e010      	b.n	800493a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <UART_SetConfig+0x5c0>)
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800491c:	e00d      	b.n	800493a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7fe f8e9 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004924:	e009      	b.n	800493a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800492c:	e005      	b.n	800493a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004938:	bf00      	nop
    }

    if (pclk != 0U)
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d028      	beq.n	8004992 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <UART_SetConfig+0x5c4>)
 8004946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494a:	461a      	mov	r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	441a      	add	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2b0f      	cmp	r3, #15
 8004968:	d910      	bls.n	800498c <UART_SetConfig+0x5c8>
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d20c      	bcs.n	800498c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x5ce>
 800497e:	bf00      	nop
 8004980:	40008000 	.word	0x40008000
 8004984:	00f42400 	.word	0x00f42400
 8004988:	08008f60 	.word	0x08008f60
      }
      else
      {
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2201      	movs	r2, #1
 8004996:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2201      	movs	r2, #1
 800499e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3730      	adds	r7, #48	; 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aba:	d10a      	bne.n	8004ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b10:	f7fb fd7c 	bl	800060c <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d10e      	bne.n	8004b42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f82f 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e025      	b.n	8004b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d10e      	bne.n	8004b6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f819 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e00f      	b.n	8004b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b09c      	sub	sp, #112	; 0x70
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	e0a9      	b.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	f000 80a5 	beq.w	8004cfc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fb fd2b 	bl	800060c <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d140      	bne.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e6      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	663b      	str	r3, [r7, #96]	; 0x60
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e069      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d051      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d149      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc4:	623a      	str	r2, [r7, #32]
 8004cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e010      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	f43f af46 	beq.w	8004ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3770      	adds	r7, #112	; 0x70
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e027      	b.n	8004d8c <HAL_UARTEx_DisableFifoMode+0x66>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	; 0x24
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e02d      	b.n	8004e0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f84f 	bl	8004e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e02d      	b.n	8004e88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	; 0x24
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f811 	bl	8004e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d108      	bne.n	8004eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004eb0:	e031      	b.n	8004f16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	0e5b      	lsrs	r3, r3, #25
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	0f5b      	lsrs	r3, r3, #29
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eda:	7bbb      	ldrb	r3, [r7, #14]
 8004edc:	7b3a      	ldrb	r2, [r7, #12]
 8004ede:	4911      	ldr	r1, [pc, #68]	; (8004f24 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee0:	5c8a      	ldrb	r2, [r1, r2]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ee6:	7b3a      	ldrb	r2, [r7, #12]
 8004ee8:	490f      	ldr	r1, [pc, #60]	; (8004f28 <UARTEx_SetNbDataToProcess+0x98>)
 8004eea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	7b7a      	ldrb	r2, [r7, #13]
 8004efc:	4909      	ldr	r1, [pc, #36]	; (8004f24 <UARTEx_SetNbDataToProcess+0x94>)
 8004efe:	5c8a      	ldrb	r2, [r1, r2]
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f04:	7b7a      	ldrb	r2, [r7, #13]
 8004f06:	4908      	ldr	r1, [pc, #32]	; (8004f28 <UARTEx_SetNbDataToProcess+0x98>)
 8004f08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	08008f78 	.word	0x08008f78
 8004f28:	08008f80 	.word	0x08008f80

08004f2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f3e:	2b84      	cmp	r3, #132	; 0x84
 8004f40:	d005      	beq.n	8004f4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3303      	adds	r3, #3
 8004f4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f60:	f000 fade 	bl	8005520 <vTaskStartScheduler>
  
  return osOK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6c:	b089      	sub	sp, #36	; 0x24
 8004f6e:	af04      	add	r7, sp, #16
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <osThreadCreate+0x54>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01c      	beq.n	8004fbe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685c      	ldr	r4, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681d      	ldr	r5, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691e      	ldr	r6, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ffc8 	bl	8004f2c <makeFreeRtosPriority>
 8004f9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa6:	9202      	str	r2, [sp, #8]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	9100      	str	r1, [sp, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f8ed 	bl	8005192 <xTaskCreateStatic>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e01c      	b.n	8004ff8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685c      	ldr	r4, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fca:	b29e      	uxth	r6, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ffaa 	bl	8004f2c <makeFreeRtosPriority>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f107 030c 	add.w	r3, r7, #12
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	9200      	str	r2, [sp, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 f92f 	bl	800524c <xTaskCreate>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005002 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <osDelay+0x16>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	e000      	b.n	800501a <osDelay+0x18>
 8005018:	2301      	movs	r3, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fa4c 	bl	80054b8 <vTaskDelay>
  
  return osOK;
 8005020:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f103 0208 	add.w	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f103 0208 	add.w	r2, r3, #8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d103      	bne.n	80050ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e00c      	b.n	8005106 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3308      	adds	r3, #8
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e002      	b.n	80050fa <vListInsert+0x2e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d2f6      	bcs.n	80050f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6852      	ldr	r2, [r2, #4]
 800515e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d103      	bne.n	8005172 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005192:	b580      	push	{r7, lr}
 8005194:	b08e      	sub	sp, #56	; 0x38
 8005196:	af04      	add	r7, sp, #16
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d8:	2354      	movs	r3, #84	; 0x54
 80051da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b54      	cmp	r3, #84	; 0x54
 80051e0:	d00a      	beq.n	80051f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61bb      	str	r3, [r7, #24]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <xTaskCreateStatic+0xac>
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01b      	beq.n	800523e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005218:	2300      	movs	r3, #0
 800521a:	9303      	str	r3, [sp, #12]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	9302      	str	r3, [sp, #8]
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f850 	bl	80052d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005238:	f000 f8d4 	bl	80053e4 <prvAddNewTaskToReadyList>
 800523c:	e001      	b.n	8005242 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005242:	697b      	ldr	r3, [r7, #20]
	}
 8005244:	4618      	mov	r0, r3
 8005246:	3728      	adds	r7, #40	; 0x28
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	; 0x30
 8005250:	af04      	add	r7, sp, #16
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fec9 	bl	8005ff8 <pvPortMalloc>
 8005266:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00e      	beq.n	800528c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800526e:	2054      	movs	r0, #84	; 0x54
 8005270:	f000 fec2 	bl	8005ff8 <pvPortMalloc>
 8005274:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
 8005282:	e005      	b.n	8005290 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005284:	6978      	ldr	r0, [r7, #20]
 8005286:	f000 ff83 	bl	8006190 <vPortFree>
 800528a:	e001      	b.n	8005290 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	2300      	movs	r3, #0
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9302      	str	r3, [sp, #8]
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f80e 	bl	80052d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ba:	69f8      	ldr	r0, [r7, #28]
 80052bc:	f000 f892 	bl	80053e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052c0:	2301      	movs	r3, #1
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e002      	b.n	80052cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052cc:	69bb      	ldr	r3, [r7, #24]
	}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052ee:	3b01      	subs	r3, #1
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f023 0307 	bic.w	r3, r3, #7
 80052fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <prvInitialiseNewTask+0x48>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	617b      	str	r3, [r7, #20]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01f      	beq.n	8005364 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e012      	b.n	8005350 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	7819      	ldrb	r1, [r3, #0]
 8005332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	3334      	adds	r3, #52	; 0x34
 800533a:	460a      	mov	r2, r1
 800533c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3301      	adds	r3, #1
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d9e9      	bls.n	800532a <prvInitialiseNewTask+0x54>
 8005356:	e000      	b.n	800535a <prvInitialiseNewTask+0x84>
			{
				break;
 8005358:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005362:	e003      	b.n	800536c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	2b06      	cmp	r3, #6
 8005370:	d901      	bls.n	8005376 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005372:	2306      	movs	r3, #6
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2200      	movs	r2, #0
 8005386:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	3304      	adds	r3, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fe6c 	bl	800506a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	3318      	adds	r3, #24
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fe67 	bl	800506a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	f1c3 0207 	rsb	r2, r3, #7
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	69b8      	ldr	r0, [r7, #24]
 80053c6:	f000 fc05 	bl	8005bd4 <pxPortInitialiseStack>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053dc:	bf00      	nop
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053ec:	f000 fd22 	bl	8005e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <prvAddNewTaskToReadyList+0xb8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	4a29      	ldr	r2, [pc, #164]	; (800549c <prvAddNewTaskToReadyList+0xb8>)
 80053f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053fa:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <prvAddNewTaskToReadyList+0xbc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <prvAddNewTaskToReadyList+0xbc>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005408:	4b24      	ldr	r3, [pc, #144]	; (800549c <prvAddNewTaskToReadyList+0xb8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d110      	bne.n	8005432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005410:	f000 fabc 	bl	800598c <prvInitialiseTaskLists>
 8005414:	e00d      	b.n	8005432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005416:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <prvAddNewTaskToReadyList+0xc0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800541e:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <prvAddNewTaskToReadyList+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d802      	bhi.n	8005432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <prvAddNewTaskToReadyList+0xbc>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005432:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <prvAddNewTaskToReadyList+0xc4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <prvAddNewTaskToReadyList+0xc4>)
 800543a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <prvAddNewTaskToReadyList+0xc8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <prvAddNewTaskToReadyList+0xc8>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <prvAddNewTaskToReadyList+0xcc>)
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7ff fe0d 	bl	8005084 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800546a:	f000 fd13 	bl	8005e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <prvAddNewTaskToReadyList+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <prvAddNewTaskToReadyList+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	429a      	cmp	r2, r3
 8005482:	d207      	bcs.n	8005494 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <prvAddNewTaskToReadyList+0xd0>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	200001b8 	.word	0x200001b8
 80054a0:	200000b8 	.word	0x200000b8
 80054a4:	200001c4 	.word	0x200001c4
 80054a8:	200001d4 	.word	0x200001d4
 80054ac:	200001c0 	.word	0x200001c0
 80054b0:	200000bc 	.word	0x200000bc
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <vTaskDelay+0x60>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <vTaskDelay+0x30>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054e8:	f000 f87a 	bl	80055e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ec:	2100      	movs	r1, #0
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fb0a 	bl	8005b08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054f4:	f000 f882 	bl	80055fc <xTaskResumeAll>
 80054f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <vTaskDelay+0x64>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200001e0 	.word	0x200001e0
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800552e:	463a      	mov	r2, r7
 8005530:	1d39      	adds	r1, r7, #4
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	4618      	mov	r0, r3
 8005538:	f000 ff48 	bl	80063cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	9202      	str	r2, [sp, #8]
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	2300      	movs	r3, #0
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2300      	movs	r3, #0
 800554c:	460a      	mov	r2, r1
 800554e:	491e      	ldr	r1, [pc, #120]	; (80055c8 <vTaskStartScheduler+0xa8>)
 8005550:	481e      	ldr	r0, [pc, #120]	; (80055cc <vTaskStartScheduler+0xac>)
 8005552:	f7ff fe1e 	bl	8005192 <xTaskCreateStatic>
 8005556:	4603      	mov	r3, r0
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <vTaskStartScheduler+0xb0>)
 800555a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800555c:	4b1c      	ldr	r3, [pc, #112]	; (80055d0 <vTaskStartScheduler+0xb0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e001      	b.n	800556e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d116      	bne.n	80055a2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	613b      	str	r3, [r7, #16]
}
 8005586:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <vTaskStartScheduler+0xb4>)
 800558a:	f04f 32ff 	mov.w	r2, #4294967295
 800558e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <vTaskStartScheduler+0xb8>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <vTaskStartScheduler+0xbc>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800559c:	f000 fba8 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055a0:	e00e      	b.n	80055c0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d10a      	bne.n	80055c0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	60fb      	str	r3, [r7, #12]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <vTaskStartScheduler+0x9e>
}
 80055c0:	bf00      	nop
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	08008dd4 	.word	0x08008dd4
 80055cc:	0800595d 	.word	0x0800595d
 80055d0:	200001dc 	.word	0x200001dc
 80055d4:	200001d8 	.word	0x200001d8
 80055d8:	200001c4 	.word	0x200001c4
 80055dc:	200001bc 	.word	0x200001bc

080055e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <vTaskSuspendAll+0x18>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <vTaskSuspendAll+0x18>)
 80055ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	200001e0 	.word	0x200001e0

080055fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <xTaskResumeAll+0x114>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xTaskResumeAll+0x2c>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	603b      	str	r3, [r7, #0]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005628:	f000 fc04 	bl	8005e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800562c:	4b38      	ldr	r3, [pc, #224]	; (8005710 <xTaskResumeAll+0x114>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	4a37      	ldr	r2, [pc, #220]	; (8005710 <xTaskResumeAll+0x114>)
 8005634:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005636:	4b36      	ldr	r3, [pc, #216]	; (8005710 <xTaskResumeAll+0x114>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d161      	bne.n	8005702 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800563e:	4b35      	ldr	r3, [pc, #212]	; (8005714 <xTaskResumeAll+0x118>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d05d      	beq.n	8005702 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005646:	e02e      	b.n	80056a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	4b33      	ldr	r3, [pc, #204]	; (8005718 <xTaskResumeAll+0x11c>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3318      	adds	r3, #24
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fd72 	bl	800513e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fd6d 	bl	800513e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	2201      	movs	r2, #1
 800566a:	409a      	lsls	r2, r3
 800566c:	4b2b      	ldr	r3, [pc, #172]	; (800571c <xTaskResumeAll+0x120>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4313      	orrs	r3, r2
 8005672:	4a2a      	ldr	r2, [pc, #168]	; (800571c <xTaskResumeAll+0x120>)
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <xTaskResumeAll+0x124>)
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7ff fcf9 	bl	8005084 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	4b23      	ldr	r3, [pc, #140]	; (8005724 <xTaskResumeAll+0x128>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <xTaskResumeAll+0x12c>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <xTaskResumeAll+0x11c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1cc      	bne.n	8005648 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056b4:	f000 fa08 	bl	8005ac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056b8:	4b1c      	ldr	r3, [pc, #112]	; (800572c <xTaskResumeAll+0x130>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056c4:	f000 f836 	bl	8005734 <xTaskIncrementTick>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <xTaskResumeAll+0x12c>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f1      	bne.n	80056c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <xTaskResumeAll+0x130>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <xTaskResumeAll+0x12c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <xTaskResumeAll+0x134>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005702:	f000 fbc7 	bl	8005e94 <vPortExitCritical>

	return xAlreadyYielded;
 8005706:	68bb      	ldr	r3, [r7, #8]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200001e0 	.word	0x200001e0
 8005714:	200001b8 	.word	0x200001b8
 8005718:	20000178 	.word	0x20000178
 800571c:	200001c0 	.word	0x200001c0
 8005720:	200000bc 	.word	0x200000bc
 8005724:	200000b8 	.word	0x200000b8
 8005728:	200001cc 	.word	0x200001cc
 800572c:	200001c8 	.word	0x200001c8
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573e:	4b4e      	ldr	r3, [pc, #312]	; (8005878 <xTaskIncrementTick+0x144>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 808e 	bne.w	8005864 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005748:	4b4c      	ldr	r3, [pc, #304]	; (800587c <xTaskIncrementTick+0x148>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005750:	4a4a      	ldr	r2, [pc, #296]	; (800587c <xTaskIncrementTick+0x148>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d120      	bne.n	800579e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800575c:	4b48      	ldr	r3, [pc, #288]	; (8005880 <xTaskIncrementTick+0x14c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <xTaskIncrementTick+0x48>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
}
 8005778:	bf00      	nop
 800577a:	e7fe      	b.n	800577a <xTaskIncrementTick+0x46>
 800577c:	4b40      	ldr	r3, [pc, #256]	; (8005880 <xTaskIncrementTick+0x14c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	4b40      	ldr	r3, [pc, #256]	; (8005884 <xTaskIncrementTick+0x150>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a3e      	ldr	r2, [pc, #248]	; (8005880 <xTaskIncrementTick+0x14c>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4a3e      	ldr	r2, [pc, #248]	; (8005884 <xTaskIncrementTick+0x150>)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <xTaskIncrementTick+0x154>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <xTaskIncrementTick+0x154>)
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	f000 f995 	bl	8005ac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579e:	4b3b      	ldr	r3, [pc, #236]	; (800588c <xTaskIncrementTick+0x158>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d348      	bcc.n	800583a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <xTaskIncrementTick+0x14c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <xTaskIncrementTick+0x158>)
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	601a      	str	r2, [r3, #0]
					break;
 80057ba:	e03e      	b.n	800583a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057bc:	4b30      	ldr	r3, [pc, #192]	; (8005880 <xTaskIncrementTick+0x14c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d203      	bcs.n	80057dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d4:	4a2d      	ldr	r2, [pc, #180]	; (800588c <xTaskIncrementTick+0x158>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057da:	e02e      	b.n	800583a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	3304      	adds	r3, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fcac 	bl	800513e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fca3 	bl	800513e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	2201      	movs	r2, #1
 80057fe:	409a      	lsls	r2, r3
 8005800:	4b23      	ldr	r3, [pc, #140]	; (8005890 <xTaskIncrementTick+0x15c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4313      	orrs	r3, r2
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <xTaskIncrementTick+0x15c>)
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <xTaskIncrementTick+0x160>)
 8005818:	441a      	add	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7ff fc2f 	bl	8005084 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <xTaskIncrementTick+0x164>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	429a      	cmp	r2, r3
 8005832:	d3b9      	bcc.n	80057a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005838:	e7b6      	b.n	80057a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800583a:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskIncrementTick+0x164>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	4914      	ldr	r1, [pc, #80]	; (8005894 <xTaskIncrementTick+0x160>)
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d901      	bls.n	8005856 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005856:	4b11      	ldr	r3, [pc, #68]	; (800589c <xTaskIncrementTick+0x168>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e004      	b.n	800586e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005864:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <xTaskIncrementTick+0x16c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <xTaskIncrementTick+0x16c>)
 800586c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800586e:	697b      	ldr	r3, [r7, #20]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	200001e0 	.word	0x200001e0
 800587c:	200001bc 	.word	0x200001bc
 8005880:	20000170 	.word	0x20000170
 8005884:	20000174 	.word	0x20000174
 8005888:	200001d0 	.word	0x200001d0
 800588c:	200001d8 	.word	0x200001d8
 8005890:	200001c0 	.word	0x200001c0
 8005894:	200000bc 	.word	0x200000bc
 8005898:	200000b8 	.word	0x200000b8
 800589c:	200001cc 	.word	0x200001cc
 80058a0:	200001c8 	.word	0x200001c8

080058a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <vTaskSwitchContext+0xa4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <vTaskSwitchContext+0xa8>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b8:	e03f      	b.n	800593a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <vTaskSwitchContext+0xa8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b23      	ldr	r3, [pc, #140]	; (8005950 <vTaskSwitchContext+0xac>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	fab3 f383 	clz	r3, r3
 80058cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	f1c3 031f 	rsb	r3, r3, #31
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	491f      	ldr	r1, [pc, #124]	; (8005954 <vTaskSwitchContext+0xb0>)
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <vTaskSwitchContext+0x5c>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	607b      	str	r3, [r7, #4]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vTaskSwitchContext+0x5a>
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4a12      	ldr	r2, [pc, #72]	; (8005954 <vTaskSwitchContext+0xb0>)
 800590c:	4413      	add	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3308      	adds	r3, #8
 8005922:	429a      	cmp	r2, r3
 8005924:	d104      	bne.n	8005930 <vTaskSwitchContext+0x8c>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	4a08      	ldr	r2, [pc, #32]	; (8005958 <vTaskSwitchContext+0xb4>)
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	200001e0 	.word	0x200001e0
 800594c:	200001cc 	.word	0x200001cc
 8005950:	200001c0 	.word	0x200001c0
 8005954:	200000bc 	.word	0x200000bc
 8005958:	200000b8 	.word	0x200000b8

0800595c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005964:	f000 f852 	bl	8005a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <prvIdleTask+0x28>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d9f9      	bls.n	8005964 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <prvIdleTask+0x2c>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005980:	e7f0      	b.n	8005964 <prvIdleTask+0x8>
 8005982:	bf00      	nop
 8005984:	200000bc 	.word	0x200000bc
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005992:	2300      	movs	r3, #0
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	e00c      	b.n	80059b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <prvInitialiseTaskLists+0x60>)
 80059a4:	4413      	add	r3, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fb3f 	bl	800502a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3301      	adds	r3, #1
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d9ef      	bls.n	8005998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059b8:	480d      	ldr	r0, [pc, #52]	; (80059f0 <prvInitialiseTaskLists+0x64>)
 80059ba:	f7ff fb36 	bl	800502a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059be:	480d      	ldr	r0, [pc, #52]	; (80059f4 <prvInitialiseTaskLists+0x68>)
 80059c0:	f7ff fb33 	bl	800502a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059c4:	480c      	ldr	r0, [pc, #48]	; (80059f8 <prvInitialiseTaskLists+0x6c>)
 80059c6:	f7ff fb30 	bl	800502a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ca:	480c      	ldr	r0, [pc, #48]	; (80059fc <prvInitialiseTaskLists+0x70>)
 80059cc:	f7ff fb2d 	bl	800502a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059d0:	480b      	ldr	r0, [pc, #44]	; (8005a00 <prvInitialiseTaskLists+0x74>)
 80059d2:	f7ff fb2a 	bl	800502a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <prvInitialiseTaskLists+0x78>)
 80059d8:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <prvInitialiseTaskLists+0x64>)
 80059da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <prvInitialiseTaskLists+0x7c>)
 80059de:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <prvInitialiseTaskLists+0x68>)
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200000bc 	.word	0x200000bc
 80059f0:	20000148 	.word	0x20000148
 80059f4:	2000015c 	.word	0x2000015c
 80059f8:	20000178 	.word	0x20000178
 80059fc:	2000018c 	.word	0x2000018c
 8005a00:	200001a4 	.word	0x200001a4
 8005a04:	20000170 	.word	0x20000170
 8005a08:	20000174 	.word	0x20000174

08005a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a12:	e019      	b.n	8005a48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a14:	f000 fa0e 	bl	8005e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <prvCheckTasksWaitingTermination+0x50>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fb8a 	bl	800513e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <prvCheckTasksWaitingTermination+0x54>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <prvCheckTasksWaitingTermination+0x54>)
 8005a32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <prvCheckTasksWaitingTermination+0x58>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <prvCheckTasksWaitingTermination+0x58>)
 8005a3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a3e:	f000 fa29 	bl	8005e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f810 	bl	8005a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <prvCheckTasksWaitingTermination+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e1      	bne.n	8005a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2000018c 	.word	0x2000018c
 8005a60:	200001b8 	.word	0x200001b8
 8005a64:	200001a0 	.word	0x200001a0

08005a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fb86 	bl	8006190 <vPortFree>
				vPortFree( pxTCB );
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fb83 	bl	8006190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a8a:	e018      	b.n	8005abe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d103      	bne.n	8005a9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb7a 	bl	8006190 <vPortFree>
	}
 8005a9c:	e00f      	b.n	8005abe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d00a      	beq.n	8005abe <prvDeleteTCB+0x56>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <prvDeleteTCB+0x54>
	}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <prvResetNextTaskUnblockTime+0x38>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <prvResetNextTaskUnblockTime+0x3c>)
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295
 8005ade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ae0:	e008      	b.n	8005af4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <prvResetNextTaskUnblockTime+0x38>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <prvResetNextTaskUnblockTime+0x3c>)
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000170 	.word	0x20000170
 8005b04:	200001d8 	.word	0x200001d8

08005b08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fb0d 	bl	800513e <uxListRemove>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	2201      	movs	r2, #1
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43da      	mvns	r2, r3
 8005b38:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d10a      	bne.n	8005b60 <prvAddCurrentTaskToDelayedList+0x58>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	481a      	ldr	r0, [pc, #104]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b5a:	f7ff fa93 	bl	8005084 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b5e:	e026      	b.n	8005bae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b68:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d209      	bcs.n	8005b8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7ff faa1 	bl	80050cc <vListInsert>
}
 8005b8a:	e010      	b.n	8005bae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7ff fa97 	bl	80050cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d202      	bcs.n	8005bae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6013      	str	r3, [r2, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200001bc 	.word	0x200001bc
 8005bbc:	200000b8 	.word	0x200000b8
 8005bc0:	200001c0 	.word	0x200001c0
 8005bc4:	200001a4 	.word	0x200001a4
 8005bc8:	20000174 	.word	0x20000174
 8005bcc:	20000170 	.word	0x20000170
 8005bd0:	200001d8 	.word	0x200001d8

08005bd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3b04      	subs	r3, #4
 8005be4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3b04      	subs	r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b04      	subs	r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c04:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <pxPortInitialiseStack+0x64>)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b14      	subs	r3, #20
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f06f 0202 	mvn.w	r2, #2
 8005c22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3b20      	subs	r3, #32
 8005c28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	08005c3d 	.word	0x08005c3d

08005c3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c46:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <prvTaskExitError+0x54>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d00a      	beq.n	8005c66 <prvTaskExitError+0x2a>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <prvTaskExitError+0x28>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60bb      	str	r3, [r7, #8]
}
 8005c78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c7a:	bf00      	nop
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0fc      	beq.n	8005c7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000008 	.word	0x20000008
	...

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	200000b8 	.word	0x200000b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <xPortStartScheduler+0x120>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <xPortStartScheduler+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10a      	bne.n	8005d16 <xPortStartScheduler+0x26>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d16:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <xPortStartScheduler+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	; (8005e18 <xPortStartScheduler+0x128>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10a      	bne.n	8005d36 <xPortStartScheduler+0x46>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60fb      	str	r3, [r7, #12]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d36:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	22ff      	movs	r2, #255	; 0xff
 8005d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <xPortStartScheduler+0x130>)
 8005d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d64:	e009      	b.n	8005d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d0ef      	beq.n	8005d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00a      	beq.n	8005da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <xPortStartScheduler+0x134>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dba:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <xPortStartScheduler+0x134>)
 8005dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dde:	f000 f8dd 	bl	8005f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <xPortStartScheduler+0x13c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005de8:	f000 f8fc 	bl	8005fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xPortStartScheduler+0x140>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <xPortStartScheduler+0x140>)
 8005df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005df8:	f7ff ff66 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dfc:	f7ff fd52 	bl	80058a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005e00:	f7ff ff1c 	bl	8005c3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	e000ed00 	.word	0xe000ed00
 8005e14:	410fc271 	.word	0x410fc271
 8005e18:	410fc270 	.word	0x410fc270
 8005e1c:	e000e400 	.word	0xe000e400
 8005e20:	200001e4 	.word	0x200001e4
 8005e24:	200001e8 	.word	0x200001e8
 8005e28:	e000ed20 	.word	0xe000ed20
 8005e2c:	20000008 	.word	0x20000008
 8005e30:	e000ef34 	.word	0xe000ef34

08005e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10f      	bne.n	8005e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortEnterCritical+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	603b      	str	r3, [r7, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <vPortEnterCritical+0x4a>
	}
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000008 	.word	0x20000008
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vPortExitCritical+0x50>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <vPortExitCritical+0x24>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <vPortExitCritical+0x50>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <vPortExitCritical+0x42>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000008 	.word	0x20000008
	...

08005ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ef0:	f3ef 8009 	mrs	r0, PSP
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <pxCurrentTCBConst>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f01e 0f10 	tst.w	lr, #16
 8005f00:	bf08      	it	eq
 8005f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	6010      	str	r0, [r2, #0]
 8005f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f14:	f380 8811 	msr	BASEPRI, r0
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f7ff fcc0 	bl	80058a4 <vTaskSwitchContext>
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f380 8811 	msr	BASEPRI, r0
 8005f2c:	bc09      	pop	{r0, r3}
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	6808      	ldr	r0, [r1, #0]
 8005f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f36:	f01e 0f10 	tst.w	lr, #16
 8005f3a:	bf08      	it	eq
 8005f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f40:	f380 8809 	msr	PSP, r0
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst>:
 8005f50:	200000b8 	.word	0x200000b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f72:	f7ff fbdf 	bl	8005734 <xTaskIncrementTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <SysTick_Handler+0x40>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <vPortSetupTimerInterrupt+0x38>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <vPortSetupTimerInterrupt+0x3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <vPortSetupTimerInterrupt+0x40>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <vPortSetupTimerInterrupt+0x44>)
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fbe:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	601a      	str	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e010 	.word	0xe000e010
 8005fd4:	e000e018 	.word	0xe000e018
 8005fd8:	2000000c 	.word	0x2000000c
 8005fdc:	10624dd3 	.word	0x10624dd3
 8005fe0:	e000e014 	.word	0xe000e014

08005fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ff4 <vPortEnableVFP+0x10>
 8005fe8:	6801      	ldr	r1, [r0, #0]
 8005fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fee:	6001      	str	r1, [r0, #0]
 8005ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed88 	.word	0xe000ed88

08005ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006004:	f7ff faec 	bl	80055e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006008:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <pvPortMalloc+0x180>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006010:	f000 f920 	bl	8006254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006014:	4b59      	ldr	r3, [pc, #356]	; (800617c <pvPortMalloc+0x184>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 8093 	bne.w	8006148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01d      	beq.n	8006064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006028:	2208      	movs	r2, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d014      	beq.n	8006064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f023 0307 	bic.w	r3, r3, #7
 8006040:	3308      	adds	r3, #8
 8006042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <pvPortMalloc+0x6c>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	617b      	str	r3, [r7, #20]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d06e      	beq.n	8006148 <pvPortMalloc+0x150>
 800606a:	4b45      	ldr	r3, [pc, #276]	; (8006180 <pvPortMalloc+0x188>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d869      	bhi.n	8006148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006074:	4b43      	ldr	r3, [pc, #268]	; (8006184 <pvPortMalloc+0x18c>)
 8006076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006078:	4b42      	ldr	r3, [pc, #264]	; (8006184 <pvPortMalloc+0x18c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607e:	e004      	b.n	800608a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <pvPortMalloc+0xa4>
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800609c:	4b36      	ldr	r3, [pc, #216]	; (8006178 <pvPortMalloc+0x180>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d050      	beq.n	8006148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	4413      	add	r3, r2
 80060ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d91f      	bls.n	8006108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <pvPortMalloc+0xf8>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	613b      	str	r3, [r7, #16]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1ad2      	subs	r2, r2, r3
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006102:	69b8      	ldr	r0, [r7, #24]
 8006104:	f000 f908 	bl	8006318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <pvPortMalloc+0x188>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <pvPortMalloc+0x188>)
 8006114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <pvPortMalloc+0x188>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <pvPortMalloc+0x190>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d203      	bcs.n	800612a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <pvPortMalloc+0x188>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <pvPortMalloc+0x190>)
 8006128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <pvPortMalloc+0x184>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	431a      	orrs	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <pvPortMalloc+0x194>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <pvPortMalloc+0x194>)
 8006146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006148:	f7ff fa58 	bl	80055fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <pvPortMalloc+0x174>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <pvPortMalloc+0x172>
	return pvReturn;
 800616c:	69fb      	ldr	r3, [r7, #28]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3728      	adds	r7, #40	; 0x28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000dac 	.word	0x20000dac
 800617c:	20000dc0 	.word	0x20000dc0
 8006180:	20000db0 	.word	0x20000db0
 8006184:	20000da4 	.word	0x20000da4
 8006188:	20000db4 	.word	0x20000db4
 800618c:	20000db8 	.word	0x20000db8

08006190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04d      	beq.n	800623e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061a2:	2308      	movs	r3, #8
 80061a4:	425b      	negs	r3, r3
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <vPortFree+0xb8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <vPortFree+0x44>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60fb      	str	r3, [r7, #12]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <vPortFree+0x62>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60bb      	str	r3, [r7, #8]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <vPortFree+0xb8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <vPortFree+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006218:	f7ff f9e2 	bl	80055e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <vPortFree+0xbc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4413      	add	r3, r2
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <vPortFree+0xbc>)
 8006228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f000 f874 	bl	8006318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <vPortFree+0xc0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a06      	ldr	r2, [pc, #24]	; (8006250 <vPortFree+0xc0>)
 8006238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800623a:	f7ff f9df 	bl	80055fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000dc0 	.word	0x20000dc0
 800624c:	20000db0 	.word	0x20000db0
 8006250:	20000dbc 	.word	0x20000dbc

08006254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800625e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006260:	4b27      	ldr	r3, [pc, #156]	; (8006300 <prvHeapInit+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <prvHeapInit+0xac>)
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800628c:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <prvHeapInit+0xb0>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <prvHeapInit+0xb0>)
 8006294:	2200      	movs	r2, #0
 8006296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a0:	2208      	movs	r2, #8
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a15      	ldr	r2, [pc, #84]	; (8006308 <prvHeapInit+0xb4>)
 80062b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <prvHeapInit+0xb4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <prvHeapInit+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <prvHeapInit+0xb4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4a0a      	ldr	r2, [pc, #40]	; (800630c <prvHeapInit+0xb8>)
 80062e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <prvHeapInit+0xbc>)
 80062ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <prvHeapInit+0xc0>)
 80062ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200001ec 	.word	0x200001ec
 8006304:	20000da4 	.word	0x20000da4
 8006308:	20000dac 	.word	0x20000dac
 800630c:	20000db4 	.word	0x20000db4
 8006310:	20000db0 	.word	0x20000db0
 8006314:	20000dc0 	.word	0x20000dc0

08006318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006320:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <prvInsertBlockIntoFreeList+0xac>)
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e002      	b.n	800632c <prvInsertBlockIntoFreeList+0x14>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d8f7      	bhi.n	8006326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d108      	bne.n	800635a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	441a      	add	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d118      	bne.n	80063a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d00d      	beq.n	8006396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e008      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e003      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d002      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000da4 	.word	0x20000da4
 80063c8:	20000dac 	.word	0x20000dac

080063cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80063dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4a06      	ldr	r2, [pc, #24]	; (80063fc <vApplicationGetIdleTaskMemory+0x30>)
 80063e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2280      	movs	r2, #128	; 0x80
 80063e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000dc4 	.word	0x20000dc4
 80063fc:	20000e18 	.word	0x20000e18

08006400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006400:	b5b0      	push	{r4, r5, r7, lr}
 8006402:	b09c      	sub	sp, #112	; 0x70
 8006404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006406:	f7fa f8d5 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800640a:	f000 f86b 	bl	80064e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800640e:	f000 fa61 	bl	80068d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006412:	f000 fa2d 	bl	8006870 <MX_DMA_Init>
  MX_DAC1_Init();
 8006416:	f000 f8b7 	bl	8006588 <MX_DAC1_Init>
  MX_TIM2_Init();
 800641a:	f000 f98f 	bl	800673c <MX_TIM2_Init>
  MX_I2C2_Init();
 800641e:	f000 f94d 	bl	80066bc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8006422:	f000 f9d9 	bl	80067d8 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8006426:	f000 f8e3 	bl	80065f0 <MX_DFSDM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, StartButtonTask, osPriorityNormal, 0, 128);
 800642a:	4b26      	ldr	r3, [pc, #152]	; (80064c4 <main+0xc4>)
 800642c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8006430:	461d      	mov	r5, r3
 8006432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800643a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 800643e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fd90 	bl	8004f6a <osThreadCreate>
 800644a:	4603      	mov	r3, r0
 800644c:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <main+0xc8>)
 800644e:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask */
  osThreadDef(transmitTask, StartTransmitTask, osPriorityNormal, 0, 128);
 8006450:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <main+0xcc>)
 8006452:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8006456:	461d      	mov	r5, r3
 8006458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800645a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800645c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTaskHandle = osThreadCreate(osThread(transmitTask), NULL);
 8006464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fd7d 	bl	8004f6a <osThreadCreate>
 8006470:	4603      	mov	r3, r0
 8006472:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <main+0xd0>)
 8006474:	6013      	str	r3, [r2, #0]

  /* definition and creation of readTask */
  osThreadDef(readTask, StartReadTask, osPriorityNormal, 0, 128);
 8006476:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <main+0xd4>)
 8006478:	f107 041c 	add.w	r4, r7, #28
 800647c:	461d      	mov	r5, r3
 800647e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006482:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTaskHandle = osThreadCreate(osThread(readTask), NULL);
 800648a:	f107 031c 	add.w	r3, r7, #28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fd6a 	bl	8004f6a <osThreadCreate>
 8006496:	4603      	mov	r3, r0
 8006498:	4a0f      	ldr	r2, [pc, #60]	; (80064d8 <main+0xd8>)
 800649a:	6013      	str	r3, [r2, #0]

  /* definition and creation of killTask */
  osThreadDef(killTask, StartKillTask, osPriorityNormal, 0, 128);
 800649c:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <main+0xdc>)
 800649e:	463c      	mov	r4, r7
 80064a0:	461d      	mov	r5, r3
 80064a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  killTaskHandle = osThreadCreate(osThread(killTask), NULL);
 80064ae:	463b      	mov	r3, r7
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fd59 	bl	8004f6a <osThreadCreate>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <main+0xe0>)
 80064bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80064be:	f7fe fd4d 	bl	8004f5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80064c2:	e7fe      	b.n	80064c2 <main+0xc2>
 80064c4:	08008e10 	.word	0x08008e10
 80064c8:	200012a8 	.word	0x200012a8
 80064cc:	08008e2c 	.word	0x08008e2c
 80064d0:	200012ac 	.word	0x200012ac
 80064d4:	08008e48 	.word	0x08008e48
 80064d8:	200012b0 	.word	0x200012b0
 80064dc:	08008e64 	.word	0x08008e64
 80064e0:	200012b4 	.word	0x200012b4

080064e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b096      	sub	sp, #88	; 0x58
 80064e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	2244      	movs	r2, #68	; 0x44
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fa54 	bl	80079a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064f8:	463b      	mov	r3, r7
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800650a:	f7fb fcfb 	bl	8001f04 <HAL_PWREx_ControlVoltageScaling>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006514:	f000 fda6 	bl	8007064 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006518:	2310      	movs	r3, #16
 800651a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800651c:	2301      	movs	r3, #1
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006524:	2360      	movs	r3, #96	; 0x60
 8006526:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006528:	2302      	movs	r3, #2
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800652c:	2301      	movs	r3, #1
 800652e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006534:	2328      	movs	r3, #40	; 0x28
 8006536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006538:	2302      	movs	r3, #2
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800653c:	2302      	movs	r3, #2
 800653e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006540:	2302      	movs	r3, #2
 8006542:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4618      	mov	r0, r3
 800654a:	f7fb fd7f 	bl	800204c <HAL_RCC_OscConfig>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006554:	f000 fd86 	bl	8007064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006558:	230f      	movs	r3, #15
 800655a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800655c:	2303      	movs	r3, #3
 800655e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006560:	2300      	movs	r3, #0
 8006562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800656c:	463b      	mov	r3, r7
 800656e:	2103      	movs	r1, #3
 8006570:	4618      	mov	r0, r3
 8006572:	f7fc f985 	bl	8002880 <HAL_RCC_ClockConfig>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800657c:	f000 fd72 	bl	8007064 <Error_Handler>
  }
}
 8006580:	bf00      	nop
 8006582:	3758      	adds	r7, #88	; 0x58
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800658e:	463b      	mov	r3, r7
 8006590:	2228      	movs	r2, #40	; 0x28
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fa03 	bl	80079a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <MX_DAC1_Init+0x60>)
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <MX_DAC1_Init+0x64>)
 800659e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80065a0:	4811      	ldr	r0, [pc, #68]	; (80065e8 <MX_DAC1_Init+0x60>)
 80065a2:	f7fa f945 	bl	8000830 <HAL_DAC_Init>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80065ac:	f000 fd5a 	bl	8007064 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80065b4:	230a      	movs	r3, #10
 80065b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80065b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065bc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80065ca:	463b      	mov	r3, r7
 80065cc:	2200      	movs	r2, #0
 80065ce:	4619      	mov	r1, r3
 80065d0:	4805      	ldr	r0, [pc, #20]	; (80065e8 <MX_DAC1_Init+0x60>)
 80065d2:	f7fa f9b3 	bl	800093c <HAL_DAC_ConfigChannel>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80065dc:	f000 fd42 	bl	8007064 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80065e0:	bf00      	nop
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20001018 	.word	0x20001018
 80065ec:	40007400 	.word	0x40007400

080065f0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80065f4:	4b2c      	ldr	r3, [pc, #176]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 80065f6:	4a2d      	ldr	r2, [pc, #180]	; (80066ac <MX_DFSDM1_Init+0xbc>)
 80065f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80065fa:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8006600:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 8006602:	2201      	movs	r2, #1
 8006604:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 8006608:	2201      	movs	r2, #1
 800660a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800660c:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 800660e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8006612:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 8006616:	22fa      	movs	r2, #250	; 0xfa
 8006618:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800661a:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 800661c:	2201      	movs	r2, #1
 800661e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8006620:	4821      	ldr	r0, [pc, #132]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 8006622:	f7fa fb95 	bl	8000d50 <HAL_DFSDM_FilterInit>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800662c:	f000 fd1a 	bl	8007064 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006632:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <MX_DFSDM1_Init+0xc4>)
 8006634:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006638:	2201      	movs	r2, #1
 800663a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 800663e:	2200      	movs	r2, #0
 8006640:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 8006642:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006644:	2228      	movs	r2, #40	; 0x28
 8006646:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006648:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 800664a:	2200      	movs	r2, #0
 800664c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006650:	2200      	movs	r2, #0
 8006652:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8006654:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 800665c:	2200      	movs	r2, #0
 800665e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006660:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006662:	2204      	movs	r2, #4
 8006664:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006668:	2200      	movs	r2, #0
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 800666e:	2201      	movs	r2, #1
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800667e:	480c      	ldr	r0, [pc, #48]	; (80066b0 <MX_DFSDM1_Init+0xc0>)
 8006680:	f7fa faa6 	bl	8000bd0 <HAL_DFSDM_ChannelInit>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800668a:	f000 fceb 	bl	8007064 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800668e:	2201      	movs	r2, #1
 8006690:	4909      	ldr	r1, [pc, #36]	; (80066b8 <MX_DFSDM1_Init+0xc8>)
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <MX_DFSDM1_Init+0xb8>)
 8006694:	f7fa fc36 	bl	8000f04 <HAL_DFSDM_FilterConfigRegChannel>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800669e:	f000 fce1 	bl	8007064 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	2000108c 	.word	0x2000108c
 80066ac:	40016100 	.word	0x40016100
 80066b0:	200010e0 	.word	0x200010e0
 80066b4:	40016040 	.word	0x40016040
 80066b8:	00020004 	.word	0x00020004

080066bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <MX_I2C2_Init+0x74>)
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <MX_I2C2_Init+0x78>)
 80066c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80066c6:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <MX_I2C2_Init+0x74>)
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <MX_I2C2_Init+0x7c>)
 80066ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80066cc:	4b18      	ldr	r3, [pc, #96]	; (8006730 <MX_I2C2_Init+0x74>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066d2:	4b17      	ldr	r3, [pc, #92]	; (8006730 <MX_I2C2_Init+0x74>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <MX_I2C2_Init+0x74>)
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80066de:	4b14      	ldr	r3, [pc, #80]	; (8006730 <MX_I2C2_Init+0x74>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <MX_I2C2_Init+0x74>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <MX_I2C2_Init+0x74>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <MX_I2C2_Init+0x74>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80066f6:	480e      	ldr	r0, [pc, #56]	; (8006730 <MX_I2C2_Init+0x74>)
 80066f8:	f7fb fabe 	bl	8001c78 <HAL_I2C_Init>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006702:	f000 fcaf 	bl	8007064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006706:	2100      	movs	r1, #0
 8006708:	4809      	ldr	r0, [pc, #36]	; (8006730 <MX_I2C2_Init+0x74>)
 800670a:	f7fb fb44 	bl	8001d96 <HAL_I2CEx_ConfigAnalogFilter>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006714:	f000 fca6 	bl	8007064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006718:	2100      	movs	r1, #0
 800671a:	4805      	ldr	r0, [pc, #20]	; (8006730 <MX_I2C2_Init+0x74>)
 800671c:	f7fb fb86 	bl	8001e2c <HAL_I2CEx_ConfigDigitalFilter>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006726:	f000 fc9d 	bl	8007064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20001178 	.word	0x20001178
 8006734:	40005800 	.word	0x40005800
 8006738:	10909cec 	.word	0x10909cec

0800673c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006742:	f107 0310 	add.w	r3, r7, #16
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006750:	1d3b      	adds	r3, r7, #4
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <MX_TIM2_Init+0x98>)
 800675c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006760:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <MX_TIM2_Init+0x98>)
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006768:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <MX_TIM2_Init+0x98>)
 800676a:	2200      	movs	r2, #0
 800676c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <MX_TIM2_Init+0x98>)
 8006770:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006776:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <MX_TIM2_Init+0x98>)
 8006778:	2200      	movs	r2, #0
 800677a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800677c:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <MX_TIM2_Init+0x98>)
 800677e:	2200      	movs	r2, #0
 8006780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006782:	4814      	ldr	r0, [pc, #80]	; (80067d4 <MX_TIM2_Init+0x98>)
 8006784:	f7fd f884 	bl	8003890 <HAL_TIM_Base_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800678e:	f000 fc69 	bl	8007064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006796:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4619      	mov	r1, r3
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <MX_TIM2_Init+0x98>)
 80067a0:	f7fd fa5d 	bl	8003c5e <HAL_TIM_ConfigClockSource>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80067aa:	f000 fc5b 	bl	8007064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80067ae:	2320      	movs	r3, #32
 80067b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4806      	ldr	r0, [pc, #24]	; (80067d4 <MX_TIM2_Init+0x98>)
 80067bc:	f7fd fc74 	bl	80040a8 <HAL_TIMEx_MasterConfigSynchronization>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80067c6:	f000 fc4d 	bl	8007064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80067ca:	bf00      	nop
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200011cc 	.word	0x200011cc

080067d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067dc:	4b22      	ldr	r3, [pc, #136]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067de:	4a23      	ldr	r2, [pc, #140]	; (800686c <MX_USART1_UART_Init+0x94>)
 80067e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067e2:	4b21      	ldr	r3, [pc, #132]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067ea:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067f6:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <MX_USART1_UART_Init+0x90>)
 80067fe:	220c      	movs	r2, #12
 8006800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <MX_USART1_UART_Init+0x90>)
 800680a:	2200      	movs	r2, #0
 800680c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800680e:	4b16      	ldr	r3, [pc, #88]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006810:	2200      	movs	r2, #0
 8006812:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006816:	2200      	movs	r2, #0
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <MX_USART1_UART_Init+0x90>)
 800681c:	2200      	movs	r2, #0
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006820:	4811      	ldr	r0, [pc, #68]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006822:	f7fd fce7 	bl	80041f4 <HAL_UART_Init>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800682c:	f000 fc1a 	bl	8007064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006830:	2100      	movs	r1, #0
 8006832:	480d      	ldr	r0, [pc, #52]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006834:	f7fe fab0 	bl	8004d98 <HAL_UARTEx_SetTxFifoThreshold>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800683e:	f000 fc11 	bl	8007064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006842:	2100      	movs	r1, #0
 8006844:	4808      	ldr	r0, [pc, #32]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006846:	f7fe fae5 	bl	8004e14 <HAL_UARTEx_SetRxFifoThreshold>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006850:	f000 fc08 	bl	8007064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006854:	4804      	ldr	r0, [pc, #16]	; (8006868 <MX_USART1_UART_Init+0x90>)
 8006856:	f7fe fa66 	bl	8004d26 <HAL_UARTEx_DisableFifoMode>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006860:	f000 fc00 	bl	8007064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006864:	bf00      	nop
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20001218 	.word	0x20001218
 800686c:	40013800 	.word	0x40013800

08006870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <MX_DMA_Init+0x60>)
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <MX_DMA_Init+0x60>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6493      	str	r3, [r2, #72]	; 0x48
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <MX_DMA_Init+0x60>)
 8006884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800688e:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <MX_DMA_Init+0x60>)
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	4a0f      	ldr	r2, [pc, #60]	; (80068d0 <MX_DMA_Init+0x60>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6493      	str	r3, [r2, #72]	; 0x48
 800689a:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <MX_DMA_Init+0x60>)
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2105      	movs	r1, #5
 80068aa:	200b      	movs	r0, #11
 80068ac:	f7f9 ff96 	bl	80007dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80068b0:	200b      	movs	r0, #11
 80068b2:	f7f9 ffaf 	bl	8000814 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2105      	movs	r1, #5
 80068ba:	200c      	movs	r0, #12
 80068bc:	f7f9 ff8e 	bl	80007dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80068c0:	200c      	movs	r0, #12
 80068c2:	f7f9 ffa7 	bl	8000814 <HAL_NVIC_EnableIRQ>

}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40021000 	.word	0x40021000

080068d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068da:	f107 0314 	add.w	r3, r7, #20
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ea:	4b38      	ldr	r3, [pc, #224]	; (80069cc <MX_GPIO_Init+0xf8>)
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	4a37      	ldr	r2, [pc, #220]	; (80069cc <MX_GPIO_Init+0xf8>)
 80068f0:	f043 0304 	orr.w	r3, r3, #4
 80068f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f6:	4b35      	ldr	r3, [pc, #212]	; (80069cc <MX_GPIO_Init+0xf8>)
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006902:	4b32      	ldr	r3, [pc, #200]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006906:	4a31      	ldr	r2, [pc, #196]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800690e:	4b2f      	ldr	r3, [pc, #188]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800691a:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <MX_GPIO_Init+0xf8>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006920:	f043 0310 	orr.w	r3, r3, #16
 8006924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	60bb      	str	r3, [r7, #8]
 8006930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	4a25      	ldr	r2, [pc, #148]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693e:	4b23      	ldr	r3, [pc, #140]	; (80069cc <MX_GPIO_Init+0xf8>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006950:	481f      	ldr	r0, [pc, #124]	; (80069d0 <MX_GPIO_Init+0xfc>)
 8006952:	f7fb f947 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB_Pin */
  GPIO_InitStruct.Pin = PB_Pin;
 8006956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800695a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800695c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	4619      	mov	r1, r3
 800696c:	4819      	ldr	r0, [pc, #100]	; (80069d4 <MX_GPIO_Init+0x100>)
 800696e:	f7fa ffa7 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006980:	2300      	movs	r3, #0
 8006982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006984:	f107 0314 	add.w	r3, r7, #20
 8006988:	4619      	mov	r1, r3
 800698a:	4811      	ldr	r0, [pc, #68]	; (80069d0 <MX_GPIO_Init+0xfc>)
 800698c:	f7fa ff98 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006990:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006996:	2312      	movs	r3, #18
 8006998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800699e:	2303      	movs	r3, #3
 80069a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069a2:	2304      	movs	r3, #4
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069a6:	f107 0314 	add.w	r3, r7, #20
 80069aa:	4619      	mov	r1, r3
 80069ac:	4808      	ldr	r0, [pc, #32]	; (80069d0 <MX_GPIO_Init+0xfc>)
 80069ae:	f7fa ff87 	bl	80018c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80069b2:	2200      	movs	r2, #0
 80069b4:	2105      	movs	r1, #5
 80069b6:	2028      	movs	r0, #40	; 0x28
 80069b8:	f7f9 ff10 	bl	80007dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069bc:	2028      	movs	r0, #40	; 0x28
 80069be:	f7f9 ff29 	bl	8000814 <HAL_NVIC_EnableIRQ>

}
 80069c2:	bf00      	nop
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	48000400 	.word	0x48000400
 80069d4:	48000800 	.word	0x48000800

080069d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	first_half_done = 1;
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200031f8 	.word	0x200031f8

080069f8 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	second_half_done = 1;
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	200031f9 	.word	0x200031f9

08006a18 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	80fb      	strh	r3, [r7, #6]
	puttonPushed = 1;
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <HAL_GPIO_EXTI_Callback+0x1c>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20003210 	.word	0x20003210

08006a38 <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006a40:	2064      	movs	r0, #100	; 0x64
 8006a42:	f7fe fade 	bl	8005002 <osDelay>
    //ITM_Port32(31) = 1;
    if (puttonPushed==1){
 8006a46:	4b1b      	ldr	r3, [pc, #108]	; (8006ab4 <StartButtonTask+0x7c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d1f8      	bne.n	8006a40 <StartButtonTask+0x8>
    	puttonPushed = 0;
 8006a4e:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <StartButtonTask+0x7c>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
    	resetCounter = 1;//this indicates the start of the game
 8006a54:	4b18      	ldr	r3, [pc, #96]	; (8006ab8 <StartButtonTask+0x80>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
    	//initialize 10 rows
        sprintf(row1, "\r*|          |*\n");
 8006a5a:	4918      	ldr	r1, [pc, #96]	; (8006abc <StartButtonTask+0x84>)
 8006a5c:	4818      	ldr	r0, [pc, #96]	; (8006ac0 <StartButtonTask+0x88>)
 8006a5e:	f000 ffe5 	bl	8007a2c <siprintf>
        sprintf(row2, "\r*|          |*\n");
 8006a62:	4916      	ldr	r1, [pc, #88]	; (8006abc <StartButtonTask+0x84>)
 8006a64:	4817      	ldr	r0, [pc, #92]	; (8006ac4 <StartButtonTask+0x8c>)
 8006a66:	f000 ffe1 	bl	8007a2c <siprintf>
        sprintf(row3, "\r*|          |*\n");
 8006a6a:	4914      	ldr	r1, [pc, #80]	; (8006abc <StartButtonTask+0x84>)
 8006a6c:	4816      	ldr	r0, [pc, #88]	; (8006ac8 <StartButtonTask+0x90>)
 8006a6e:	f000 ffdd 	bl	8007a2c <siprintf>
        sprintf(row4, "\r*|          |*\n");
 8006a72:	4912      	ldr	r1, [pc, #72]	; (8006abc <StartButtonTask+0x84>)
 8006a74:	4815      	ldr	r0, [pc, #84]	; (8006acc <StartButtonTask+0x94>)
 8006a76:	f000 ffd9 	bl	8007a2c <siprintf>
        sprintf(row5, "\r*|          |*\n");
 8006a7a:	4910      	ldr	r1, [pc, #64]	; (8006abc <StartButtonTask+0x84>)
 8006a7c:	4814      	ldr	r0, [pc, #80]	; (8006ad0 <StartButtonTask+0x98>)
 8006a7e:	f000 ffd5 	bl	8007a2c <siprintf>
        sprintf(row6, "\r*|          |*\n");
 8006a82:	490e      	ldr	r1, [pc, #56]	; (8006abc <StartButtonTask+0x84>)
 8006a84:	4813      	ldr	r0, [pc, #76]	; (8006ad4 <StartButtonTask+0x9c>)
 8006a86:	f000 ffd1 	bl	8007a2c <siprintf>
        sprintf(row7, "\r*|          |*\n");
 8006a8a:	490c      	ldr	r1, [pc, #48]	; (8006abc <StartButtonTask+0x84>)
 8006a8c:	4812      	ldr	r0, [pc, #72]	; (8006ad8 <StartButtonTask+0xa0>)
 8006a8e:	f000 ffcd 	bl	8007a2c <siprintf>
        sprintf(row8, "\r*|          |*\n");
 8006a92:	490a      	ldr	r1, [pc, #40]	; (8006abc <StartButtonTask+0x84>)
 8006a94:	4811      	ldr	r0, [pc, #68]	; (8006adc <StartButtonTask+0xa4>)
 8006a96:	f000 ffc9 	bl	8007a2c <siprintf>
        sprintf(row9, "\r*|          |*\n");
 8006a9a:	4908      	ldr	r1, [pc, #32]	; (8006abc <StartButtonTask+0x84>)
 8006a9c:	4810      	ldr	r0, [pc, #64]	; (8006ae0 <StartButtonTask+0xa8>)
 8006a9e:	f000 ffc5 	bl	8007a2c <siprintf>
        sprintf(row10, "\r*|         O|*\n");
 8006aa2:	4910      	ldr	r1, [pc, #64]	; (8006ae4 <StartButtonTask+0xac>)
 8006aa4:	4810      	ldr	r0, [pc, #64]	; (8006ae8 <StartButtonTask+0xb0>)
 8006aa6:	f000 ffc1 	bl	8007a2c <siprintf>
        sprintf(row11, "\r**************\n");
 8006aaa:	4910      	ldr	r1, [pc, #64]	; (8006aec <StartButtonTask+0xb4>)
 8006aac:	4810      	ldr	r0, [pc, #64]	; (8006af0 <StartButtonTask+0xb8>)
 8006aae:	f000 ffbd 	bl	8007a2c <siprintf>
    osDelay(100);
 8006ab2:	e7c5      	b.n	8006a40 <StartButtonTask+0x8>
 8006ab4:	20003210 	.word	0x20003210
 8006ab8:	20003214 	.word	0x20003214
 8006abc:	08008e80 	.word	0x08008e80
 8006ac0:	200032f8 	.word	0x200032f8
 8006ac4:	2000330c 	.word	0x2000330c
 8006ac8:	20003320 	.word	0x20003320
 8006acc:	20003334 	.word	0x20003334
 8006ad0:	20003348 	.word	0x20003348
 8006ad4:	2000335c 	.word	0x2000335c
 8006ad8:	20003370 	.word	0x20003370
 8006adc:	20003384 	.word	0x20003384
 8006ae0:	20003398 	.word	0x20003398
 8006ae4:	08008e94 	.word	0x08008e94
 8006ae8:	200033ac 	.word	0x200033ac
 8006aec:	08008ea8 	.word	0x08008ea8
 8006af0:	200033c0 	.word	0x200033c0

08006af4 <StartTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void const * argument)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af0a      	add	r7, sp, #40	; 0x28
 8006afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask */
	  HAL_UART_Init(&huart1);
 8006afc:	4877      	ldr	r0, [pc, #476]	; (8006cdc <StartTransmitTask+0x1e8>)
 8006afe:	f7fd fb79 	bl	80041f4 <HAL_UART_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8006b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b06:	f7fe fa7c 	bl	8005002 <osDelay>
    while(resetCounter ==0){
 8006b0a:	bf00      	nop
 8006b0c:	4b74      	ldr	r3, [pc, #464]	; (8006ce0 <StartTransmitTask+0x1ec>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0fb      	beq.n	8006b0c <StartTransmitTask+0x18>
    //do nothing until the button is pressed
    }
    //for each row, copy the last row's content
    for(uint16_t copyIndex =0;copyIndex<20;copyIndex++){
 8006b14:	2300      	movs	r3, #0
 8006b16:	81fb      	strh	r3, [r7, #14]
 8006b18:	e038      	b.n	8006b8c <StartTransmitTask+0x98>
    row10[copyIndex] = row9[copyIndex];
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	4971      	ldr	r1, [pc, #452]	; (8006ce4 <StartTransmitTask+0x1f0>)
 8006b20:	5c89      	ldrb	r1, [r1, r2]
 8006b22:	4a71      	ldr	r2, [pc, #452]	; (8006ce8 <StartTransmitTask+0x1f4>)
 8006b24:	54d1      	strb	r1, [r2, r3]
    row9[copyIndex] = row8[copyIndex];
 8006b26:	89fa      	ldrh	r2, [r7, #14]
 8006b28:	89fb      	ldrh	r3, [r7, #14]
 8006b2a:	4970      	ldr	r1, [pc, #448]	; (8006cec <StartTransmitTask+0x1f8>)
 8006b2c:	5c89      	ldrb	r1, [r1, r2]
 8006b2e:	4a6d      	ldr	r2, [pc, #436]	; (8006ce4 <StartTransmitTask+0x1f0>)
 8006b30:	54d1      	strb	r1, [r2, r3]
    row8[copyIndex] = row7[copyIndex];
 8006b32:	89fa      	ldrh	r2, [r7, #14]
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	496e      	ldr	r1, [pc, #440]	; (8006cf0 <StartTransmitTask+0x1fc>)
 8006b38:	5c89      	ldrb	r1, [r1, r2]
 8006b3a:	4a6c      	ldr	r2, [pc, #432]	; (8006cec <StartTransmitTask+0x1f8>)
 8006b3c:	54d1      	strb	r1, [r2, r3]
    row7[copyIndex] = row6[copyIndex];
 8006b3e:	89fa      	ldrh	r2, [r7, #14]
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	496c      	ldr	r1, [pc, #432]	; (8006cf4 <StartTransmitTask+0x200>)
 8006b44:	5c89      	ldrb	r1, [r1, r2]
 8006b46:	4a6a      	ldr	r2, [pc, #424]	; (8006cf0 <StartTransmitTask+0x1fc>)
 8006b48:	54d1      	strb	r1, [r2, r3]
    row6[copyIndex] = row5[copyIndex];
 8006b4a:	89fa      	ldrh	r2, [r7, #14]
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	496a      	ldr	r1, [pc, #424]	; (8006cf8 <StartTransmitTask+0x204>)
 8006b50:	5c89      	ldrb	r1, [r1, r2]
 8006b52:	4a68      	ldr	r2, [pc, #416]	; (8006cf4 <StartTransmitTask+0x200>)
 8006b54:	54d1      	strb	r1, [r2, r3]
    row5[copyIndex] = row4[copyIndex];
 8006b56:	89fa      	ldrh	r2, [r7, #14]
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	4968      	ldr	r1, [pc, #416]	; (8006cfc <StartTransmitTask+0x208>)
 8006b5c:	5c89      	ldrb	r1, [r1, r2]
 8006b5e:	4a66      	ldr	r2, [pc, #408]	; (8006cf8 <StartTransmitTask+0x204>)
 8006b60:	54d1      	strb	r1, [r2, r3]
    row4[copyIndex] = row3[copyIndex];
 8006b62:	89fa      	ldrh	r2, [r7, #14]
 8006b64:	89fb      	ldrh	r3, [r7, #14]
 8006b66:	4966      	ldr	r1, [pc, #408]	; (8006d00 <StartTransmitTask+0x20c>)
 8006b68:	5c89      	ldrb	r1, [r1, r2]
 8006b6a:	4a64      	ldr	r2, [pc, #400]	; (8006cfc <StartTransmitTask+0x208>)
 8006b6c:	54d1      	strb	r1, [r2, r3]
    row3[copyIndex] = row2[copyIndex];
 8006b6e:	89fa      	ldrh	r2, [r7, #14]
 8006b70:	89fb      	ldrh	r3, [r7, #14]
 8006b72:	4964      	ldr	r1, [pc, #400]	; (8006d04 <StartTransmitTask+0x210>)
 8006b74:	5c89      	ldrb	r1, [r1, r2]
 8006b76:	4a62      	ldr	r2, [pc, #392]	; (8006d00 <StartTransmitTask+0x20c>)
 8006b78:	54d1      	strb	r1, [r2, r3]
    row2[copyIndex] = row1[copyIndex];
 8006b7a:	89fa      	ldrh	r2, [r7, #14]
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	4962      	ldr	r1, [pc, #392]	; (8006d08 <StartTransmitTask+0x214>)
 8006b80:	5c89      	ldrb	r1, [r1, r2]
 8006b82:	4a60      	ldr	r2, [pc, #384]	; (8006d04 <StartTransmitTask+0x210>)
 8006b84:	54d1      	strb	r1, [r2, r3]
    for(uint16_t copyIndex =0;copyIndex<20;copyIndex++){
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	81fb      	strh	r3, [r7, #14]
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	2b13      	cmp	r3, #19
 8006b90:	d9c3      	bls.n	8006b1a <StartTransmitTask+0x26>
    }
    if (row10[12-volume_height]=='_'){
 8006b92:	4b5e      	ldr	r3, [pc, #376]	; (8006d0c <StartTransmitTask+0x218>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f1c3 030c 	rsb	r3, r3, #12
 8006b9a:	4a53      	ldr	r2, [pc, #332]	; (8006ce8 <StartTransmitTask+0x1f4>)
 8006b9c:	5cd3      	ldrb	r3, [r2, r3]
 8006b9e:	2b5f      	cmp	r3, #95	; 0x5f
 8006ba0:	d10a      	bne.n	8006bb8 <StartTransmitTask+0xc4>
    	row10[12-volume_height] = 'X';
 8006ba2:	4b5a      	ldr	r3, [pc, #360]	; (8006d0c <StartTransmitTask+0x218>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f1c3 030c 	rsb	r3, r3, #12
 8006baa:	4a4f      	ldr	r2, [pc, #316]	; (8006ce8 <StartTransmitTask+0x1f4>)
 8006bac:	2158      	movs	r1, #88	; 0x58
 8006bae:	54d1      	strb	r1, [r2, r3]
    	resetCounter = 0;
 8006bb0:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <StartTransmitTask+0x1ec>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e006      	b.n	8006bc6 <StartTransmitTask+0xd2>
    }
    else{
    	row10[12-volume_height] = 'O';
 8006bb8:	4b54      	ldr	r3, [pc, #336]	; (8006d0c <StartTransmitTask+0x218>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f1c3 030c 	rsb	r3, r3, #12
 8006bc0:	4a49      	ldr	r2, [pc, #292]	; (8006ce8 <StartTransmitTask+0x1f4>)
 8006bc2:	214f      	movs	r1, #79	; 0x4f
 8006bc4:	54d1      	strb	r1, [r2, r3]
    }
    //generate the row1
    if (blank_count == 0){ //when blank_count=0, we generate spikes, otherwise we leave it blank
 8006bc6:	4b52      	ldr	r3, [pc, #328]	; (8006d10 <StartTransmitTask+0x21c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d14c      	bne.n	8006c68 <StartTransmitTask+0x174>
    	blank_count +=1;
 8006bce:	4b50      	ldr	r3, [pc, #320]	; (8006d10 <StartTransmitTask+0x21c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a4e      	ldr	r2, [pc, #312]	; (8006d10 <StartTransmitTask+0x21c>)
 8006bd6:	6013      	str	r3, [r2, #0]
    	uint8_t first_spike =  rand()%7;//generate a random number between 0-6
 8006bd8:	f000 feea 	bl	80079b0 <rand>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b4d      	ldr	r3, [pc, #308]	; (8006d14 <StartTransmitTask+0x220>)
 8006be0:	fb83 1302 	smull	r1, r3, r3, r2
 8006be4:	4413      	add	r3, r2
 8006be6:	1099      	asrs	r1, r3, #2
 8006be8:	17d3      	asrs	r3, r2, #31
 8006bea:	1ac9      	subs	r1, r1, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	1ad1      	subs	r1, r2, r3
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	737b      	strb	r3, [r7, #13]
    	//generate different spikes
    	if (first_spike == 0){
 8006bf8:	7b7b      	ldrb	r3, [r7, #13]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <StartTransmitTask+0x114>
    		sprintf(row1, "\r*|    ______|*\n");
 8006bfe:	4946      	ldr	r1, [pc, #280]	; (8006d18 <StartTransmitTask+0x224>)
 8006c00:	4841      	ldr	r0, [pc, #260]	; (8006d08 <StartTransmitTask+0x214>)
 8006c02:	f000 ff13 	bl	8007a2c <siprintf>
 8006c06:	e044      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 1){
 8006c08:	7b7b      	ldrb	r3, [r7, #13]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d104      	bne.n	8006c18 <StartTransmitTask+0x124>
    		sprintf(row1, "\r*|_    _____|*\n");
 8006c0e:	4943      	ldr	r1, [pc, #268]	; (8006d1c <StartTransmitTask+0x228>)
 8006c10:	483d      	ldr	r0, [pc, #244]	; (8006d08 <StartTransmitTask+0x214>)
 8006c12:	f000 ff0b 	bl	8007a2c <siprintf>
 8006c16:	e03c      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 2){
 8006c18:	7b7b      	ldrb	r3, [r7, #13]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d104      	bne.n	8006c28 <StartTransmitTask+0x134>
    		sprintf(row1, "\r*|__    ____|*\n");
 8006c1e:	4940      	ldr	r1, [pc, #256]	; (8006d20 <StartTransmitTask+0x22c>)
 8006c20:	4839      	ldr	r0, [pc, #228]	; (8006d08 <StartTransmitTask+0x214>)
 8006c22:	f000 ff03 	bl	8007a2c <siprintf>
 8006c26:	e034      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 3){
 8006c28:	7b7b      	ldrb	r3, [r7, #13]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d104      	bne.n	8006c38 <StartTransmitTask+0x144>
    		sprintf(row1, "\r*|___    ___|*\n");
 8006c2e:	493d      	ldr	r1, [pc, #244]	; (8006d24 <StartTransmitTask+0x230>)
 8006c30:	4835      	ldr	r0, [pc, #212]	; (8006d08 <StartTransmitTask+0x214>)
 8006c32:	f000 fefb 	bl	8007a2c <siprintf>
 8006c36:	e02c      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 4){
 8006c38:	7b7b      	ldrb	r3, [r7, #13]
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d104      	bne.n	8006c48 <StartTransmitTask+0x154>
    		sprintf(row1, "\r*|____    __|*\n");
 8006c3e:	493a      	ldr	r1, [pc, #232]	; (8006d28 <StartTransmitTask+0x234>)
 8006c40:	4831      	ldr	r0, [pc, #196]	; (8006d08 <StartTransmitTask+0x214>)
 8006c42:	f000 fef3 	bl	8007a2c <siprintf>
 8006c46:	e024      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 5){
 8006c48:	7b7b      	ldrb	r3, [r7, #13]
 8006c4a:	2b05      	cmp	r3, #5
 8006c4c:	d104      	bne.n	8006c58 <StartTransmitTask+0x164>
    		sprintf(row1, "\r*|_____    _|*\n");
 8006c4e:	4937      	ldr	r1, [pc, #220]	; (8006d2c <StartTransmitTask+0x238>)
 8006c50:	482d      	ldr	r0, [pc, #180]	; (8006d08 <StartTransmitTask+0x214>)
 8006c52:	f000 feeb 	bl	8007a2c <siprintf>
 8006c56:	e01c      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    	else if(first_spike == 6){
 8006c58:	7b7b      	ldrb	r3, [r7, #13]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d119      	bne.n	8006c92 <StartTransmitTask+0x19e>
    		sprintf(row1, "\r*|______    |*\n");
 8006c5e:	4934      	ldr	r1, [pc, #208]	; (8006d30 <StartTransmitTask+0x23c>)
 8006c60:	4829      	ldr	r0, [pc, #164]	; (8006d08 <StartTransmitTask+0x214>)
 8006c62:	f000 fee3 	bl	8007a2c <siprintf>
 8006c66:	e014      	b.n	8006c92 <StartTransmitTask+0x19e>
    	}
    }
    else if(blank_count == 1){//leave blank(no spikes)
 8006c68:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <StartTransmitTask+0x21c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d109      	bne.n	8006c84 <StartTransmitTask+0x190>
    	blank_count +=1;
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <StartTransmitTask+0x21c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <StartTransmitTask+0x21c>)
 8006c78:	6013      	str	r3, [r2, #0]
    	sprintf(row1, "\r*|          |*\n");
 8006c7a:	492e      	ldr	r1, [pc, #184]	; (8006d34 <StartTransmitTask+0x240>)
 8006c7c:	4822      	ldr	r0, [pc, #136]	; (8006d08 <StartTransmitTask+0x214>)
 8006c7e:	f000 fed5 	bl	8007a2c <siprintf>
 8006c82:	e006      	b.n	8006c92 <StartTransmitTask+0x19e>
    }
    else{//leave blank(no spikes)
    	blank_count = 0;
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <StartTransmitTask+0x21c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    	sprintf(row1, "\r*|          |*\n");
 8006c8a:	492a      	ldr	r1, [pc, #168]	; (8006d34 <StartTransmitTask+0x240>)
 8006c8c:	481e      	ldr	r0, [pc, #120]	; (8006d08 <StartTransmitTask+0x214>)
 8006c8e:	f000 fecd 	bl	8007a2c <siprintf>
//    HAL_UART_Transmit(&huart1, (uint8_t*) row6, (uint16_t) strlen(row6), 10000);
//    HAL_UART_Transmit(&huart1, (uint8_t*) row7, (uint16_t) strlen(row7), 10000);
//    HAL_UART_Transmit(&huart1, (uint8_t*) row8, (uint16_t) strlen(row8), 10000);
//    HAL_UART_Transmit(&huart1, (uint8_t*) row9, (uint16_t) strlen(row9), 10000);
//    HAL_UART_Transmit(&huart1, (uint8_t*) row10, (uint16_t) strlen(row10), 10000);
    sprintf(str, "%s%s%s%s%s%s%s%s%s%s%s", row1, row2, row3, row4, row5, row6, row7, row8, row9, row10, row11);
 8006c92:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <StartTransmitTask+0x244>)
 8006c94:	9308      	str	r3, [sp, #32]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <StartTransmitTask+0x1f4>)
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <StartTransmitTask+0x1f0>)
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <StartTransmitTask+0x1f8>)
 8006ca0:	9305      	str	r3, [sp, #20]
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <StartTransmitTask+0x1fc>)
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <StartTransmitTask+0x200>)
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <StartTransmitTask+0x204>)
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <StartTransmitTask+0x208>)
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <StartTransmitTask+0x20c>)
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <StartTransmitTask+0x210>)
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <StartTransmitTask+0x214>)
 8006cba:	4920      	ldr	r1, [pc, #128]	; (8006d3c <StartTransmitTask+0x248>)
 8006cbc:	4820      	ldr	r0, [pc, #128]	; (8006d40 <StartTransmitTask+0x24c>)
 8006cbe:	f000 feb5 	bl	8007a2c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) str, (uint16_t) strlen(str), 10000);
 8006cc2:	481f      	ldr	r0, [pc, #124]	; (8006d40 <StartTransmitTask+0x24c>)
 8006cc4:	f7f9 fa9c 	bl	8000200 <strlen>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f242 7310 	movw	r3, #10000	; 0x2710
 8006cd0:	491b      	ldr	r1, [pc, #108]	; (8006d40 <StartTransmitTask+0x24c>)
 8006cd2:	4802      	ldr	r0, [pc, #8]	; (8006cdc <StartTransmitTask+0x1e8>)
 8006cd4:	f7fd fade 	bl	8004294 <HAL_UART_Transmit>
    osDelay(500);
 8006cd8:	e713      	b.n	8006b02 <StartTransmitTask+0xe>
 8006cda:	bf00      	nop
 8006cdc:	20001218 	.word	0x20001218
 8006ce0:	20003214 	.word	0x20003214
 8006ce4:	20003398 	.word	0x20003398
 8006ce8:	200033ac 	.word	0x200033ac
 8006cec:	20003384 	.word	0x20003384
 8006cf0:	20003370 	.word	0x20003370
 8006cf4:	2000335c 	.word	0x2000335c
 8006cf8:	20003348 	.word	0x20003348
 8006cfc:	20003334 	.word	0x20003334
 8006d00:	20003320 	.word	0x20003320
 8006d04:	2000330c 	.word	0x2000330c
 8006d08:	200032f8 	.word	0x200032f8
 8006d0c:	200031fb 	.word	0x200031fb
 8006d10:	20003218 	.word	0x20003218
 8006d14:	92492493 	.word	0x92492493
 8006d18:	08008ebc 	.word	0x08008ebc
 8006d1c:	08008ed0 	.word	0x08008ed0
 8006d20:	08008ee4 	.word	0x08008ee4
 8006d24:	08008ef8 	.word	0x08008ef8
 8006d28:	08008f0c 	.word	0x08008f0c
 8006d2c:	08008f20 	.word	0x08008f20
 8006d30:	08008f34 	.word	0x08008f34
 8006d34:	08008e80 	.word	0x08008e80
 8006d38:	200033c0 	.word	0x200033c0
 8006d3c:	08008f48 	.word	0x08008f48
 8006d40:	2000321c 	.word	0x2000321c

08006d44 <StartReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTask */
void StartReadTask(void const * argument)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006d4c:	2064      	movs	r0, #100	; 0x64
 8006d4e:	f7fe f958 	bl	8005002 <osDelay>
    while(resetCounter ==0){
 8006d52:	bf00      	nop
 8006d54:	4b94      	ldr	r3, [pc, #592]	; (8006fa8 <StartReadTask+0x264>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0fb      	beq.n	8006d54 <StartReadTask+0x10>
    //do nothing until the button is pressed
    }
    if(start_recording==0){
 8006d5c:	4b93      	ldr	r3, [pc, #588]	; (8006fac <StartReadTask+0x268>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d110      	bne.n	8006d86 <StartReadTask+0x42>
    HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, pre_Buffer, buffer_size);
 8006d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d68:	4991      	ldr	r1, [pc, #580]	; (8006fb0 <StartReadTask+0x26c>)
 8006d6a:	4892      	ldr	r0, [pc, #584]	; (8006fb4 <StartReadTask+0x270>)
 8006d6c:	f7fa f910 	bl	8000f90 <HAL_DFSDM_FilterRegularStart_DMA>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d74:	4890      	ldr	r0, [pc, #576]	; (8006fb8 <StartReadTask+0x274>)
 8006d76:	f7fa ff4d 	bl	8001c14 <HAL_GPIO_TogglePin>
    start_recording=1;
 8006d7a:	4b8c      	ldr	r3, [pc, #560]	; (8006fac <StartReadTask+0x268>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	701a      	strb	r2, [r3, #0]
    sum = 0;
 8006d80:	4b8e      	ldr	r3, [pc, #568]	; (8006fbc <StartReadTask+0x278>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    }
	  if (first_half_done == 1){
 8006d86:	4b8e      	ldr	r3, [pc, #568]	; (8006fc0 <StartReadTask+0x27c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d157      	bne.n	8006e3e <StartReadTask+0xfa>
		  for(i = 0; i<buffer_size/2; i++){
 8006d8e:	4b8d      	ldr	r3, [pc, #564]	; (8006fc4 <StartReadTask+0x280>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e04b      	b.n	8006e2e <StartReadTask+0xea>
			  aft_Buffer[i] = pre_Buffer[i]>>20;
 8006d96:	4b8b      	ldr	r3, [pc, #556]	; (8006fc4 <StartReadTask+0x280>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a85      	ldr	r2, [pc, #532]	; (8006fb0 <StartReadTask+0x26c>)
 8006d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006da0:	4b88      	ldr	r3, [pc, #544]	; (8006fc4 <StartReadTask+0x280>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	1512      	asrs	r2, r2, #20
 8006da6:	4988      	ldr	r1, [pc, #544]	; (8006fc8 <StartReadTask+0x284>)
 8006da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (aft_Buffer[i]>buffmax){
 8006dac:	4b85      	ldr	r3, [pc, #532]	; (8006fc4 <StartReadTask+0x280>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a85      	ldr	r2, [pc, #532]	; (8006fc8 <StartReadTask+0x284>)
 8006db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006db6:	4b85      	ldr	r3, [pc, #532]	; (8006fcc <StartReadTask+0x288>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	dd06      	ble.n	8006dcc <StartReadTask+0x88>
				  buffmax = aft_Buffer[i];
 8006dbe:	4b81      	ldr	r3, [pc, #516]	; (8006fc4 <StartReadTask+0x280>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a81      	ldr	r2, [pc, #516]	; (8006fc8 <StartReadTask+0x284>)
 8006dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc8:	4a80      	ldr	r2, [pc, #512]	; (8006fcc <StartReadTask+0x288>)
 8006dca:	6013      	str	r3, [r2, #0]
			  }
			  if (aft_Buffer[i]<buffmin){
 8006dcc:	4b7d      	ldr	r3, [pc, #500]	; (8006fc4 <StartReadTask+0x280>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a7d      	ldr	r2, [pc, #500]	; (8006fc8 <StartReadTask+0x284>)
 8006dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dd6:	4b7e      	ldr	r3, [pc, #504]	; (8006fd0 <StartReadTask+0x28c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	da06      	bge.n	8006dec <StartReadTask+0xa8>
				  buffmin = aft_Buffer[i];
 8006dde:	4b79      	ldr	r3, [pc, #484]	; (8006fc4 <StartReadTask+0x280>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a79      	ldr	r2, [pc, #484]	; (8006fc8 <StartReadTask+0x284>)
 8006de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de8:	4a79      	ldr	r2, [pc, #484]	; (8006fd0 <StartReadTask+0x28c>)
 8006dea:	6013      	str	r3, [r2, #0]
			  }
			  if(aft_Buffer[i]<0){
 8006dec:	4b75      	ldr	r3, [pc, #468]	; (8006fc4 <StartReadTask+0x280>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a75      	ldr	r2, [pc, #468]	; (8006fc8 <StartReadTask+0x284>)
 8006df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da0a      	bge.n	8006e10 <StartReadTask+0xcc>
				  sum -= aft_Buffer[i];
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <StartReadTask+0x278>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b71      	ldr	r3, [pc, #452]	; (8006fc4 <StartReadTask+0x280>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4971      	ldr	r1, [pc, #452]	; (8006fc8 <StartReadTask+0x284>)
 8006e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	4a6c      	ldr	r2, [pc, #432]	; (8006fbc <StartReadTask+0x278>)
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e009      	b.n	8006e24 <StartReadTask+0xe0>
			  }
			  else{
				  sum += aft_Buffer[i];
 8006e10:	4b6c      	ldr	r3, [pc, #432]	; (8006fc4 <StartReadTask+0x280>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6c      	ldr	r2, [pc, #432]	; (8006fc8 <StartReadTask+0x284>)
 8006e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e1a:	4b68      	ldr	r3, [pc, #416]	; (8006fbc <StartReadTask+0x278>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4413      	add	r3, r2
 8006e20:	4a66      	ldr	r2, [pc, #408]	; (8006fbc <StartReadTask+0x278>)
 8006e22:	6013      	str	r3, [r2, #0]
		  for(i = 0; i<buffer_size/2; i++){
 8006e24:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <StartReadTask+0x280>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	4a66      	ldr	r2, [pc, #408]	; (8006fc4 <StartReadTask+0x280>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	4b65      	ldr	r3, [pc, #404]	; (8006fc4 <StartReadTask+0x280>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e36:	d3ae      	bcc.n	8006d96 <StartReadTask+0x52>
			  }
		  }
		  first_half_done = 0;
 8006e38:	4b61      	ldr	r3, [pc, #388]	; (8006fc0 <StartReadTask+0x27c>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
	  }
	  if (second_half_done == 1){
 8006e3e:	4b65      	ldr	r3, [pc, #404]	; (8006fd4 <StartReadTask+0x290>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d16d      	bne.n	8006f22 <StartReadTask+0x1de>
		  for(i = buffer_size/2; i<buffer_size; i++){
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <StartReadTask+0x280>)
 8006e48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e04b      	b.n	8006ee8 <StartReadTask+0x1a4>
			  aft_Buffer[i] = pre_Buffer[i]>>20;
 8006e50:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <StartReadTask+0x280>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a56      	ldr	r2, [pc, #344]	; (8006fb0 <StartReadTask+0x26c>)
 8006e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <StartReadTask+0x280>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1512      	asrs	r2, r2, #20
 8006e60:	4959      	ldr	r1, [pc, #356]	; (8006fc8 <StartReadTask+0x284>)
 8006e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (aft_Buffer[i]>buffmax){
 8006e66:	4b57      	ldr	r3, [pc, #348]	; (8006fc4 <StartReadTask+0x280>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a57      	ldr	r2, [pc, #348]	; (8006fc8 <StartReadTask+0x284>)
 8006e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e70:	4b56      	ldr	r3, [pc, #344]	; (8006fcc <StartReadTask+0x288>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	dd06      	ble.n	8006e86 <StartReadTask+0x142>
				  buffmax = aft_Buffer[i];
 8006e78:	4b52      	ldr	r3, [pc, #328]	; (8006fc4 <StartReadTask+0x280>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a52      	ldr	r2, [pc, #328]	; (8006fc8 <StartReadTask+0x284>)
 8006e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e82:	4a52      	ldr	r2, [pc, #328]	; (8006fcc <StartReadTask+0x288>)
 8006e84:	6013      	str	r3, [r2, #0]
			  }
			  if (aft_Buffer[i]<buffmin){
 8006e86:	4b4f      	ldr	r3, [pc, #316]	; (8006fc4 <StartReadTask+0x280>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a4f      	ldr	r2, [pc, #316]	; (8006fc8 <StartReadTask+0x284>)
 8006e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e90:	4b4f      	ldr	r3, [pc, #316]	; (8006fd0 <StartReadTask+0x28c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	da06      	bge.n	8006ea6 <StartReadTask+0x162>
				  buffmin = aft_Buffer[i];
 8006e98:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <StartReadTask+0x280>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a4a      	ldr	r2, [pc, #296]	; (8006fc8 <StartReadTask+0x284>)
 8006e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea2:	4a4b      	ldr	r2, [pc, #300]	; (8006fd0 <StartReadTask+0x28c>)
 8006ea4:	6013      	str	r3, [r2, #0]
			  }
			  if(aft_Buffer[i]<0){
 8006ea6:	4b47      	ldr	r3, [pc, #284]	; (8006fc4 <StartReadTask+0x280>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a47      	ldr	r2, [pc, #284]	; (8006fc8 <StartReadTask+0x284>)
 8006eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0a      	bge.n	8006eca <StartReadTask+0x186>
				  sum -= aft_Buffer[i];
 8006eb4:	4b41      	ldr	r3, [pc, #260]	; (8006fbc <StartReadTask+0x278>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b42      	ldr	r3, [pc, #264]	; (8006fc4 <StartReadTask+0x280>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4942      	ldr	r1, [pc, #264]	; (8006fc8 <StartReadTask+0x284>)
 8006ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	4a3d      	ldr	r2, [pc, #244]	; (8006fbc <StartReadTask+0x278>)
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	e009      	b.n	8006ede <StartReadTask+0x19a>
			  }
			  else{
				  sum += aft_Buffer[i];
 8006eca:	4b3e      	ldr	r3, [pc, #248]	; (8006fc4 <StartReadTask+0x280>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a3e      	ldr	r2, [pc, #248]	; (8006fc8 <StartReadTask+0x284>)
 8006ed0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ed4:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <StartReadTask+0x278>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4413      	add	r3, r2
 8006eda:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <StartReadTask+0x278>)
 8006edc:	6013      	str	r3, [r2, #0]
		  for(i = buffer_size/2; i<buffer_size; i++){
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <StartReadTask+0x280>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a37      	ldr	r2, [pc, #220]	; (8006fc4 <StartReadTask+0x280>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	4b36      	ldr	r3, [pc, #216]	; (8006fc4 <StartReadTask+0x280>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ef0:	d3ae      	bcc.n	8006e50 <StartReadTask+0x10c>
			  }
		  }
		  mean = sum/buffer_size;
 8006ef2:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <StartReadTask+0x278>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a38      	ldr	r2, [pc, #224]	; (8006fd8 <StartReadTask+0x294>)
 8006ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8006efc:	1192      	asrs	r2, r2, #6
 8006efe:	17db      	asrs	r3, r3, #31
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	4a36      	ldr	r2, [pc, #216]	; (8006fdc <StartReadTask+0x298>)
 8006f04:	6013      	str	r3, [r2, #0]
		  second_half_done = 0;
 8006f06:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <StartReadTask+0x290>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
		  HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8006f0c:	4829      	ldr	r0, [pc, #164]	; (8006fb4 <StartReadTask+0x270>)
 8006f0e:	f7fa f8c1 	bl	8001094 <HAL_DFSDM_FilterRegularStop_DMA>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f16:	4828      	ldr	r0, [pc, #160]	; (8006fb8 <StartReadTask+0x274>)
 8006f18:	f7fa fe7c 	bl	8001c14 <HAL_GPIO_TogglePin>
		  start_recording=0;
 8006f1c:	4b23      	ldr	r3, [pc, #140]	; (8006fac <StartReadTask+0x268>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
	  }
	  if(mean<10){
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <StartReadTask+0x298>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	dc03      	bgt.n	8006f32 <StartReadTask+0x1ee>
		  volume_height = 0;
 8006f2a:	4b2d      	ldr	r3, [pc, #180]	; (8006fe0 <StartReadTask+0x29c>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e70c      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<50){
 8006f32:	4b2a      	ldr	r3, [pc, #168]	; (8006fdc <StartReadTask+0x298>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b31      	cmp	r3, #49	; 0x31
 8006f38:	dc03      	bgt.n	8006f42 <StartReadTask+0x1fe>
		  volume_height = 1;
 8006f3a:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <StartReadTask+0x29c>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e704      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<100){
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <StartReadTask+0x298>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b63      	cmp	r3, #99	; 0x63
 8006f48:	dc03      	bgt.n	8006f52 <StartReadTask+0x20e>
		  volume_height = 2;
 8006f4a:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <StartReadTask+0x29c>)
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	e6fc      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<150){
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <StartReadTask+0x298>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b95      	cmp	r3, #149	; 0x95
 8006f58:	dc03      	bgt.n	8006f62 <StartReadTask+0x21e>
		  volume_height = 3;
 8006f5a:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <StartReadTask+0x29c>)
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e6f4      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<200){
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <StartReadTask+0x298>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2bc7      	cmp	r3, #199	; 0xc7
 8006f68:	dc03      	bgt.n	8006f72 <StartReadTask+0x22e>
		  volume_height = 4;
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <StartReadTask+0x29c>)
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e6ec      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<250){
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <StartReadTask+0x298>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2bf9      	cmp	r3, #249	; 0xf9
 8006f78:	dc03      	bgt.n	8006f82 <StartReadTask+0x23e>
		  volume_height = 5;
 8006f7a:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <StartReadTask+0x29c>)
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e6e4      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<300){
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <StartReadTask+0x298>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006f8a:	da03      	bge.n	8006f94 <StartReadTask+0x250>
		  volume_height = 6;
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <StartReadTask+0x29c>)
 8006f8e:	2206      	movs	r2, #6
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	e6db      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<350){
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <StartReadTask+0x298>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8006f9c:	da22      	bge.n	8006fe4 <StartReadTask+0x2a0>
		  volume_height = 7;
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <StartReadTask+0x29c>)
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e6d2      	b.n	8006d4c <StartReadTask+0x8>
 8006fa6:	bf00      	nop
 8006fa8:	20003214 	.word	0x20003214
 8006fac:	200031fa 	.word	0x200031fa
 8006fb0:	200012b8 	.word	0x200012b8
 8006fb4:	2000108c 	.word	0x2000108c
 8006fb8:	48000400 	.word	0x48000400
 8006fbc:	20003208 	.word	0x20003208
 8006fc0:	200031f8 	.word	0x200031f8
 8006fc4:	2000320c 	.word	0x2000320c
 8006fc8:	20002258 	.word	0x20002258
 8006fcc:	200031fc 	.word	0x200031fc
 8006fd0:	20003200 	.word	0x20003200
 8006fd4:	200031f9 	.word	0x200031f9
 8006fd8:	10624dd3 	.word	0x10624dd3
 8006fdc:	20003204 	.word	0x20003204
 8006fe0:	200031fb 	.word	0x200031fb
	  }
	  else if(mean<400){
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <StartReadTask+0x2e0>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006fec:	da03      	bge.n	8006ff6 <StartReadTask+0x2b2>
		  volume_height = 8;
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <StartReadTask+0x2e4>)
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e6aa      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<450){
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <StartReadTask+0x2e0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8006ffe:	da03      	bge.n	8007008 <StartReadTask+0x2c4>
		  volume_height = 9;
 8007000:	4b09      	ldr	r3, [pc, #36]	; (8007028 <StartReadTask+0x2e4>)
 8007002:	2209      	movs	r2, #9
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e6a1      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else if(mean<500){
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <StartReadTask+0x2e0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007010:	da03      	bge.n	800701a <StartReadTask+0x2d6>
		  volume_height = 10;
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <StartReadTask+0x2e4>)
 8007014:	220a      	movs	r2, #10
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e698      	b.n	8006d4c <StartReadTask+0x8>
	  }
	  else{
		  volume_height = 10;
 800701a:	4b03      	ldr	r3, [pc, #12]	; (8007028 <StartReadTask+0x2e4>)
 800701c:	220a      	movs	r2, #10
 800701e:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 8007020:	e694      	b.n	8006d4c <StartReadTask+0x8>
 8007022:	bf00      	nop
 8007024:	20003204 	.word	0x20003204
 8007028:	200031fb 	.word	0x200031fb

0800702c <StartKillTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKillTask */
void StartKillTask(void const * argument)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKillTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8007034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007038:	f7fd ffe3 	bl	8005002 <osDelay>
 800703c:	e7fa      	b.n	8007034 <StartKillTask+0x8>
	...

08007040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a04      	ldr	r2, [pc, #16]	; (8007060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007052:	f7f9 fac7 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40001000 	.word	0x40001000

08007064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007068:	b672      	cpsid	i
}
 800706a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800706c:	e7fe      	b.n	800706c <Error_Handler+0x8>
	...

08007070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <HAL_MspInit+0x4c>)
 8007078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707a:	4a10      	ldr	r2, [pc, #64]	; (80070bc <HAL_MspInit+0x4c>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	6613      	str	r3, [r2, #96]	; 0x60
 8007082:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <HAL_MspInit+0x4c>)
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_MspInit+0x4c>)
 8007090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <HAL_MspInit+0x4c>)
 8007094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007098:	6593      	str	r3, [r2, #88]	; 0x58
 800709a:	4b08      	ldr	r3, [pc, #32]	; (80070bc <HAL_MspInit+0x4c>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80070a6:	2200      	movs	r2, #0
 80070a8:	210f      	movs	r1, #15
 80070aa:	f06f 0001 	mvn.w	r0, #1
 80070ae:	f7f9 fb95 	bl	80007dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40021000 	.word	0x40021000

080070c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c8:	f107 0314 	add.w	r3, r7, #20
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	605a      	str	r2, [r3, #4]
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2f      	ldr	r2, [pc, #188]	; (800719c <HAL_DAC_MspInit+0xdc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d157      	bne.n	8007192 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80070e2:	4b2f      	ldr	r3, [pc, #188]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 80070e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070ec:	6593      	str	r3, [r2, #88]	; 0x58
 80070ee:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 80070f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070fa:	4b29      	ldr	r3, [pc, #164]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 80070fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fe:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007106:	4b26      	ldr	r3, [pc, #152]	; (80071a0 <HAL_DAC_MspInit+0xe0>)
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007112:	2310      	movs	r3, #16
 8007114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007116:	2303      	movs	r3, #3
 8007118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800711e:	f107 0314 	add.w	r3, r7, #20
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007128:	f7fa fbca 	bl	80018c0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800712e:	4a1e      	ldr	r2, [pc, #120]	; (80071a8 <HAL_DAC_MspInit+0xe8>)
 8007130:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007132:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007134:	2206      	movs	r2, #6
 8007136:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007138:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800713a:	2210      	movs	r2, #16
 800713c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800713e:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007140:	2200      	movs	r2, #0
 8007142:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007144:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800714a:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007152:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800715c:	2220      	movs	r2, #32
 800715e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007160:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007166:	480f      	ldr	r0, [pc, #60]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 8007168:	f7fa f8dc 	bl	8001324 <HAL_DMA_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007172:	f7ff ff77 	bl	8007064 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800717a:	609a      	str	r2, [r3, #8]
 800717c:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <HAL_DAC_MspInit+0xe4>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8007182:	2200      	movs	r2, #0
 8007184:	210f      	movs	r1, #15
 8007186:	2036      	movs	r0, #54	; 0x36
 8007188:	f7f9 fb28 	bl	80007dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800718c:	2036      	movs	r0, #54	; 0x36
 800718e:	f7f9 fb41 	bl	8000814 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007192:	bf00      	nop
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40007400 	.word	0x40007400
 80071a0:	40021000 	.word	0x40021000
 80071a4:	2000102c 	.word	0x2000102c
 80071a8:	40020008 	.word	0x40020008

080071ac <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0ae      	sub	sp, #184	; 0xb8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071c4:	f107 0310 	add.w	r3, r7, #16
 80071c8:	2294      	movs	r2, #148	; 0x94
 80071ca:	2100      	movs	r1, #0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fbe7 	bl	80079a0 <memset>
  if(DFSDM1_Init == 0)
 80071d2:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <HAL_DFSDM_FilterMspInit+0x13c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d14b      	bne.n	8007272 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80071da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071e6:	f107 0310 	add.w	r3, r7, #16
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fb fe38 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80071f6:	f7ff ff35 	bl	8007064 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80071fa:	4b3c      	ldr	r3, [pc, #240]	; (80072ec <HAL_DFSDM_FilterMspInit+0x140>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	4a3a      	ldr	r2, [pc, #232]	; (80072ec <HAL_DFSDM_FilterMspInit+0x140>)
 8007202:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007204:	4b39      	ldr	r3, [pc, #228]	; (80072ec <HAL_DFSDM_FilterMspInit+0x140>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10b      	bne.n	8007224 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800720c:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	4a37      	ldr	r2, [pc, #220]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007216:	6613      	str	r3, [r2, #96]	; 0x60
 8007218:	4b35      	ldr	r3, [pc, #212]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 800721a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007224:	4b32      	ldr	r3, [pc, #200]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	4a31      	ldr	r2, [pc, #196]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 800722a:	f043 0310 	orr.w	r3, r3, #16
 800722e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007230:	4b2f      	ldr	r3, [pc, #188]	; (80072f0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800723c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007256:	2306      	movs	r3, #6
 8007258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800725c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007260:	4619      	mov	r1, r3
 8007262:	4824      	ldr	r0, [pc, #144]	; (80072f4 <HAL_DFSDM_FilterMspInit+0x148>)
 8007264:	f7fa fb2c 	bl	80018c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007268:	4b1f      	ldr	r3, [pc, #124]	; (80072e8 <HAL_DFSDM_FilterMspInit+0x13c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007270:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d131      	bne.n	80072e0 <HAL_DFSDM_FilterMspInit+0x134>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 800727c:	4b1f      	ldr	r3, [pc, #124]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 800727e:	4a20      	ldr	r2, [pc, #128]	; (8007300 <HAL_DFSDM_FilterMspInit+0x154>)
 8007280:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 8007284:	2256      	movs	r2, #86	; 0x56
 8007286:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007288:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 800728a:	2200      	movs	r2, #0
 800728c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800728e:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 8007290:	2200      	movs	r2, #0
 8007292:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800729a:	4b18      	ldr	r3, [pc, #96]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 800729c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072a2:	4b16      	ldr	r3, [pc, #88]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072a8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80072b8:	4810      	ldr	r0, [pc, #64]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072ba:	f7fa f833 	bl	8001324 <HAL_DMA_Init>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_DFSDM_FilterMspInit+0x11c>
    {
      Error_Handler();
 80072c4:	f7ff fece 	bl	8007064 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a0c      	ldr	r2, [pc, #48]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80072ce:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a09      	ldr	r2, [pc, #36]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072d8:	629a      	str	r2, [r3, #40]	; 0x28
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <HAL_DFSDM_FilterMspInit+0x150>)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80072e0:	bf00      	nop
 80072e2:	37b8      	adds	r7, #184	; 0xb8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200033d8 	.word	0x200033d8
 80072ec:	200033d4 	.word	0x200033d4
 80072f0:	40021000 	.word	0x40021000
 80072f4:	48001000 	.word	0x48001000
 80072f8:	40016100 	.word	0x40016100
 80072fc:	20001118 	.word	0x20001118
 8007300:	4002001c 	.word	0x4002001c

08007304 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b0ae      	sub	sp, #184	; 0xb8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800730c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800731c:	f107 0310 	add.w	r3, r7, #16
 8007320:	2294      	movs	r2, #148	; 0x94
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fb3b 	bl	80079a0 <memset>
  if(DFSDM1_Init == 0)
 800732a:	4b2a      	ldr	r3, [pc, #168]	; (80073d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d14b      	bne.n	80073ca <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007336:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007338:	2300      	movs	r3, #0
 800733a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800733e:	f107 0310 	add.w	r3, r7, #16
 8007342:	4618      	mov	r0, r3
 8007344:	f7fb fd8c 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800734e:	f7ff fe89 	bl	8007064 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007352:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3301      	adds	r3, #1
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800735a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800735c:	4b1e      	ldr	r3, [pc, #120]	; (80073d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d10b      	bne.n	800737c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007364:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800736a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736e:	6613      	str	r3, [r2, #96]	; 0x60
 8007370:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800737c:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800737e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007382:	f043 0310 	orr.w	r3, r3, #16
 8007386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007388:	4b14      	ldr	r3, [pc, #80]	; (80073dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800738a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738c:	f003 0310 	and.w	r3, r3, #16
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8007394:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073a8:	2300      	movs	r3, #0
 80073aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80073ae:	2306      	movs	r3, #6
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4809      	ldr	r0, [pc, #36]	; (80073e0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80073bc:	f7fa fa80 	bl	80018c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	4a03      	ldr	r2, [pc, #12]	; (80073d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80073c8:	6013      	str	r3, [r2, #0]
  }

}
 80073ca:	bf00      	nop
 80073cc:	37b8      	adds	r7, #184	; 0xb8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200033d8 	.word	0x200033d8
 80073d8:	200033d4 	.word	0x200033d4
 80073dc:	40021000 	.word	0x40021000
 80073e0:	48001000 	.word	0x48001000

080073e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b0ae      	sub	sp, #184	; 0xb8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	2294      	movs	r2, #148	; 0x94
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f000 facb 	bl	80079a0 <memset>
  if(hi2c->Instance==I2C2)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <HAL_I2C_MspInit+0xb0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d13b      	bne.n	800748c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007418:	2300      	movs	r3, #0
 800741a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	4618      	mov	r0, r3
 8007422:	f7fb fd1d 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800742c:	f7ff fe1a 	bl	8007064 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007430:	4b19      	ldr	r3, [pc, #100]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 8007432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007434:	4a18      	ldr	r2, [pc, #96]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 8007436:	f043 0302 	orr.w	r3, r3, #2
 800743a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800743c:	4b16      	ldr	r3, [pc, #88]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 800743e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007448:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800744c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007450:	2312      	movs	r3, #18
 8007452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007456:	2300      	movs	r3, #0
 8007458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800745c:	2303      	movs	r3, #3
 800745e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007462:	2304      	movs	r3, #4
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007468:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800746c:	4619      	mov	r1, r3
 800746e:	480b      	ldr	r0, [pc, #44]	; (800749c <HAL_I2C_MspInit+0xb8>)
 8007470:	f7fa fa26 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 8007476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007478:	4a07      	ldr	r2, [pc, #28]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 800747a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800747e:	6593      	str	r3, [r2, #88]	; 0x58
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <HAL_I2C_MspInit+0xb4>)
 8007482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800748c:	bf00      	nop
 800748e:	37b8      	adds	r7, #184	; 0xb8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40005800 	.word	0x40005800
 8007498:	40021000 	.word	0x40021000
 800749c:	48000400 	.word	0x48000400

080074a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d113      	bne.n	80074da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <HAL_TIM_Base_MspInit+0x44>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	4a0b      	ldr	r2, [pc, #44]	; (80074e4 <HAL_TIM_Base_MspInit+0x44>)
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	6593      	str	r3, [r2, #88]	; 0x58
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_TIM_Base_MspInit+0x44>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80074ca:	2200      	movs	r2, #0
 80074cc:	2105      	movs	r1, #5
 80074ce:	201c      	movs	r0, #28
 80074d0:	f7f9 f984 	bl	80007dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80074d4:	201c      	movs	r0, #28
 80074d6:	f7f9 f99d 	bl	8000814 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40021000 	.word	0x40021000

080074e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b0ae      	sub	sp, #184	; 0xb8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	609a      	str	r2, [r3, #8]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007500:	f107 0310 	add.w	r3, r7, #16
 8007504:	2294      	movs	r2, #148	; 0x94
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fa49 	bl	80079a0 <memset>
  if(huart->Instance==USART1)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a21      	ldr	r2, [pc, #132]	; (8007598 <HAL_UART_MspInit+0xb0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d13a      	bne.n	800758e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007518:	2301      	movs	r3, #1
 800751a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800751c:	2300      	movs	r3, #0
 800751e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f7fb fc9b 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007530:	f7ff fd98 	bl	8007064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007534:	4b19      	ldr	r3, [pc, #100]	; (800759c <HAL_UART_MspInit+0xb4>)
 8007536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007538:	4a18      	ldr	r2, [pc, #96]	; (800759c <HAL_UART_MspInit+0xb4>)
 800753a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800753e:	6613      	str	r3, [r2, #96]	; 0x60
 8007540:	4b16      	ldr	r3, [pc, #88]	; (800759c <HAL_UART_MspInit+0xb4>)
 8007542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800754c:	4b13      	ldr	r3, [pc, #76]	; (800759c <HAL_UART_MspInit+0xb4>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	4a12      	ldr	r2, [pc, #72]	; (800759c <HAL_UART_MspInit+0xb4>)
 8007552:	f043 0302 	orr.w	r3, r3, #2
 8007556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <HAL_UART_MspInit+0xb4>)
 800755a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007564:	23c0      	movs	r3, #192	; 0xc0
 8007566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756a:	2302      	movs	r3, #2
 800756c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	2300      	movs	r3, #0
 8007572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007576:	2303      	movs	r3, #3
 8007578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800757c:	2307      	movs	r3, #7
 800757e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007582:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007586:	4619      	mov	r1, r3
 8007588:	4805      	ldr	r0, [pc, #20]	; (80075a0 <HAL_UART_MspInit+0xb8>)
 800758a:	f7fa f999 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800758e:	bf00      	nop
 8007590:	37b8      	adds	r7, #184	; 0xb8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	48000400 	.word	0x48000400

080075a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80075b2:	4b34      	ldr	r3, [pc, #208]	; (8007684 <HAL_InitTick+0xe0>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	4a33      	ldr	r2, [pc, #204]	; (8007684 <HAL_InitTick+0xe0>)
 80075b8:	f043 0310 	orr.w	r3, r3, #16
 80075bc:	6593      	str	r3, [r2, #88]	; 0x58
 80075be:	4b31      	ldr	r3, [pc, #196]	; (8007684 <HAL_InitTick+0xe0>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	f003 0310 	and.w	r3, r3, #16
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80075ca:	f107 0210 	add.w	r2, r7, #16
 80075ce:	f107 0314 	add.w	r3, r7, #20
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fb fb51 	bl	8002c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fb fb1e 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 80075e8:	6378      	str	r0, [r7, #52]	; 0x34
 80075ea:	e004      	b.n	80075f6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80075ec:	f7fb fb1a 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 80075f0:	4603      	mov	r3, r0
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	4a23      	ldr	r2, [pc, #140]	; (8007688 <HAL_InitTick+0xe4>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	0c9b      	lsrs	r3, r3, #18
 8007600:	3b01      	subs	r3, #1
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <HAL_InitTick+0xe8>)
 8007606:	4a22      	ldr	r2, [pc, #136]	; (8007690 <HAL_InitTick+0xec>)
 8007608:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800760a:	4b20      	ldr	r3, [pc, #128]	; (800768c <HAL_InitTick+0xe8>)
 800760c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007610:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <HAL_InitTick+0xe8>)
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007618:	4b1c      	ldr	r3, [pc, #112]	; (800768c <HAL_InitTick+0xe8>)
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800761e:	4b1b      	ldr	r3, [pc, #108]	; (800768c <HAL_InitTick+0xe8>)
 8007620:	2200      	movs	r2, #0
 8007622:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <HAL_InitTick+0xe8>)
 8007626:	2200      	movs	r2, #0
 8007628:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800762a:	4818      	ldr	r0, [pc, #96]	; (800768c <HAL_InitTick+0xe8>)
 800762c:	f7fc f930 	bl	8003890 <HAL_TIM_Base_Init>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8007636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11b      	bne.n	8007676 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800763e:	4813      	ldr	r0, [pc, #76]	; (800768c <HAL_InitTick+0xe8>)
 8007640:	f7fc f97e 	bl	8003940 <HAL_TIM_Base_Start_IT>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800764a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800764e:	2b00      	cmp	r3, #0
 8007650:	d111      	bne.n	8007676 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007652:	2036      	movs	r0, #54	; 0x36
 8007654:	f7f9 f8de 	bl	8000814 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d808      	bhi.n	8007670 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800765e:	2200      	movs	r2, #0
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	2036      	movs	r0, #54	; 0x36
 8007664:	f7f9 f8ba 	bl	80007dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007668:	4a0a      	ldr	r2, [pc, #40]	; (8007694 <HAL_InitTick+0xf0>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	e002      	b.n	8007676 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8007676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800767a:	4618      	mov	r0, r3
 800767c:	3738      	adds	r7, #56	; 0x38
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40021000 	.word	0x40021000
 8007688:	431bde83 	.word	0x431bde83
 800768c:	200033dc 	.word	0x200033dc
 8007690:	40001000 	.word	0x40001000
 8007694:	20000000 	.word	0x20000000

08007698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800769c:	e7fe      	b.n	800769c <NMI_Handler+0x4>

0800769e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800769e:	b480      	push	{r7}
 80076a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076a2:	e7fe      	b.n	80076a2 <HardFault_Handler+0x4>

080076a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076a8:	e7fe      	b.n	80076a8 <MemManage_Handler+0x4>

080076aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076ae:	e7fe      	b.n	80076ae <BusFault_Handler+0x4>

080076b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076b4:	e7fe      	b.n	80076b4 <UsageFault_Handler+0x4>

080076b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80076c8:	4802      	ldr	r0, [pc, #8]	; (80076d4 <DMA1_Channel1_IRQHandler+0x10>)
 80076ca:	f7f9 ffaa 	bl	8001622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80076ce:	bf00      	nop
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	2000102c 	.word	0x2000102c

080076d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80076dc:	4802      	ldr	r0, [pc, #8]	; (80076e8 <DMA1_Channel2_IRQHandler+0x10>)
 80076de:	f7f9 ffa0 	bl	8001622 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20001118 	.word	0x20001118

080076ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80076f0:	4802      	ldr	r0, [pc, #8]	; (80076fc <TIM2_IRQHandler+0x10>)
 80076f2:	f7fc f995 	bl	8003a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200011cc 	.word	0x200011cc

08007700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_Pin);
 8007704:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007708:	f7fa fa9e 	bl	8001c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800770c:	bf00      	nop
 800770e:	bd80      	pop	{r7, pc}

08007710 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007714:	4803      	ldr	r0, [pc, #12]	; (8007724 <TIM6_DAC_IRQHandler+0x14>)
 8007716:	f7fc f983 	bl	8003a20 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800771a:	4803      	ldr	r0, [pc, #12]	; (8007728 <TIM6_DAC_IRQHandler+0x18>)
 800771c:	f7f9 f8aa 	bl	8000874 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007720:	bf00      	nop
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200033dc 	.word	0x200033dc
 8007728:	20001018 	.word	0x20001018

0800772c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
	return 1;
 8007730:	2301      	movs	r3, #1
}
 8007732:	4618      	mov	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <_kill>:

int _kill(int pid, int sig)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007746:	f000 f8f3 	bl	8007930 <__errno>
 800774a:	4603      	mov	r3, r0
 800774c:	2216      	movs	r2, #22
 800774e:	601a      	str	r2, [r3, #0]
	return -1;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <_exit>:

void _exit (int status)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007764:	f04f 31ff 	mov.w	r1, #4294967295
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ffe7 	bl	800773c <_kill>
	while (1) {}		/* Make sure we hang here */
 800776e:	e7fe      	b.n	800776e <_exit+0x12>

08007770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e00a      	b.n	8007798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007782:	f3af 8000 	nop.w
 8007786:	4601      	mov	r1, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	60ba      	str	r2, [r7, #8]
 800778e:	b2ca      	uxtb	r2, r1
 8007790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	3301      	adds	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	429a      	cmp	r2, r3
 800779e:	dbf0      	blt.n	8007782 <_read+0x12>
	}

return len;
 80077a0:	687b      	ldr	r3, [r7, #4]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b086      	sub	sp, #24
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e009      	b.n	80077d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	60ba      	str	r2, [r7, #8]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	dbf1      	blt.n	80077bc <_write+0x12>
	}
	return len;
 80077d8:	687b      	ldr	r3, [r7, #4]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <_close>:

int _close(int file)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
	return -1;
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800780a:	605a      	str	r2, [r3, #4]
	return 0;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <_isatty>:

int _isatty(int file)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
	return 1;
 8007822:	2301      	movs	r3, #1
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
	return 0;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007854:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <_sbrk+0x5c>)
 8007856:	4b15      	ldr	r3, [pc, #84]	; (80078ac <_sbrk+0x60>)
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007860:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <_sbrk+0x64>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <_sbrk+0x64>)
 800786a:	4a12      	ldr	r2, [pc, #72]	; (80078b4 <_sbrk+0x68>)
 800786c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <_sbrk+0x64>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	d207      	bcs.n	800788c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800787c:	f000 f858 	bl	8007930 <__errno>
 8007880:	4603      	mov	r3, r0
 8007882:	220c      	movs	r2, #12
 8007884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007886:	f04f 33ff 	mov.w	r3, #4294967295
 800788a:	e009      	b.n	80078a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <_sbrk+0x64>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007892:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <_sbrk+0x64>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	4a05      	ldr	r2, [pc, #20]	; (80078b0 <_sbrk+0x64>)
 800789c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200a0000 	.word	0x200a0000
 80078ac:	00000400 	.word	0x00000400
 80078b0:	20003428 	.word	0x20003428
 80078b4:	20003440 	.word	0x20003440

080078b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <SystemInit+0x20>)
 80078be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c2:	4a05      	ldr	r2, [pc, #20]	; (80078d8 <SystemInit+0x20>)
 80078c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80078cc:	bf00      	nop
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	e000ed00 	.word	0xe000ed00

080078dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80078dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80078e0:	f7ff ffea 	bl	80078b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078e4:	480c      	ldr	r0, [pc, #48]	; (8007918 <LoopForever+0x6>)
  ldr r1, =_edata
 80078e6:	490d      	ldr	r1, [pc, #52]	; (800791c <LoopForever+0xa>)
  ldr r2, =_sidata
 80078e8:	4a0d      	ldr	r2, [pc, #52]	; (8007920 <LoopForever+0xe>)
  movs r3, #0
 80078ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078ec:	e002      	b.n	80078f4 <LoopCopyDataInit>

080078ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078f2:	3304      	adds	r3, #4

080078f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078f8:	d3f9      	bcc.n	80078ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078fa:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80078fc:	4c0a      	ldr	r4, [pc, #40]	; (8007928 <LoopForever+0x16>)
  movs r3, #0
 80078fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007900:	e001      	b.n	8007906 <LoopFillZerobss>

08007902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007904:	3204      	adds	r2, #4

08007906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007908:	d3fb      	bcc.n	8007902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800790a:	f000 f817 	bl	800793c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800790e:	f7fe fd77 	bl	8006400 <main>

08007912 <LoopForever>:

LoopForever:
    b LoopForever
 8007912:	e7fe      	b.n	8007912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007914:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8007918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800791c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8007920:	08009128 	.word	0x08009128
  ldr r2, =_sbss
 8007924:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8007928:	2000343c 	.word	0x2000343c

0800792c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800792c:	e7fe      	b.n	800792c <ADC1_IRQHandler>
	...

08007930 <__errno>:
 8007930:	4b01      	ldr	r3, [pc, #4]	; (8007938 <__errno+0x8>)
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	20000010 	.word	0x20000010

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	; (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	; (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	; (8007980 <__libc_init_array+0x44>)
 8007950:	f001 fa34 	bl	8008dbc <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	08009120 	.word	0x08009120
 8007978:	08009120 	.word	0x08009120
 800797c:	08009120 	.word	0x08009120
 8007980:	08009124 	.word	0x08009124

08007984 <memcpy>:
 8007984:	440a      	add	r2, r1
 8007986:	4291      	cmp	r1, r2
 8007988:	f100 33ff 	add.w	r3, r0, #4294967295
 800798c:	d100      	bne.n	8007990 <memcpy+0xc>
 800798e:	4770      	bx	lr
 8007990:	b510      	push	{r4, lr}
 8007992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799a:	4291      	cmp	r1, r2
 800799c:	d1f9      	bne.n	8007992 <memcpy+0xe>
 800799e:	bd10      	pop	{r4, pc}

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <rand>:
 80079b0:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <rand+0x5c>)
 80079b2:	b510      	push	{r4, lr}
 80079b4:	681c      	ldr	r4, [r3, #0]
 80079b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079b8:	b9b3      	cbnz	r3, 80079e8 <rand+0x38>
 80079ba:	2018      	movs	r0, #24
 80079bc:	f000 f886 	bl	8007acc <malloc>
 80079c0:	63a0      	str	r0, [r4, #56]	; 0x38
 80079c2:	b928      	cbnz	r0, 80079d0 <rand+0x20>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <rand+0x60>)
 80079c8:	4812      	ldr	r0, [pc, #72]	; (8007a14 <rand+0x64>)
 80079ca:	214e      	movs	r1, #78	; 0x4e
 80079cc:	f000 f84e 	bl	8007a6c <__assert_func>
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <rand+0x68>)
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <rand+0x6c>)
 80079d4:	e9c0 2300 	strd	r2, r3, [r0]
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <rand+0x70>)
 80079da:	6083      	str	r3, [r0, #8]
 80079dc:	230b      	movs	r3, #11
 80079de:	8183      	strh	r3, [r0, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	2300      	movs	r3, #0
 80079e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80079e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80079ea:	4a0e      	ldr	r2, [pc, #56]	; (8007a24 <rand+0x74>)
 80079ec:	6920      	ldr	r0, [r4, #16]
 80079ee:	6963      	ldr	r3, [r4, #20]
 80079f0:	490d      	ldr	r1, [pc, #52]	; (8007a28 <rand+0x78>)
 80079f2:	4342      	muls	r2, r0
 80079f4:	fb01 2203 	mla	r2, r1, r3, r2
 80079f8:	fba0 0101 	umull	r0, r1, r0, r1
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	eb42 0001 	adc.w	r0, r2, r1
 8007a02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007a06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007a0a:	bd10      	pop	{r4, pc}
 8007a0c:	20000010 	.word	0x20000010
 8007a10:	08008fd4 	.word	0x08008fd4
 8007a14:	08008feb 	.word	0x08008feb
 8007a18:	abcd330e 	.word	0xabcd330e
 8007a1c:	e66d1234 	.word	0xe66d1234
 8007a20:	0005deec 	.word	0x0005deec
 8007a24:	5851f42d 	.word	0x5851f42d
 8007a28:	4c957f2d 	.word	0x4c957f2d

08007a2c <siprintf>:
 8007a2c:	b40e      	push	{r1, r2, r3}
 8007a2e:	b500      	push	{lr}
 8007a30:	b09c      	sub	sp, #112	; 0x70
 8007a32:	ab1d      	add	r3, sp, #116	; 0x74
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	9006      	str	r0, [sp, #24]
 8007a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a3c:	4809      	ldr	r0, [pc, #36]	; (8007a64 <siprintf+0x38>)
 8007a3e:	9107      	str	r1, [sp, #28]
 8007a40:	9104      	str	r1, [sp, #16]
 8007a42:	4909      	ldr	r1, [pc, #36]	; (8007a68 <siprintf+0x3c>)
 8007a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a48:	9105      	str	r1, [sp, #20]
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	a902      	add	r1, sp, #8
 8007a50:	f000 f980 	bl	8007d54 <_svfiprintf_r>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	b01c      	add	sp, #112	; 0x70
 8007a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a60:	b003      	add	sp, #12
 8007a62:	4770      	bx	lr
 8007a64:	20000010 	.word	0x20000010
 8007a68:	ffff0208 	.word	0xffff0208

08007a6c <__assert_func>:
 8007a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a6e:	4614      	mov	r4, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <__assert_func+0x2c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4605      	mov	r5, r0
 8007a78:	68d8      	ldr	r0, [r3, #12]
 8007a7a:	b14c      	cbz	r4, 8007a90 <__assert_func+0x24>
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <__assert_func+0x30>)
 8007a7e:	9100      	str	r1, [sp, #0]
 8007a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a84:	4906      	ldr	r1, [pc, #24]	; (8007aa0 <__assert_func+0x34>)
 8007a86:	462b      	mov	r3, r5
 8007a88:	f000 f80e 	bl	8007aa8 <fiprintf>
 8007a8c:	f000 fe20 	bl	80086d0 <abort>
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <__assert_func+0x38>)
 8007a92:	461c      	mov	r4, r3
 8007a94:	e7f3      	b.n	8007a7e <__assert_func+0x12>
 8007a96:	bf00      	nop
 8007a98:	20000010 	.word	0x20000010
 8007a9c:	08009046 	.word	0x08009046
 8007aa0:	08009053 	.word	0x08009053
 8007aa4:	08009081 	.word	0x08009081

08007aa8 <fiprintf>:
 8007aa8:	b40e      	push	{r1, r2, r3}
 8007aaa:	b503      	push	{r0, r1, lr}
 8007aac:	4601      	mov	r1, r0
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	4805      	ldr	r0, [pc, #20]	; (8007ac8 <fiprintf+0x20>)
 8007ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab6:	6800      	ldr	r0, [r0, #0]
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	f000 fa75 	bl	8007fa8 <_vfiprintf_r>
 8007abe:	b002      	add	sp, #8
 8007ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac4:	b003      	add	sp, #12
 8007ac6:	4770      	bx	lr
 8007ac8:	20000010 	.word	0x20000010

08007acc <malloc>:
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <malloc+0xc>)
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f000 b86f 	b.w	8007bb4 <_malloc_r>
 8007ad6:	bf00      	nop
 8007ad8:	20000010 	.word	0x20000010

08007adc <_free_r>:
 8007adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d044      	beq.n	8007b6c <_free_r+0x90>
 8007ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae6:	9001      	str	r0, [sp, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f1a1 0404 	sub.w	r4, r1, #4
 8007aee:	bfb8      	it	lt
 8007af0:	18e4      	addlt	r4, r4, r3
 8007af2:	f001 f82f 	bl	8008b54 <__malloc_lock>
 8007af6:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <_free_r+0x94>)
 8007af8:	9801      	ldr	r0, [sp, #4]
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	b933      	cbnz	r3, 8007b0c <_free_r+0x30>
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6014      	str	r4, [r2, #0]
 8007b02:	b003      	add	sp, #12
 8007b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b08:	f001 b82a 	b.w	8008b60 <__malloc_unlock>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d908      	bls.n	8007b22 <_free_r+0x46>
 8007b10:	6825      	ldr	r5, [r4, #0]
 8007b12:	1961      	adds	r1, r4, r5
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1949      	addeq	r1, r1, r5
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	e7ed      	b.n	8007afe <_free_r+0x22>
 8007b22:	461a      	mov	r2, r3
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <_free_r+0x50>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d9fa      	bls.n	8007b22 <_free_r+0x46>
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	1855      	adds	r5, r2, r1
 8007b30:	42a5      	cmp	r5, r4
 8007b32:	d10b      	bne.n	8007b4c <_free_r+0x70>
 8007b34:	6824      	ldr	r4, [r4, #0]
 8007b36:	4421      	add	r1, r4
 8007b38:	1854      	adds	r4, r2, r1
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	d1e0      	bne.n	8007b02 <_free_r+0x26>
 8007b40:	681c      	ldr	r4, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	6053      	str	r3, [r2, #4]
 8007b46:	4421      	add	r1, r4
 8007b48:	6011      	str	r1, [r2, #0]
 8007b4a:	e7da      	b.n	8007b02 <_free_r+0x26>
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x78>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	e7d6      	b.n	8007b02 <_free_r+0x26>
 8007b54:	6825      	ldr	r5, [r4, #0]
 8007b56:	1961      	adds	r1, r4, r5
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf04      	itt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	bf04      	itt	eq
 8007b64:	1949      	addeq	r1, r1, r5
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	6054      	str	r4, [r2, #4]
 8007b6a:	e7ca      	b.n	8007b02 <_free_r+0x26>
 8007b6c:	b003      	add	sp, #12
 8007b6e:	bd30      	pop	{r4, r5, pc}
 8007b70:	2000342c 	.word	0x2000342c

08007b74 <sbrk_aligned>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4e0e      	ldr	r6, [pc, #56]	; (8007bb0 <sbrk_aligned+0x3c>)
 8007b78:	460c      	mov	r4, r1
 8007b7a:	6831      	ldr	r1, [r6, #0]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b911      	cbnz	r1, 8007b86 <sbrk_aligned+0x12>
 8007b80:	f000 fcd6 	bl	8008530 <_sbrk_r>
 8007b84:	6030      	str	r0, [r6, #0]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fcd1 	bl	8008530 <_sbrk_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d00a      	beq.n	8007ba8 <sbrk_aligned+0x34>
 8007b92:	1cc4      	adds	r4, r0, #3
 8007b94:	f024 0403 	bic.w	r4, r4, #3
 8007b98:	42a0      	cmp	r0, r4
 8007b9a:	d007      	beq.n	8007bac <sbrk_aligned+0x38>
 8007b9c:	1a21      	subs	r1, r4, r0
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 fcc6 	bl	8008530 <_sbrk_r>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d101      	bne.n	8007bac <sbrk_aligned+0x38>
 8007ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bac:	4620      	mov	r0, r4
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	20003430 	.word	0x20003430

08007bb4 <_malloc_r>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	1ccd      	adds	r5, r1, #3
 8007bba:	f025 0503 	bic.w	r5, r5, #3
 8007bbe:	3508      	adds	r5, #8
 8007bc0:	2d0c      	cmp	r5, #12
 8007bc2:	bf38      	it	cc
 8007bc4:	250c      	movcc	r5, #12
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	db01      	blt.n	8007bd0 <_malloc_r+0x1c>
 8007bcc:	42a9      	cmp	r1, r5
 8007bce:	d905      	bls.n	8007bdc <_malloc_r+0x28>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	4e2e      	ldr	r6, [pc, #184]	; (8007c98 <_malloc_r+0xe4>)
 8007bde:	f000 ffb9 	bl	8008b54 <__malloc_lock>
 8007be2:	6833      	ldr	r3, [r6, #0]
 8007be4:	461c      	mov	r4, r3
 8007be6:	bb34      	cbnz	r4, 8007c36 <_malloc_r+0x82>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4638      	mov	r0, r7
 8007bec:	f7ff ffc2 	bl	8007b74 <sbrk_aligned>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	d14d      	bne.n	8007c92 <_malloc_r+0xde>
 8007bf6:	6834      	ldr	r4, [r6, #0]
 8007bf8:	4626      	mov	r6, r4
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d140      	bne.n	8007c80 <_malloc_r+0xcc>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	4631      	mov	r1, r6
 8007c02:	4638      	mov	r0, r7
 8007c04:	eb04 0803 	add.w	r8, r4, r3
 8007c08:	f000 fc92 	bl	8008530 <_sbrk_r>
 8007c0c:	4580      	cmp	r8, r0
 8007c0e:	d13a      	bne.n	8007c86 <_malloc_r+0xd2>
 8007c10:	6821      	ldr	r1, [r4, #0]
 8007c12:	3503      	adds	r5, #3
 8007c14:	1a6d      	subs	r5, r5, r1
 8007c16:	f025 0503 	bic.w	r5, r5, #3
 8007c1a:	3508      	adds	r5, #8
 8007c1c:	2d0c      	cmp	r5, #12
 8007c1e:	bf38      	it	cc
 8007c20:	250c      	movcc	r5, #12
 8007c22:	4629      	mov	r1, r5
 8007c24:	4638      	mov	r0, r7
 8007c26:	f7ff ffa5 	bl	8007b74 <sbrk_aligned>
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d02b      	beq.n	8007c86 <_malloc_r+0xd2>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	442b      	add	r3, r5
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	e00e      	b.n	8007c54 <_malloc_r+0xa0>
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	1b52      	subs	r2, r2, r5
 8007c3a:	d41e      	bmi.n	8007c7a <_malloc_r+0xc6>
 8007c3c:	2a0b      	cmp	r2, #11
 8007c3e:	d916      	bls.n	8007c6e <_malloc_r+0xba>
 8007c40:	1961      	adds	r1, r4, r5
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	6025      	str	r5, [r4, #0]
 8007c46:	bf18      	it	ne
 8007c48:	6059      	strne	r1, [r3, #4]
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	bf08      	it	eq
 8007c4e:	6031      	streq	r1, [r6, #0]
 8007c50:	5162      	str	r2, [r4, r5]
 8007c52:	604b      	str	r3, [r1, #4]
 8007c54:	4638      	mov	r0, r7
 8007c56:	f104 060b 	add.w	r6, r4, #11
 8007c5a:	f000 ff81 	bl	8008b60 <__malloc_unlock>
 8007c5e:	f026 0607 	bic.w	r6, r6, #7
 8007c62:	1d23      	adds	r3, r4, #4
 8007c64:	1af2      	subs	r2, r6, r3
 8007c66:	d0b6      	beq.n	8007bd6 <_malloc_r+0x22>
 8007c68:	1b9b      	subs	r3, r3, r6
 8007c6a:	50a3      	str	r3, [r4, r2]
 8007c6c:	e7b3      	b.n	8007bd6 <_malloc_r+0x22>
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	bf0c      	ite	eq
 8007c74:	6032      	streq	r2, [r6, #0]
 8007c76:	605a      	strne	r2, [r3, #4]
 8007c78:	e7ec      	b.n	8007c54 <_malloc_r+0xa0>
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	6864      	ldr	r4, [r4, #4]
 8007c7e:	e7b2      	b.n	8007be6 <_malloc_r+0x32>
 8007c80:	4634      	mov	r4, r6
 8007c82:	6876      	ldr	r6, [r6, #4]
 8007c84:	e7b9      	b.n	8007bfa <_malloc_r+0x46>
 8007c86:	230c      	movs	r3, #12
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f000 ff68 	bl	8008b60 <__malloc_unlock>
 8007c90:	e7a1      	b.n	8007bd6 <_malloc_r+0x22>
 8007c92:	6025      	str	r5, [r4, #0]
 8007c94:	e7de      	b.n	8007c54 <_malloc_r+0xa0>
 8007c96:	bf00      	nop
 8007c98:	2000342c 	.word	0x2000342c

08007c9c <__ssputs_r>:
 8007c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	688e      	ldr	r6, [r1, #8]
 8007ca2:	429e      	cmp	r6, r3
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	4690      	mov	r8, r2
 8007caa:	461f      	mov	r7, r3
 8007cac:	d838      	bhi.n	8007d20 <__ssputs_r+0x84>
 8007cae:	898a      	ldrh	r2, [r1, #12]
 8007cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cb4:	d032      	beq.n	8007d1c <__ssputs_r+0x80>
 8007cb6:	6825      	ldr	r5, [r4, #0]
 8007cb8:	6909      	ldr	r1, [r1, #16]
 8007cba:	eba5 0901 	sub.w	r9, r5, r1
 8007cbe:	6965      	ldr	r5, [r4, #20]
 8007cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc8:	3301      	adds	r3, #1
 8007cca:	444b      	add	r3, r9
 8007ccc:	106d      	asrs	r5, r5, #1
 8007cce:	429d      	cmp	r5, r3
 8007cd0:	bf38      	it	cc
 8007cd2:	461d      	movcc	r5, r3
 8007cd4:	0553      	lsls	r3, r2, #21
 8007cd6:	d531      	bpl.n	8007d3c <__ssputs_r+0xa0>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7ff ff6b 	bl	8007bb4 <_malloc_r>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	b950      	cbnz	r0, 8007cf8 <__ssputs_r+0x5c>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	f8ca 3000 	str.w	r3, [sl]
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf8:	6921      	ldr	r1, [r4, #16]
 8007cfa:	464a      	mov	r2, r9
 8007cfc:	f7ff fe42 	bl	8007984 <memcpy>
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	6126      	str	r6, [r4, #16]
 8007d0e:	6165      	str	r5, [r4, #20]
 8007d10:	444e      	add	r6, r9
 8007d12:	eba5 0509 	sub.w	r5, r5, r9
 8007d16:	6026      	str	r6, [r4, #0]
 8007d18:	60a5      	str	r5, [r4, #8]
 8007d1a:	463e      	mov	r6, r7
 8007d1c:	42be      	cmp	r6, r7
 8007d1e:	d900      	bls.n	8007d22 <__ssputs_r+0x86>
 8007d20:	463e      	mov	r6, r7
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	4632      	mov	r2, r6
 8007d26:	4641      	mov	r1, r8
 8007d28:	f000 fefa 	bl	8008b20 <memmove>
 8007d2c:	68a3      	ldr	r3, [r4, #8]
 8007d2e:	1b9b      	subs	r3, r3, r6
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	4433      	add	r3, r6
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e7db      	b.n	8007cf4 <__ssputs_r+0x58>
 8007d3c:	462a      	mov	r2, r5
 8007d3e:	f000 ff15 	bl	8008b6c <_realloc_r>
 8007d42:	4606      	mov	r6, r0
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1e1      	bne.n	8007d0c <__ssputs_r+0x70>
 8007d48:	6921      	ldr	r1, [r4, #16]
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	f7ff fec6 	bl	8007adc <_free_r>
 8007d50:	e7c7      	b.n	8007ce2 <__ssputs_r+0x46>
	...

08007d54 <_svfiprintf_r>:
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	4698      	mov	r8, r3
 8007d5a:	898b      	ldrh	r3, [r1, #12]
 8007d5c:	061b      	lsls	r3, r3, #24
 8007d5e:	b09d      	sub	sp, #116	; 0x74
 8007d60:	4607      	mov	r7, r0
 8007d62:	460d      	mov	r5, r1
 8007d64:	4614      	mov	r4, r2
 8007d66:	d50e      	bpl.n	8007d86 <_svfiprintf_r+0x32>
 8007d68:	690b      	ldr	r3, [r1, #16]
 8007d6a:	b963      	cbnz	r3, 8007d86 <_svfiprintf_r+0x32>
 8007d6c:	2140      	movs	r1, #64	; 0x40
 8007d6e:	f7ff ff21 	bl	8007bb4 <_malloc_r>
 8007d72:	6028      	str	r0, [r5, #0]
 8007d74:	6128      	str	r0, [r5, #16]
 8007d76:	b920      	cbnz	r0, 8007d82 <_svfiprintf_r+0x2e>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e0d1      	b.n	8007f26 <_svfiprintf_r+0x1d2>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	616b      	str	r3, [r5, #20]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8a:	2320      	movs	r3, #32
 8007d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d94:	2330      	movs	r3, #48	; 0x30
 8007d96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f40 <_svfiprintf_r+0x1ec>
 8007d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d9e:	f04f 0901 	mov.w	r9, #1
 8007da2:	4623      	mov	r3, r4
 8007da4:	469a      	mov	sl, r3
 8007da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007daa:	b10a      	cbz	r2, 8007db0 <_svfiprintf_r+0x5c>
 8007dac:	2a25      	cmp	r2, #37	; 0x25
 8007dae:	d1f9      	bne.n	8007da4 <_svfiprintf_r+0x50>
 8007db0:	ebba 0b04 	subs.w	fp, sl, r4
 8007db4:	d00b      	beq.n	8007dce <_svfiprintf_r+0x7a>
 8007db6:	465b      	mov	r3, fp
 8007db8:	4622      	mov	r2, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff ff6d 	bl	8007c9c <__ssputs_r>
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f000 80aa 	beq.w	8007f1c <_svfiprintf_r+0x1c8>
 8007dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dca:	445a      	add	r2, fp
 8007dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dce:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80a2 	beq.w	8007f1c <_svfiprintf_r+0x1c8>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de2:	f10a 0a01 	add.w	sl, sl, #1
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dee:	931a      	str	r3, [sp, #104]	; 0x68
 8007df0:	4654      	mov	r4, sl
 8007df2:	2205      	movs	r2, #5
 8007df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df8:	4851      	ldr	r0, [pc, #324]	; (8007f40 <_svfiprintf_r+0x1ec>)
 8007dfa:	f7f8 fa09 	bl	8000210 <memchr>
 8007dfe:	9a04      	ldr	r2, [sp, #16]
 8007e00:	b9d8      	cbnz	r0, 8007e3a <_svfiprintf_r+0xe6>
 8007e02:	06d0      	lsls	r0, r2, #27
 8007e04:	bf44      	itt	mi
 8007e06:	2320      	movmi	r3, #32
 8007e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0c:	0711      	lsls	r1, r2, #28
 8007e0e:	bf44      	itt	mi
 8007e10:	232b      	movmi	r3, #43	; 0x2b
 8007e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e16:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d015      	beq.n	8007e4a <_svfiprintf_r+0xf6>
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	4654      	mov	r4, sl
 8007e22:	2000      	movs	r0, #0
 8007e24:	f04f 0c0a 	mov.w	ip, #10
 8007e28:	4621      	mov	r1, r4
 8007e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2e:	3b30      	subs	r3, #48	; 0x30
 8007e30:	2b09      	cmp	r3, #9
 8007e32:	d94e      	bls.n	8007ed2 <_svfiprintf_r+0x17e>
 8007e34:	b1b0      	cbz	r0, 8007e64 <_svfiprintf_r+0x110>
 8007e36:	9207      	str	r2, [sp, #28]
 8007e38:	e014      	b.n	8007e64 <_svfiprintf_r+0x110>
 8007e3a:	eba0 0308 	sub.w	r3, r0, r8
 8007e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	46a2      	mov	sl, r4
 8007e48:	e7d2      	b.n	8007df0 <_svfiprintf_r+0x9c>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	1d19      	adds	r1, r3, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	9103      	str	r1, [sp, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bfbb      	ittet	lt
 8007e56:	425b      	neglt	r3, r3
 8007e58:	f042 0202 	orrlt.w	r2, r2, #2
 8007e5c:	9307      	strge	r3, [sp, #28]
 8007e5e:	9307      	strlt	r3, [sp, #28]
 8007e60:	bfb8      	it	lt
 8007e62:	9204      	strlt	r2, [sp, #16]
 8007e64:	7823      	ldrb	r3, [r4, #0]
 8007e66:	2b2e      	cmp	r3, #46	; 0x2e
 8007e68:	d10c      	bne.n	8007e84 <_svfiprintf_r+0x130>
 8007e6a:	7863      	ldrb	r3, [r4, #1]
 8007e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6e:	d135      	bne.n	8007edc <_svfiprintf_r+0x188>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9203      	str	r2, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e80:	3402      	adds	r4, #2
 8007e82:	9305      	str	r3, [sp, #20]
 8007e84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f50 <_svfiprintf_r+0x1fc>
 8007e88:	7821      	ldrb	r1, [r4, #0]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	f7f8 f9bf 	bl	8000210 <memchr>
 8007e92:	b140      	cbz	r0, 8007ea6 <_svfiprintf_r+0x152>
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	eba0 000a 	sub.w	r0, r0, sl
 8007e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e9e:	9b04      	ldr	r3, [sp, #16]
 8007ea0:	4303      	orrs	r3, r0
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eaa:	4826      	ldr	r0, [pc, #152]	; (8007f44 <_svfiprintf_r+0x1f0>)
 8007eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb0:	2206      	movs	r2, #6
 8007eb2:	f7f8 f9ad 	bl	8000210 <memchr>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d038      	beq.n	8007f2c <_svfiprintf_r+0x1d8>
 8007eba:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <_svfiprintf_r+0x1f4>)
 8007ebc:	bb1b      	cbnz	r3, 8007f06 <_svfiprintf_r+0x1b2>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	3307      	adds	r3, #7
 8007ec2:	f023 0307 	bic.w	r3, r3, #7
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ecc:	4433      	add	r3, r6
 8007ece:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed0:	e767      	b.n	8007da2 <_svfiprintf_r+0x4e>
 8007ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	2001      	movs	r0, #1
 8007eda:	e7a5      	b.n	8007e28 <_svfiprintf_r+0xd4>
 8007edc:	2300      	movs	r3, #0
 8007ede:	3401      	adds	r4, #1
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f04f 0c0a 	mov.w	ip, #10
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eee:	3a30      	subs	r2, #48	; 0x30
 8007ef0:	2a09      	cmp	r2, #9
 8007ef2:	d903      	bls.n	8007efc <_svfiprintf_r+0x1a8>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0c5      	beq.n	8007e84 <_svfiprintf_r+0x130>
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	e7c3      	b.n	8007e84 <_svfiprintf_r+0x130>
 8007efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f00:	4604      	mov	r4, r0
 8007f02:	2301      	movs	r3, #1
 8007f04:	e7f0      	b.n	8007ee8 <_svfiprintf_r+0x194>
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <_svfiprintf_r+0x1f8>)
 8007f0e:	a904      	add	r1, sp, #16
 8007f10:	4638      	mov	r0, r7
 8007f12:	f3af 8000 	nop.w
 8007f16:	1c42      	adds	r2, r0, #1
 8007f18:	4606      	mov	r6, r0
 8007f1a:	d1d6      	bne.n	8007eca <_svfiprintf_r+0x176>
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	065b      	lsls	r3, r3, #25
 8007f20:	f53f af2c 	bmi.w	8007d7c <_svfiprintf_r+0x28>
 8007f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f26:	b01d      	add	sp, #116	; 0x74
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	ab03      	add	r3, sp, #12
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	462a      	mov	r2, r5
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <_svfiprintf_r+0x1f8>)
 8007f34:	a904      	add	r1, sp, #16
 8007f36:	4638      	mov	r0, r7
 8007f38:	f000 f9d4 	bl	80082e4 <_printf_i>
 8007f3c:	e7eb      	b.n	8007f16 <_svfiprintf_r+0x1c2>
 8007f3e:	bf00      	nop
 8007f40:	08009082 	.word	0x08009082
 8007f44:	0800908c 	.word	0x0800908c
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	08007c9d 	.word	0x08007c9d
 8007f50:	08009088 	.word	0x08009088

08007f54 <__sfputc_r>:
 8007f54:	6893      	ldr	r3, [r2, #8]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	b410      	push	{r4}
 8007f5c:	6093      	str	r3, [r2, #8]
 8007f5e:	da08      	bge.n	8007f72 <__sfputc_r+0x1e>
 8007f60:	6994      	ldr	r4, [r2, #24]
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	db01      	blt.n	8007f6a <__sfputc_r+0x16>
 8007f66:	290a      	cmp	r1, #10
 8007f68:	d103      	bne.n	8007f72 <__sfputc_r+0x1e>
 8007f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f6e:	f000 baef 	b.w	8008550 <__swbuf_r>
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	1c58      	adds	r0, r3, #1
 8007f76:	6010      	str	r0, [r2, #0]
 8007f78:	7019      	strb	r1, [r3, #0]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <__sfputs_r>:
 8007f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f84:	4606      	mov	r6, r0
 8007f86:	460f      	mov	r7, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	18d5      	adds	r5, r2, r3
 8007f8c:	42ac      	cmp	r4, r5
 8007f8e:	d101      	bne.n	8007f94 <__sfputs_r+0x12>
 8007f90:	2000      	movs	r0, #0
 8007f92:	e007      	b.n	8007fa4 <__sfputs_r+0x22>
 8007f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f98:	463a      	mov	r2, r7
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ffda 	bl	8007f54 <__sfputc_r>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d1f3      	bne.n	8007f8c <__sfputs_r+0xa>
 8007fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fa8 <_vfiprintf_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	460d      	mov	r5, r1
 8007fae:	b09d      	sub	sp, #116	; 0x74
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	4698      	mov	r8, r3
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	b118      	cbz	r0, 8007fc0 <_vfiprintf_r+0x18>
 8007fb8:	6983      	ldr	r3, [r0, #24]
 8007fba:	b90b      	cbnz	r3, 8007fc0 <_vfiprintf_r+0x18>
 8007fbc:	f000 fcaa 	bl	8008914 <__sinit>
 8007fc0:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <_vfiprintf_r+0x240>)
 8007fc2:	429d      	cmp	r5, r3
 8007fc4:	d11b      	bne.n	8007ffe <_vfiprintf_r+0x56>
 8007fc6:	6875      	ldr	r5, [r6, #4]
 8007fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fca:	07d9      	lsls	r1, r3, #31
 8007fcc:	d405      	bmi.n	8007fda <_vfiprintf_r+0x32>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	059a      	lsls	r2, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_vfiprintf_r+0x32>
 8007fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd6:	f000 fd3b 	bl	8008a50 <__retarget_lock_acquire_recursive>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	071b      	lsls	r3, r3, #28
 8007fde:	d501      	bpl.n	8007fe4 <_vfiprintf_r+0x3c>
 8007fe0:	692b      	ldr	r3, [r5, #16]
 8007fe2:	b9eb      	cbnz	r3, 8008020 <_vfiprintf_r+0x78>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f000 fb04 	bl	80085f4 <__swsetup_r>
 8007fec:	b1c0      	cbz	r0, 8008020 <_vfiprintf_r+0x78>
 8007fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ff0:	07dc      	lsls	r4, r3, #31
 8007ff2:	d50e      	bpl.n	8008012 <_vfiprintf_r+0x6a>
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	b01d      	add	sp, #116	; 0x74
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	4b7b      	ldr	r3, [pc, #492]	; (80081ec <_vfiprintf_r+0x244>)
 8008000:	429d      	cmp	r5, r3
 8008002:	d101      	bne.n	8008008 <_vfiprintf_r+0x60>
 8008004:	68b5      	ldr	r5, [r6, #8]
 8008006:	e7df      	b.n	8007fc8 <_vfiprintf_r+0x20>
 8008008:	4b79      	ldr	r3, [pc, #484]	; (80081f0 <_vfiprintf_r+0x248>)
 800800a:	429d      	cmp	r5, r3
 800800c:	bf08      	it	eq
 800800e:	68f5      	ldreq	r5, [r6, #12]
 8008010:	e7da      	b.n	8007fc8 <_vfiprintf_r+0x20>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	0598      	lsls	r0, r3, #22
 8008016:	d4ed      	bmi.n	8007ff4 <_vfiprintf_r+0x4c>
 8008018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800801a:	f000 fd1a 	bl	8008a52 <__retarget_lock_release_recursive>
 800801e:	e7e9      	b.n	8007ff4 <_vfiprintf_r+0x4c>
 8008020:	2300      	movs	r3, #0
 8008022:	9309      	str	r3, [sp, #36]	; 0x24
 8008024:	2320      	movs	r3, #32
 8008026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800802a:	f8cd 800c 	str.w	r8, [sp, #12]
 800802e:	2330      	movs	r3, #48	; 0x30
 8008030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081f4 <_vfiprintf_r+0x24c>
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008038:	f04f 0901 	mov.w	r9, #1
 800803c:	4623      	mov	r3, r4
 800803e:	469a      	mov	sl, r3
 8008040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008044:	b10a      	cbz	r2, 800804a <_vfiprintf_r+0xa2>
 8008046:	2a25      	cmp	r2, #37	; 0x25
 8008048:	d1f9      	bne.n	800803e <_vfiprintf_r+0x96>
 800804a:	ebba 0b04 	subs.w	fp, sl, r4
 800804e:	d00b      	beq.n	8008068 <_vfiprintf_r+0xc0>
 8008050:	465b      	mov	r3, fp
 8008052:	4622      	mov	r2, r4
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff ff93 	bl	8007f82 <__sfputs_r>
 800805c:	3001      	adds	r0, #1
 800805e:	f000 80aa 	beq.w	80081b6 <_vfiprintf_r+0x20e>
 8008062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008064:	445a      	add	r2, fp
 8008066:	9209      	str	r2, [sp, #36]	; 0x24
 8008068:	f89a 3000 	ldrb.w	r3, [sl]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80a2 	beq.w	80081b6 <_vfiprintf_r+0x20e>
 8008072:	2300      	movs	r3, #0
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800807c:	f10a 0a01 	add.w	sl, sl, #1
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008088:	931a      	str	r3, [sp, #104]	; 0x68
 800808a:	4654      	mov	r4, sl
 800808c:	2205      	movs	r2, #5
 800808e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008092:	4858      	ldr	r0, [pc, #352]	; (80081f4 <_vfiprintf_r+0x24c>)
 8008094:	f7f8 f8bc 	bl	8000210 <memchr>
 8008098:	9a04      	ldr	r2, [sp, #16]
 800809a:	b9d8      	cbnz	r0, 80080d4 <_vfiprintf_r+0x12c>
 800809c:	06d1      	lsls	r1, r2, #27
 800809e:	bf44      	itt	mi
 80080a0:	2320      	movmi	r3, #32
 80080a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a6:	0713      	lsls	r3, r2, #28
 80080a8:	bf44      	itt	mi
 80080aa:	232b      	movmi	r3, #43	; 0x2b
 80080ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080b0:	f89a 3000 	ldrb.w	r3, [sl]
 80080b4:	2b2a      	cmp	r3, #42	; 0x2a
 80080b6:	d015      	beq.n	80080e4 <_vfiprintf_r+0x13c>
 80080b8:	9a07      	ldr	r2, [sp, #28]
 80080ba:	4654      	mov	r4, sl
 80080bc:	2000      	movs	r0, #0
 80080be:	f04f 0c0a 	mov.w	ip, #10
 80080c2:	4621      	mov	r1, r4
 80080c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c8:	3b30      	subs	r3, #48	; 0x30
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d94e      	bls.n	800816c <_vfiprintf_r+0x1c4>
 80080ce:	b1b0      	cbz	r0, 80080fe <_vfiprintf_r+0x156>
 80080d0:	9207      	str	r2, [sp, #28]
 80080d2:	e014      	b.n	80080fe <_vfiprintf_r+0x156>
 80080d4:	eba0 0308 	sub.w	r3, r0, r8
 80080d8:	fa09 f303 	lsl.w	r3, r9, r3
 80080dc:	4313      	orrs	r3, r2
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	46a2      	mov	sl, r4
 80080e2:	e7d2      	b.n	800808a <_vfiprintf_r+0xe2>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	1d19      	adds	r1, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	9103      	str	r1, [sp, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfbb      	ittet	lt
 80080f0:	425b      	neglt	r3, r3
 80080f2:	f042 0202 	orrlt.w	r2, r2, #2
 80080f6:	9307      	strge	r3, [sp, #28]
 80080f8:	9307      	strlt	r3, [sp, #28]
 80080fa:	bfb8      	it	lt
 80080fc:	9204      	strlt	r2, [sp, #16]
 80080fe:	7823      	ldrb	r3, [r4, #0]
 8008100:	2b2e      	cmp	r3, #46	; 0x2e
 8008102:	d10c      	bne.n	800811e <_vfiprintf_r+0x176>
 8008104:	7863      	ldrb	r3, [r4, #1]
 8008106:	2b2a      	cmp	r3, #42	; 0x2a
 8008108:	d135      	bne.n	8008176 <_vfiprintf_r+0x1ce>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	9203      	str	r2, [sp, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfb8      	it	lt
 8008116:	f04f 33ff 	movlt.w	r3, #4294967295
 800811a:	3402      	adds	r4, #2
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008204 <_vfiprintf_r+0x25c>
 8008122:	7821      	ldrb	r1, [r4, #0]
 8008124:	2203      	movs	r2, #3
 8008126:	4650      	mov	r0, sl
 8008128:	f7f8 f872 	bl	8000210 <memchr>
 800812c:	b140      	cbz	r0, 8008140 <_vfiprintf_r+0x198>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	eba0 000a 	sub.w	r0, r0, sl
 8008134:	fa03 f000 	lsl.w	r0, r3, r0
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	4303      	orrs	r3, r0
 800813c:	3401      	adds	r4, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	482c      	ldr	r0, [pc, #176]	; (80081f8 <_vfiprintf_r+0x250>)
 8008146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800814a:	2206      	movs	r2, #6
 800814c:	f7f8 f860 	bl	8000210 <memchr>
 8008150:	2800      	cmp	r0, #0
 8008152:	d03f      	beq.n	80081d4 <_vfiprintf_r+0x22c>
 8008154:	4b29      	ldr	r3, [pc, #164]	; (80081fc <_vfiprintf_r+0x254>)
 8008156:	bb1b      	cbnz	r3, 80081a0 <_vfiprintf_r+0x1f8>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	3307      	adds	r3, #7
 800815c:	f023 0307 	bic.w	r3, r3, #7
 8008160:	3308      	adds	r3, #8
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008166:	443b      	add	r3, r7
 8008168:	9309      	str	r3, [sp, #36]	; 0x24
 800816a:	e767      	b.n	800803c <_vfiprintf_r+0x94>
 800816c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008170:	460c      	mov	r4, r1
 8008172:	2001      	movs	r0, #1
 8008174:	e7a5      	b.n	80080c2 <_vfiprintf_r+0x11a>
 8008176:	2300      	movs	r3, #0
 8008178:	3401      	adds	r4, #1
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008188:	3a30      	subs	r2, #48	; 0x30
 800818a:	2a09      	cmp	r2, #9
 800818c:	d903      	bls.n	8008196 <_vfiprintf_r+0x1ee>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0c5      	beq.n	800811e <_vfiprintf_r+0x176>
 8008192:	9105      	str	r1, [sp, #20]
 8008194:	e7c3      	b.n	800811e <_vfiprintf_r+0x176>
 8008196:	fb0c 2101 	mla	r1, ip, r1, r2
 800819a:	4604      	mov	r4, r0
 800819c:	2301      	movs	r3, #1
 800819e:	e7f0      	b.n	8008182 <_vfiprintf_r+0x1da>
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	462a      	mov	r2, r5
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <_vfiprintf_r+0x258>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4630      	mov	r0, r6
 80081ac:	f3af 8000 	nop.w
 80081b0:	4607      	mov	r7, r0
 80081b2:	1c78      	adds	r0, r7, #1
 80081b4:	d1d6      	bne.n	8008164 <_vfiprintf_r+0x1bc>
 80081b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b8:	07d9      	lsls	r1, r3, #31
 80081ba:	d405      	bmi.n	80081c8 <_vfiprintf_r+0x220>
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	059a      	lsls	r2, r3, #22
 80081c0:	d402      	bmi.n	80081c8 <_vfiprintf_r+0x220>
 80081c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081c4:	f000 fc45 	bl	8008a52 <__retarget_lock_release_recursive>
 80081c8:	89ab      	ldrh	r3, [r5, #12]
 80081ca:	065b      	lsls	r3, r3, #25
 80081cc:	f53f af12 	bmi.w	8007ff4 <_vfiprintf_r+0x4c>
 80081d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d2:	e711      	b.n	8007ff8 <_vfiprintf_r+0x50>
 80081d4:	ab03      	add	r3, sp, #12
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	462a      	mov	r2, r5
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <_vfiprintf_r+0x258>)
 80081dc:	a904      	add	r1, sp, #16
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 f880 	bl	80082e4 <_printf_i>
 80081e4:	e7e4      	b.n	80081b0 <_vfiprintf_r+0x208>
 80081e6:	bf00      	nop
 80081e8:	080090d8 	.word	0x080090d8
 80081ec:	080090f8 	.word	0x080090f8
 80081f0:	080090b8 	.word	0x080090b8
 80081f4:	08009082 	.word	0x08009082
 80081f8:	0800908c 	.word	0x0800908c
 80081fc:	00000000 	.word	0x00000000
 8008200:	08007f83 	.word	0x08007f83
 8008204:	08009088 	.word	0x08009088

08008208 <_printf_common>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	4616      	mov	r6, r2
 800820e:	4699      	mov	r9, r3
 8008210:	688a      	ldr	r2, [r1, #8]
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008218:	4293      	cmp	r3, r2
 800821a:	bfb8      	it	lt
 800821c:	4613      	movlt	r3, r2
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008224:	4607      	mov	r7, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b10a      	cbz	r2, 800822e <_printf_common+0x26>
 800822a:	3301      	adds	r3, #1
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	6833      	ldrmi	r3, [r6, #0]
 8008236:	3302      	addmi	r3, #2
 8008238:	6033      	strmi	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d106      	bne.n	8008250 <_printf_common+0x48>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	42ab      	cmp	r3, r5
 800824e:	dc26      	bgt.n	800829e <_printf_common+0x96>
 8008250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008254:	1e13      	subs	r3, r2, #0
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	0692      	lsls	r2, r2, #26
 800825e:	d42b      	bmi.n	80082b8 <_printf_common+0xb0>
 8008260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008264:	4649      	mov	r1, r9
 8008266:	4638      	mov	r0, r7
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d01e      	beq.n	80082ac <_printf_common+0xa4>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	68e5      	ldr	r5, [r4, #12]
 8008272:	6832      	ldr	r2, [r6, #0]
 8008274:	f003 0306 	and.w	r3, r3, #6
 8008278:	2b04      	cmp	r3, #4
 800827a:	bf08      	it	eq
 800827c:	1aad      	subeq	r5, r5, r2
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	6922      	ldr	r2, [r4, #16]
 8008282:	bf0c      	ite	eq
 8008284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008288:	2500      	movne	r5, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	bfc4      	itt	gt
 800828e:	1a9b      	subgt	r3, r3, r2
 8008290:	18ed      	addgt	r5, r5, r3
 8008292:	2600      	movs	r6, #0
 8008294:	341a      	adds	r4, #26
 8008296:	42b5      	cmp	r5, r6
 8008298:	d11a      	bne.n	80082d0 <_printf_common+0xc8>
 800829a:	2000      	movs	r0, #0
 800829c:	e008      	b.n	80082b0 <_printf_common+0xa8>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4649      	mov	r1, r9
 80082a4:	4638      	mov	r0, r7
 80082a6:	47c0      	blx	r8
 80082a8:	3001      	adds	r0, #1
 80082aa:	d103      	bne.n	80082b4 <_printf_common+0xac>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	3501      	adds	r5, #1
 80082b6:	e7c6      	b.n	8008246 <_printf_common+0x3e>
 80082b8:	18e1      	adds	r1, r4, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	2030      	movs	r0, #48	; 0x30
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c2:	4422      	add	r2, r4
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082cc:	3302      	adds	r3, #2
 80082ce:	e7c7      	b.n	8008260 <_printf_common+0x58>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4622      	mov	r2, r4
 80082d4:	4649      	mov	r1, r9
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d0e6      	beq.n	80082ac <_printf_common+0xa4>
 80082de:	3601      	adds	r6, #1
 80082e0:	e7d9      	b.n	8008296 <_printf_common+0x8e>
	...

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	7e0f      	ldrb	r7, [r1, #24]
 80082ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ec:	2f78      	cmp	r7, #120	; 0x78
 80082ee:	4691      	mov	r9, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	469a      	mov	sl, r3
 80082f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	; 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d8 	beq.w	80084b6 <_printf_i+0x1d2>
 8008306:	2f58      	cmp	r7, #88	; 0x58
 8008308:	f000 80a3 	beq.w	8008452 <_printf_i+0x16e>
 800830c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a101      	add	r1, pc, #4	; (adr r1, 8008324 <_printf_i+0x40>)
 8008320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	0800849d 	.word	0x0800849d
 8008354:	080083c1 	.word	0x080083c1
 8008358:	0800847f 	.word	0x0800847f
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084bf 	.word	0x080084bf
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008487 	.word	0x08008487
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	602a      	str	r2, [r5, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e0a3      	b.n	80084d8 <_printf_i+0x1f4>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	6829      	ldr	r1, [r5, #0]
 8008394:	0606      	lsls	r6, r0, #24
 8008396:	f101 0304 	add.w	r3, r1, #4
 800839a:	d50a      	bpl.n	80083b2 <_printf_i+0xce>
 800839c:	680e      	ldr	r6, [r1, #0]
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	da03      	bge.n	80083ac <_printf_i+0xc8>
 80083a4:	232d      	movs	r3, #45	; 0x2d
 80083a6:	4276      	negs	r6, r6
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ac:	485e      	ldr	r0, [pc, #376]	; (8008528 <_printf_i+0x244>)
 80083ae:	230a      	movs	r3, #10
 80083b0:	e019      	b.n	80083e6 <_printf_i+0x102>
 80083b2:	680e      	ldr	r6, [r1, #0]
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ba:	bf18      	it	ne
 80083bc:	b236      	sxthne	r6, r6
 80083be:	e7ef      	b.n	80083a0 <_printf_i+0xbc>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	1d19      	adds	r1, r3, #4
 80083c6:	6029      	str	r1, [r5, #0]
 80083c8:	0601      	lsls	r1, r0, #24
 80083ca:	d501      	bpl.n	80083d0 <_printf_i+0xec>
 80083cc:	681e      	ldr	r6, [r3, #0]
 80083ce:	e002      	b.n	80083d6 <_printf_i+0xf2>
 80083d0:	0646      	lsls	r6, r0, #25
 80083d2:	d5fb      	bpl.n	80083cc <_printf_i+0xe8>
 80083d4:	881e      	ldrh	r6, [r3, #0]
 80083d6:	4854      	ldr	r0, [pc, #336]	; (8008528 <_printf_i+0x244>)
 80083d8:	2f6f      	cmp	r7, #111	; 0x6f
 80083da:	bf0c      	ite	eq
 80083dc:	2308      	moveq	r3, #8
 80083de:	230a      	movne	r3, #10
 80083e0:	2100      	movs	r1, #0
 80083e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e6:	6865      	ldr	r5, [r4, #4]
 80083e8:	60a5      	str	r5, [r4, #8]
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	bfa2      	ittt	ge
 80083ee:	6821      	ldrge	r1, [r4, #0]
 80083f0:	f021 0104 	bicge.w	r1, r1, #4
 80083f4:	6021      	strge	r1, [r4, #0]
 80083f6:	b90e      	cbnz	r6, 80083fc <_printf_i+0x118>
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	d04d      	beq.n	8008498 <_printf_i+0x1b4>
 80083fc:	4615      	mov	r5, r2
 80083fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008402:	fb03 6711 	mls	r7, r3, r1, r6
 8008406:	5dc7      	ldrb	r7, [r0, r7]
 8008408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800840c:	4637      	mov	r7, r6
 800840e:	42bb      	cmp	r3, r7
 8008410:	460e      	mov	r6, r1
 8008412:	d9f4      	bls.n	80083fe <_printf_i+0x11a>
 8008414:	2b08      	cmp	r3, #8
 8008416:	d10b      	bne.n	8008430 <_printf_i+0x14c>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	07de      	lsls	r6, r3, #31
 800841c:	d508      	bpl.n	8008430 <_printf_i+0x14c>
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	4299      	cmp	r1, r3
 8008424:	bfde      	ittt	le
 8008426:	2330      	movle	r3, #48	; 0x30
 8008428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800842c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008430:	1b52      	subs	r2, r2, r5
 8008432:	6122      	str	r2, [r4, #16]
 8008434:	f8cd a000 	str.w	sl, [sp]
 8008438:	464b      	mov	r3, r9
 800843a:	aa03      	add	r2, sp, #12
 800843c:	4621      	mov	r1, r4
 800843e:	4640      	mov	r0, r8
 8008440:	f7ff fee2 	bl	8008208 <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	d14c      	bne.n	80084e2 <_printf_i+0x1fe>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b004      	add	sp, #16
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	4835      	ldr	r0, [pc, #212]	; (8008528 <_printf_i+0x244>)
 8008454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008460:	6029      	str	r1, [r5, #0]
 8008462:	061d      	lsls	r5, r3, #24
 8008464:	d514      	bpl.n	8008490 <_printf_i+0x1ac>
 8008466:	07df      	lsls	r7, r3, #31
 8008468:	bf44      	itt	mi
 800846a:	f043 0320 	orrmi.w	r3, r3, #32
 800846e:	6023      	strmi	r3, [r4, #0]
 8008470:	b91e      	cbnz	r6, 800847a <_printf_i+0x196>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f023 0320 	bic.w	r3, r3, #32
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	2310      	movs	r3, #16
 800847c:	e7b0      	b.n	80083e0 <_printf_i+0xfc>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f043 0320 	orr.w	r3, r3, #32
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	2378      	movs	r3, #120	; 0x78
 8008488:	4828      	ldr	r0, [pc, #160]	; (800852c <_printf_i+0x248>)
 800848a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800848e:	e7e3      	b.n	8008458 <_printf_i+0x174>
 8008490:	0659      	lsls	r1, r3, #25
 8008492:	bf48      	it	mi
 8008494:	b2b6      	uxthmi	r6, r6
 8008496:	e7e6      	b.n	8008466 <_printf_i+0x182>
 8008498:	4615      	mov	r5, r2
 800849a:	e7bb      	b.n	8008414 <_printf_i+0x130>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	6826      	ldr	r6, [r4, #0]
 80084a0:	6961      	ldr	r1, [r4, #20]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6028      	str	r0, [r5, #0]
 80084a6:	0635      	lsls	r5, r6, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0x1cc>
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0x1d2>
 80084b0:	0670      	lsls	r0, r6, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0x1c8>
 80084b4:	8019      	strh	r1, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	4615      	mov	r5, r2
 80084bc:	e7ba      	b.n	8008434 <_printf_i+0x150>
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	602a      	str	r2, [r5, #0]
 80084c4:	681d      	ldr	r5, [r3, #0]
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4628      	mov	r0, r5
 80084cc:	f7f7 fea0 	bl	8000210 <memchr>
 80084d0:	b108      	cbz	r0, 80084d6 <_printf_i+0x1f2>
 80084d2:	1b40      	subs	r0, r0, r5
 80084d4:	6060      	str	r0, [r4, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	2300      	movs	r3, #0
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e0:	e7a8      	b.n	8008434 <_printf_i+0x150>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	462a      	mov	r2, r5
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d0ab      	beq.n	8008448 <_printf_i+0x164>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	d413      	bmi.n	800851e <_printf_i+0x23a>
 80084f6:	68e0      	ldr	r0, [r4, #12]
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	4298      	cmp	r0, r3
 80084fc:	bfb8      	it	lt
 80084fe:	4618      	movlt	r0, r3
 8008500:	e7a4      	b.n	800844c <_printf_i+0x168>
 8008502:	2301      	movs	r3, #1
 8008504:	4632      	mov	r2, r6
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d09b      	beq.n	8008448 <_printf_i+0x164>
 8008510:	3501      	adds	r5, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	42ab      	cmp	r3, r5
 800851a:	dcf2      	bgt.n	8008502 <_printf_i+0x21e>
 800851c:	e7eb      	b.n	80084f6 <_printf_i+0x212>
 800851e:	2500      	movs	r5, #0
 8008520:	f104 0619 	add.w	r6, r4, #25
 8008524:	e7f5      	b.n	8008512 <_printf_i+0x22e>
 8008526:	bf00      	nop
 8008528:	08009093 	.word	0x08009093
 800852c:	080090a4 	.word	0x080090a4

08008530 <_sbrk_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	; (800854c <_sbrk_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7ff f986 	bl	800784c <_sbrk>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_sbrk_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_sbrk_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20003438 	.word	0x20003438

08008550 <__swbuf_r>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	460e      	mov	r6, r1
 8008554:	4614      	mov	r4, r2
 8008556:	4605      	mov	r5, r0
 8008558:	b118      	cbz	r0, 8008562 <__swbuf_r+0x12>
 800855a:	6983      	ldr	r3, [r0, #24]
 800855c:	b90b      	cbnz	r3, 8008562 <__swbuf_r+0x12>
 800855e:	f000 f9d9 	bl	8008914 <__sinit>
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <__swbuf_r+0x98>)
 8008564:	429c      	cmp	r4, r3
 8008566:	d12b      	bne.n	80085c0 <__swbuf_r+0x70>
 8008568:	686c      	ldr	r4, [r5, #4]
 800856a:	69a3      	ldr	r3, [r4, #24]
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	d52f      	bpl.n	80085d4 <__swbuf_r+0x84>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	b36b      	cbz	r3, 80085d4 <__swbuf_r+0x84>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	6820      	ldr	r0, [r4, #0]
 800857c:	1ac0      	subs	r0, r0, r3
 800857e:	6963      	ldr	r3, [r4, #20]
 8008580:	b2f6      	uxtb	r6, r6
 8008582:	4283      	cmp	r3, r0
 8008584:	4637      	mov	r7, r6
 8008586:	dc04      	bgt.n	8008592 <__swbuf_r+0x42>
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f92e 	bl	80087ec <_fflush_r>
 8008590:	bb30      	cbnz	r0, 80085e0 <__swbuf_r+0x90>
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	3b01      	subs	r3, #1
 8008596:	60a3      	str	r3, [r4, #8]
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	6022      	str	r2, [r4, #0]
 800859e:	701e      	strb	r6, [r3, #0]
 80085a0:	6963      	ldr	r3, [r4, #20]
 80085a2:	3001      	adds	r0, #1
 80085a4:	4283      	cmp	r3, r0
 80085a6:	d004      	beq.n	80085b2 <__swbuf_r+0x62>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	07db      	lsls	r3, r3, #31
 80085ac:	d506      	bpl.n	80085bc <__swbuf_r+0x6c>
 80085ae:	2e0a      	cmp	r6, #10
 80085b0:	d104      	bne.n	80085bc <__swbuf_r+0x6c>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f919 	bl	80087ec <_fflush_r>
 80085ba:	b988      	cbnz	r0, 80085e0 <__swbuf_r+0x90>
 80085bc:	4638      	mov	r0, r7
 80085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <__swbuf_r+0x9c>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d101      	bne.n	80085ca <__swbuf_r+0x7a>
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	e7cf      	b.n	800856a <__swbuf_r+0x1a>
 80085ca:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <__swbuf_r+0xa0>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	bf08      	it	eq
 80085d0:	68ec      	ldreq	r4, [r5, #12]
 80085d2:	e7ca      	b.n	800856a <__swbuf_r+0x1a>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f80c 	bl	80085f4 <__swsetup_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0cb      	beq.n	8008578 <__swbuf_r+0x28>
 80085e0:	f04f 37ff 	mov.w	r7, #4294967295
 80085e4:	e7ea      	b.n	80085bc <__swbuf_r+0x6c>
 80085e6:	bf00      	nop
 80085e8:	080090d8 	.word	0x080090d8
 80085ec:	080090f8 	.word	0x080090f8
 80085f0:	080090b8 	.word	0x080090b8

080085f4 <__swsetup_r>:
 80085f4:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <__swsetup_r+0xcc>)
 80085f6:	b570      	push	{r4, r5, r6, lr}
 80085f8:	681d      	ldr	r5, [r3, #0]
 80085fa:	4606      	mov	r6, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	b125      	cbz	r5, 800860a <__swsetup_r+0x16>
 8008600:	69ab      	ldr	r3, [r5, #24]
 8008602:	b913      	cbnz	r3, 800860a <__swsetup_r+0x16>
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f985 	bl	8008914 <__sinit>
 800860a:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <__swsetup_r+0xd0>)
 800860c:	429c      	cmp	r4, r3
 800860e:	d10f      	bne.n	8008630 <__swsetup_r+0x3c>
 8008610:	686c      	ldr	r4, [r5, #4]
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008618:	0719      	lsls	r1, r3, #28
 800861a:	d42c      	bmi.n	8008676 <__swsetup_r+0x82>
 800861c:	06dd      	lsls	r5, r3, #27
 800861e:	d411      	bmi.n	8008644 <__swsetup_r+0x50>
 8008620:	2309      	movs	r3, #9
 8008622:	6033      	str	r3, [r6, #0]
 8008624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	e03e      	b.n	80086ae <__swsetup_r+0xba>
 8008630:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <__swsetup_r+0xd4>)
 8008632:	429c      	cmp	r4, r3
 8008634:	d101      	bne.n	800863a <__swsetup_r+0x46>
 8008636:	68ac      	ldr	r4, [r5, #8]
 8008638:	e7eb      	b.n	8008612 <__swsetup_r+0x1e>
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <__swsetup_r+0xd8>)
 800863c:	429c      	cmp	r4, r3
 800863e:	bf08      	it	eq
 8008640:	68ec      	ldreq	r4, [r5, #12]
 8008642:	e7e6      	b.n	8008612 <__swsetup_r+0x1e>
 8008644:	0758      	lsls	r0, r3, #29
 8008646:	d512      	bpl.n	800866e <__swsetup_r+0x7a>
 8008648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864a:	b141      	cbz	r1, 800865e <__swsetup_r+0x6a>
 800864c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008650:	4299      	cmp	r1, r3
 8008652:	d002      	beq.n	800865a <__swsetup_r+0x66>
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff fa41 	bl	8007adc <_free_r>
 800865a:	2300      	movs	r3, #0
 800865c:	6363      	str	r3, [r4, #52]	; 0x34
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	2300      	movs	r3, #0
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	b94b      	cbnz	r3, 800868e <__swsetup_r+0x9a>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008684:	d003      	beq.n	800868e <__swsetup_r+0x9a>
 8008686:	4621      	mov	r1, r4
 8008688:	4630      	mov	r0, r6
 800868a:	f000 fa09 	bl	8008aa0 <__smakebuf_r>
 800868e:	89a0      	ldrh	r0, [r4, #12]
 8008690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008694:	f010 0301 	ands.w	r3, r0, #1
 8008698:	d00a      	beq.n	80086b0 <__swsetup_r+0xbc>
 800869a:	2300      	movs	r3, #0
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	6963      	ldr	r3, [r4, #20]
 80086a0:	425b      	negs	r3, r3
 80086a2:	61a3      	str	r3, [r4, #24]
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	b943      	cbnz	r3, 80086ba <__swsetup_r+0xc6>
 80086a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086ac:	d1ba      	bne.n	8008624 <__swsetup_r+0x30>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	0781      	lsls	r1, r0, #30
 80086b2:	bf58      	it	pl
 80086b4:	6963      	ldrpl	r3, [r4, #20]
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	e7f4      	b.n	80086a4 <__swsetup_r+0xb0>
 80086ba:	2000      	movs	r0, #0
 80086bc:	e7f7      	b.n	80086ae <__swsetup_r+0xba>
 80086be:	bf00      	nop
 80086c0:	20000010 	.word	0x20000010
 80086c4:	080090d8 	.word	0x080090d8
 80086c8:	080090f8 	.word	0x080090f8
 80086cc:	080090b8 	.word	0x080090b8

080086d0 <abort>:
 80086d0:	b508      	push	{r3, lr}
 80086d2:	2006      	movs	r0, #6
 80086d4:	f000 faa2 	bl	8008c1c <raise>
 80086d8:	2001      	movs	r0, #1
 80086da:	f7ff f83f 	bl	800775c <_exit>
	...

080086e0 <__sflush_r>:
 80086e0:	898a      	ldrh	r2, [r1, #12]
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	4605      	mov	r5, r0
 80086e8:	0710      	lsls	r0, r2, #28
 80086ea:	460c      	mov	r4, r1
 80086ec:	d458      	bmi.n	80087a0 <__sflush_r+0xc0>
 80086ee:	684b      	ldr	r3, [r1, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dc05      	bgt.n	8008700 <__sflush_r+0x20>
 80086f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dc02      	bgt.n	8008700 <__sflush_r+0x20>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008702:	2e00      	cmp	r6, #0
 8008704:	d0f9      	beq.n	80086fa <__sflush_r+0x1a>
 8008706:	2300      	movs	r3, #0
 8008708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800870c:	682f      	ldr	r7, [r5, #0]
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	d032      	beq.n	8008778 <__sflush_r+0x98>
 8008712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	075a      	lsls	r2, r3, #29
 8008718:	d505      	bpl.n	8008726 <__sflush_r+0x46>
 800871a:	6863      	ldr	r3, [r4, #4]
 800871c:	1ac0      	subs	r0, r0, r3
 800871e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008720:	b10b      	cbz	r3, 8008726 <__sflush_r+0x46>
 8008722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008724:	1ac0      	subs	r0, r0, r3
 8008726:	2300      	movs	r3, #0
 8008728:	4602      	mov	r2, r0
 800872a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800872c:	6a21      	ldr	r1, [r4, #32]
 800872e:	4628      	mov	r0, r5
 8008730:	47b0      	blx	r6
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	d106      	bne.n	8008746 <__sflush_r+0x66>
 8008738:	6829      	ldr	r1, [r5, #0]
 800873a:	291d      	cmp	r1, #29
 800873c:	d82c      	bhi.n	8008798 <__sflush_r+0xb8>
 800873e:	4a2a      	ldr	r2, [pc, #168]	; (80087e8 <__sflush_r+0x108>)
 8008740:	40ca      	lsrs	r2, r1
 8008742:	07d6      	lsls	r6, r2, #31
 8008744:	d528      	bpl.n	8008798 <__sflush_r+0xb8>
 8008746:	2200      	movs	r2, #0
 8008748:	6062      	str	r2, [r4, #4]
 800874a:	04d9      	lsls	r1, r3, #19
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	d504      	bpl.n	800875c <__sflush_r+0x7c>
 8008752:	1c42      	adds	r2, r0, #1
 8008754:	d101      	bne.n	800875a <__sflush_r+0x7a>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b903      	cbnz	r3, 800875c <__sflush_r+0x7c>
 800875a:	6560      	str	r0, [r4, #84]	; 0x54
 800875c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875e:	602f      	str	r7, [r5, #0]
 8008760:	2900      	cmp	r1, #0
 8008762:	d0ca      	beq.n	80086fa <__sflush_r+0x1a>
 8008764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008768:	4299      	cmp	r1, r3
 800876a:	d002      	beq.n	8008772 <__sflush_r+0x92>
 800876c:	4628      	mov	r0, r5
 800876e:	f7ff f9b5 	bl	8007adc <_free_r>
 8008772:	2000      	movs	r0, #0
 8008774:	6360      	str	r0, [r4, #52]	; 0x34
 8008776:	e7c1      	b.n	80086fc <__sflush_r+0x1c>
 8008778:	6a21      	ldr	r1, [r4, #32]
 800877a:	2301      	movs	r3, #1
 800877c:	4628      	mov	r0, r5
 800877e:	47b0      	blx	r6
 8008780:	1c41      	adds	r1, r0, #1
 8008782:	d1c7      	bne.n	8008714 <__sflush_r+0x34>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0c4      	beq.n	8008714 <__sflush_r+0x34>
 800878a:	2b1d      	cmp	r3, #29
 800878c:	d001      	beq.n	8008792 <__sflush_r+0xb2>
 800878e:	2b16      	cmp	r3, #22
 8008790:	d101      	bne.n	8008796 <__sflush_r+0xb6>
 8008792:	602f      	str	r7, [r5, #0]
 8008794:	e7b1      	b.n	80086fa <__sflush_r+0x1a>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	e7ad      	b.n	80086fc <__sflush_r+0x1c>
 80087a0:	690f      	ldr	r7, [r1, #16]
 80087a2:	2f00      	cmp	r7, #0
 80087a4:	d0a9      	beq.n	80086fa <__sflush_r+0x1a>
 80087a6:	0793      	lsls	r3, r2, #30
 80087a8:	680e      	ldr	r6, [r1, #0]
 80087aa:	bf08      	it	eq
 80087ac:	694b      	ldreq	r3, [r1, #20]
 80087ae:	600f      	str	r7, [r1, #0]
 80087b0:	bf18      	it	ne
 80087b2:	2300      	movne	r3, #0
 80087b4:	eba6 0807 	sub.w	r8, r6, r7
 80087b8:	608b      	str	r3, [r1, #8]
 80087ba:	f1b8 0f00 	cmp.w	r8, #0
 80087be:	dd9c      	ble.n	80086fa <__sflush_r+0x1a>
 80087c0:	6a21      	ldr	r1, [r4, #32]
 80087c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087c4:	4643      	mov	r3, r8
 80087c6:	463a      	mov	r2, r7
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b0      	blx	r6
 80087cc:	2800      	cmp	r0, #0
 80087ce:	dc06      	bgt.n	80087de <__sflush_r+0xfe>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e78e      	b.n	80086fc <__sflush_r+0x1c>
 80087de:	4407      	add	r7, r0
 80087e0:	eba8 0800 	sub.w	r8, r8, r0
 80087e4:	e7e9      	b.n	80087ba <__sflush_r+0xda>
 80087e6:	bf00      	nop
 80087e8:	20400001 	.word	0x20400001

080087ec <_fflush_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	4605      	mov	r5, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	b913      	cbnz	r3, 80087fc <_fflush_r+0x10>
 80087f6:	2500      	movs	r5, #0
 80087f8:	4628      	mov	r0, r5
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	b118      	cbz	r0, 8008806 <_fflush_r+0x1a>
 80087fe:	6983      	ldr	r3, [r0, #24]
 8008800:	b90b      	cbnz	r3, 8008806 <_fflush_r+0x1a>
 8008802:	f000 f887 	bl	8008914 <__sinit>
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <_fflush_r+0x6c>)
 8008808:	429c      	cmp	r4, r3
 800880a:	d11b      	bne.n	8008844 <_fflush_r+0x58>
 800880c:	686c      	ldr	r4, [r5, #4]
 800880e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0ef      	beq.n	80087f6 <_fflush_r+0xa>
 8008816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008818:	07d0      	lsls	r0, r2, #31
 800881a:	d404      	bmi.n	8008826 <_fflush_r+0x3a>
 800881c:	0599      	lsls	r1, r3, #22
 800881e:	d402      	bmi.n	8008826 <_fflush_r+0x3a>
 8008820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008822:	f000 f915 	bl	8008a50 <__retarget_lock_acquire_recursive>
 8008826:	4628      	mov	r0, r5
 8008828:	4621      	mov	r1, r4
 800882a:	f7ff ff59 	bl	80086e0 <__sflush_r>
 800882e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008830:	07da      	lsls	r2, r3, #31
 8008832:	4605      	mov	r5, r0
 8008834:	d4e0      	bmi.n	80087f8 <_fflush_r+0xc>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	059b      	lsls	r3, r3, #22
 800883a:	d4dd      	bmi.n	80087f8 <_fflush_r+0xc>
 800883c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800883e:	f000 f908 	bl	8008a52 <__retarget_lock_release_recursive>
 8008842:	e7d9      	b.n	80087f8 <_fflush_r+0xc>
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <_fflush_r+0x70>)
 8008846:	429c      	cmp	r4, r3
 8008848:	d101      	bne.n	800884e <_fflush_r+0x62>
 800884a:	68ac      	ldr	r4, [r5, #8]
 800884c:	e7df      	b.n	800880e <_fflush_r+0x22>
 800884e:	4b04      	ldr	r3, [pc, #16]	; (8008860 <_fflush_r+0x74>)
 8008850:	429c      	cmp	r4, r3
 8008852:	bf08      	it	eq
 8008854:	68ec      	ldreq	r4, [r5, #12]
 8008856:	e7da      	b.n	800880e <_fflush_r+0x22>
 8008858:	080090d8 	.word	0x080090d8
 800885c:	080090f8 	.word	0x080090f8
 8008860:	080090b8 	.word	0x080090b8

08008864 <std>:
 8008864:	2300      	movs	r3, #0
 8008866:	b510      	push	{r4, lr}
 8008868:	4604      	mov	r4, r0
 800886a:	e9c0 3300 	strd	r3, r3, [r0]
 800886e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008872:	6083      	str	r3, [r0, #8]
 8008874:	8181      	strh	r1, [r0, #12]
 8008876:	6643      	str	r3, [r0, #100]	; 0x64
 8008878:	81c2      	strh	r2, [r0, #14]
 800887a:	6183      	str	r3, [r0, #24]
 800887c:	4619      	mov	r1, r3
 800887e:	2208      	movs	r2, #8
 8008880:	305c      	adds	r0, #92	; 0x5c
 8008882:	f7ff f88d 	bl	80079a0 <memset>
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <std+0x38>)
 8008888:	6263      	str	r3, [r4, #36]	; 0x24
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <std+0x3c>)
 800888c:	62a3      	str	r3, [r4, #40]	; 0x28
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <std+0x40>)
 8008890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <std+0x44>)
 8008894:	6224      	str	r4, [r4, #32]
 8008896:	6323      	str	r3, [r4, #48]	; 0x30
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop
 800889c:	08008c55 	.word	0x08008c55
 80088a0:	08008c77 	.word	0x08008c77
 80088a4:	08008caf 	.word	0x08008caf
 80088a8:	08008cd3 	.word	0x08008cd3

080088ac <_cleanup_r>:
 80088ac:	4901      	ldr	r1, [pc, #4]	; (80088b4 <_cleanup_r+0x8>)
 80088ae:	f000 b8af 	b.w	8008a10 <_fwalk_reent>
 80088b2:	bf00      	nop
 80088b4:	080087ed 	.word	0x080087ed

080088b8 <__sfmoreglue>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	2268      	movs	r2, #104	; 0x68
 80088bc:	1e4d      	subs	r5, r1, #1
 80088be:	4355      	muls	r5, r2
 80088c0:	460e      	mov	r6, r1
 80088c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088c6:	f7ff f975 	bl	8007bb4 <_malloc_r>
 80088ca:	4604      	mov	r4, r0
 80088cc:	b140      	cbz	r0, 80088e0 <__sfmoreglue+0x28>
 80088ce:	2100      	movs	r1, #0
 80088d0:	e9c0 1600 	strd	r1, r6, [r0]
 80088d4:	300c      	adds	r0, #12
 80088d6:	60a0      	str	r0, [r4, #8]
 80088d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088dc:	f7ff f860 	bl	80079a0 <memset>
 80088e0:	4620      	mov	r0, r4
 80088e2:	bd70      	pop	{r4, r5, r6, pc}

080088e4 <__sfp_lock_acquire>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__sfp_lock_acquire+0x8>)
 80088e6:	f000 b8b3 	b.w	8008a50 <__retarget_lock_acquire_recursive>
 80088ea:	bf00      	nop
 80088ec:	20003435 	.word	0x20003435

080088f0 <__sfp_lock_release>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__sfp_lock_release+0x8>)
 80088f2:	f000 b8ae 	b.w	8008a52 <__retarget_lock_release_recursive>
 80088f6:	bf00      	nop
 80088f8:	20003435 	.word	0x20003435

080088fc <__sinit_lock_acquire>:
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <__sinit_lock_acquire+0x8>)
 80088fe:	f000 b8a7 	b.w	8008a50 <__retarget_lock_acquire_recursive>
 8008902:	bf00      	nop
 8008904:	20003436 	.word	0x20003436

08008908 <__sinit_lock_release>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__sinit_lock_release+0x8>)
 800890a:	f000 b8a2 	b.w	8008a52 <__retarget_lock_release_recursive>
 800890e:	bf00      	nop
 8008910:	20003436 	.word	0x20003436

08008914 <__sinit>:
 8008914:	b510      	push	{r4, lr}
 8008916:	4604      	mov	r4, r0
 8008918:	f7ff fff0 	bl	80088fc <__sinit_lock_acquire>
 800891c:	69a3      	ldr	r3, [r4, #24]
 800891e:	b11b      	cbz	r3, 8008928 <__sinit+0x14>
 8008920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008924:	f7ff bff0 	b.w	8008908 <__sinit_lock_release>
 8008928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800892c:	6523      	str	r3, [r4, #80]	; 0x50
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <__sinit+0x68>)
 8008930:	4a13      	ldr	r2, [pc, #76]	; (8008980 <__sinit+0x6c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	62a2      	str	r2, [r4, #40]	; 0x28
 8008936:	42a3      	cmp	r3, r4
 8008938:	bf04      	itt	eq
 800893a:	2301      	moveq	r3, #1
 800893c:	61a3      	streq	r3, [r4, #24]
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f820 	bl	8008984 <__sfp>
 8008944:	6060      	str	r0, [r4, #4]
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f81c 	bl	8008984 <__sfp>
 800894c:	60a0      	str	r0, [r4, #8]
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f818 	bl	8008984 <__sfp>
 8008954:	2200      	movs	r2, #0
 8008956:	60e0      	str	r0, [r4, #12]
 8008958:	2104      	movs	r1, #4
 800895a:	6860      	ldr	r0, [r4, #4]
 800895c:	f7ff ff82 	bl	8008864 <std>
 8008960:	68a0      	ldr	r0, [r4, #8]
 8008962:	2201      	movs	r2, #1
 8008964:	2109      	movs	r1, #9
 8008966:	f7ff ff7d 	bl	8008864 <std>
 800896a:	68e0      	ldr	r0, [r4, #12]
 800896c:	2202      	movs	r2, #2
 800896e:	2112      	movs	r1, #18
 8008970:	f7ff ff78 	bl	8008864 <std>
 8008974:	2301      	movs	r3, #1
 8008976:	61a3      	str	r3, [r4, #24]
 8008978:	e7d2      	b.n	8008920 <__sinit+0xc>
 800897a:	bf00      	nop
 800897c:	08008fd0 	.word	0x08008fd0
 8008980:	080088ad 	.word	0x080088ad

08008984 <__sfp>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	4607      	mov	r7, r0
 8008988:	f7ff ffac 	bl	80088e4 <__sfp_lock_acquire>
 800898c:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <__sfp+0x84>)
 800898e:	681e      	ldr	r6, [r3, #0]
 8008990:	69b3      	ldr	r3, [r6, #24]
 8008992:	b913      	cbnz	r3, 800899a <__sfp+0x16>
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff ffbd 	bl	8008914 <__sinit>
 800899a:	3648      	adds	r6, #72	; 0x48
 800899c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	d503      	bpl.n	80089ac <__sfp+0x28>
 80089a4:	6833      	ldr	r3, [r6, #0]
 80089a6:	b30b      	cbz	r3, 80089ec <__sfp+0x68>
 80089a8:	6836      	ldr	r6, [r6, #0]
 80089aa:	e7f7      	b.n	800899c <__sfp+0x18>
 80089ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089b0:	b9d5      	cbnz	r5, 80089e8 <__sfp+0x64>
 80089b2:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <__sfp+0x88>)
 80089b4:	60e3      	str	r3, [r4, #12]
 80089b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089ba:	6665      	str	r5, [r4, #100]	; 0x64
 80089bc:	f000 f847 	bl	8008a4e <__retarget_lock_init_recursive>
 80089c0:	f7ff ff96 	bl	80088f0 <__sfp_lock_release>
 80089c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089cc:	6025      	str	r5, [r4, #0]
 80089ce:	61a5      	str	r5, [r4, #24]
 80089d0:	2208      	movs	r2, #8
 80089d2:	4629      	mov	r1, r5
 80089d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089d8:	f7fe ffe2 	bl	80079a0 <memset>
 80089dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089e4:	4620      	mov	r0, r4
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e8:	3468      	adds	r4, #104	; 0x68
 80089ea:	e7d9      	b.n	80089a0 <__sfp+0x1c>
 80089ec:	2104      	movs	r1, #4
 80089ee:	4638      	mov	r0, r7
 80089f0:	f7ff ff62 	bl	80088b8 <__sfmoreglue>
 80089f4:	4604      	mov	r4, r0
 80089f6:	6030      	str	r0, [r6, #0]
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d1d5      	bne.n	80089a8 <__sfp+0x24>
 80089fc:	f7ff ff78 	bl	80088f0 <__sfp_lock_release>
 8008a00:	230c      	movs	r3, #12
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	e7ee      	b.n	80089e4 <__sfp+0x60>
 8008a06:	bf00      	nop
 8008a08:	08008fd0 	.word	0x08008fd0
 8008a0c:	ffff0001 	.word	0xffff0001

08008a10 <_fwalk_reent>:
 8008a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a14:	4606      	mov	r6, r0
 8008a16:	4688      	mov	r8, r1
 8008a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a1c:	2700      	movs	r7, #0
 8008a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a22:	f1b9 0901 	subs.w	r9, r9, #1
 8008a26:	d505      	bpl.n	8008a34 <_fwalk_reent+0x24>
 8008a28:	6824      	ldr	r4, [r4, #0]
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	d1f7      	bne.n	8008a1e <_fwalk_reent+0xe>
 8008a2e:	4638      	mov	r0, r7
 8008a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a34:	89ab      	ldrh	r3, [r5, #12]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d907      	bls.n	8008a4a <_fwalk_reent+0x3a>
 8008a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	d003      	beq.n	8008a4a <_fwalk_reent+0x3a>
 8008a42:	4629      	mov	r1, r5
 8008a44:	4630      	mov	r0, r6
 8008a46:	47c0      	blx	r8
 8008a48:	4307      	orrs	r7, r0
 8008a4a:	3568      	adds	r5, #104	; 0x68
 8008a4c:	e7e9      	b.n	8008a22 <_fwalk_reent+0x12>

08008a4e <__retarget_lock_init_recursive>:
 8008a4e:	4770      	bx	lr

08008a50 <__retarget_lock_acquire_recursive>:
 8008a50:	4770      	bx	lr

08008a52 <__retarget_lock_release_recursive>:
 8008a52:	4770      	bx	lr

08008a54 <__swhatbuf_r>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	460e      	mov	r6, r1
 8008a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	b096      	sub	sp, #88	; 0x58
 8008a60:	4614      	mov	r4, r2
 8008a62:	461d      	mov	r5, r3
 8008a64:	da08      	bge.n	8008a78 <__swhatbuf_r+0x24>
 8008a66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	061a      	lsls	r2, r3, #24
 8008a70:	d410      	bmi.n	8008a94 <__swhatbuf_r+0x40>
 8008a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a76:	e00e      	b.n	8008a96 <__swhatbuf_r+0x42>
 8008a78:	466a      	mov	r2, sp
 8008a7a:	f000 f951 	bl	8008d20 <_fstat_r>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	dbf1      	blt.n	8008a66 <__swhatbuf_r+0x12>
 8008a82:	9a01      	ldr	r2, [sp, #4]
 8008a84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a8c:	425a      	negs	r2, r3
 8008a8e:	415a      	adcs	r2, r3
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	e7ee      	b.n	8008a72 <__swhatbuf_r+0x1e>
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	2000      	movs	r0, #0
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	b016      	add	sp, #88	; 0x58
 8008a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008aa0 <__smakebuf_r>:
 8008aa0:	898b      	ldrh	r3, [r1, #12]
 8008aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008aa4:	079d      	lsls	r5, r3, #30
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	d507      	bpl.n	8008abc <__smakebuf_r+0x1c>
 8008aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	6163      	str	r3, [r4, #20]
 8008ab8:	b002      	add	sp, #8
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	ab01      	add	r3, sp, #4
 8008abe:	466a      	mov	r2, sp
 8008ac0:	f7ff ffc8 	bl	8008a54 <__swhatbuf_r>
 8008ac4:	9900      	ldr	r1, [sp, #0]
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff f873 	bl	8007bb4 <_malloc_r>
 8008ace:	b948      	cbnz	r0, 8008ae4 <__smakebuf_r+0x44>
 8008ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad4:	059a      	lsls	r2, r3, #22
 8008ad6:	d4ef      	bmi.n	8008ab8 <__smakebuf_r+0x18>
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	f043 0302 	orr.w	r3, r3, #2
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	e7e3      	b.n	8008aac <__smakebuf_r+0xc>
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <__smakebuf_r+0x7c>)
 8008ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	6020      	str	r0, [r4, #0]
 8008aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af0:	81a3      	strh	r3, [r4, #12]
 8008af2:	9b00      	ldr	r3, [sp, #0]
 8008af4:	6163      	str	r3, [r4, #20]
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	6120      	str	r0, [r4, #16]
 8008afa:	b15b      	cbz	r3, 8008b14 <__smakebuf_r+0x74>
 8008afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f91f 	bl	8008d44 <_isatty_r>
 8008b06:	b128      	cbz	r0, 8008b14 <__smakebuf_r+0x74>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	89a0      	ldrh	r0, [r4, #12]
 8008b16:	4305      	orrs	r5, r0
 8008b18:	81a5      	strh	r5, [r4, #12]
 8008b1a:	e7cd      	b.n	8008ab8 <__smakebuf_r+0x18>
 8008b1c:	080088ad 	.word	0x080088ad

08008b20 <memmove>:
 8008b20:	4288      	cmp	r0, r1
 8008b22:	b510      	push	{r4, lr}
 8008b24:	eb01 0402 	add.w	r4, r1, r2
 8008b28:	d902      	bls.n	8008b30 <memmove+0x10>
 8008b2a:	4284      	cmp	r4, r0
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	d807      	bhi.n	8008b40 <memmove+0x20>
 8008b30:	1e43      	subs	r3, r0, #1
 8008b32:	42a1      	cmp	r1, r4
 8008b34:	d008      	beq.n	8008b48 <memmove+0x28>
 8008b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3e:	e7f8      	b.n	8008b32 <memmove+0x12>
 8008b40:	4402      	add	r2, r0
 8008b42:	4601      	mov	r1, r0
 8008b44:	428a      	cmp	r2, r1
 8008b46:	d100      	bne.n	8008b4a <memmove+0x2a>
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b52:	e7f7      	b.n	8008b44 <memmove+0x24>

08008b54 <__malloc_lock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__malloc_lock+0x8>)
 8008b56:	f7ff bf7b 	b.w	8008a50 <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20003434 	.word	0x20003434

08008b60 <__malloc_unlock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_unlock+0x8>)
 8008b62:	f7ff bf76 	b.w	8008a52 <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	20003434 	.word	0x20003434

08008b6c <_realloc_r>:
 8008b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	4680      	mov	r8, r0
 8008b72:	4614      	mov	r4, r2
 8008b74:	460e      	mov	r6, r1
 8008b76:	b921      	cbnz	r1, 8008b82 <_realloc_r+0x16>
 8008b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	f7ff b819 	b.w	8007bb4 <_malloc_r>
 8008b82:	b92a      	cbnz	r2, 8008b90 <_realloc_r+0x24>
 8008b84:	f7fe ffaa 	bl	8007adc <_free_r>
 8008b88:	4625      	mov	r5, r4
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b90:	f000 f8fa 	bl	8008d88 <_malloc_usable_size_r>
 8008b94:	4284      	cmp	r4, r0
 8008b96:	4607      	mov	r7, r0
 8008b98:	d802      	bhi.n	8008ba0 <_realloc_r+0x34>
 8008b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b9e:	d812      	bhi.n	8008bc6 <_realloc_r+0x5a>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7ff f806 	bl	8007bb4 <_malloc_r>
 8008ba8:	4605      	mov	r5, r0
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d0ed      	beq.n	8008b8a <_realloc_r+0x1e>
 8008bae:	42bc      	cmp	r4, r7
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	bf28      	it	cs
 8008bb6:	463a      	movcs	r2, r7
 8008bb8:	f7fe fee4 	bl	8007984 <memcpy>
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f7fe ff8c 	bl	8007adc <_free_r>
 8008bc4:	e7e1      	b.n	8008b8a <_realloc_r+0x1e>
 8008bc6:	4635      	mov	r5, r6
 8008bc8:	e7df      	b.n	8008b8a <_realloc_r+0x1e>

08008bca <_raise_r>:
 8008bca:	291f      	cmp	r1, #31
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	d904      	bls.n	8008bde <_raise_r+0x14>
 8008bd4:	2316      	movs	r3, #22
 8008bd6:	6003      	str	r3, [r0, #0]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008be0:	b112      	cbz	r2, 8008be8 <_raise_r+0x1e>
 8008be2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be6:	b94b      	cbnz	r3, 8008bfc <_raise_r+0x32>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f831 	bl	8008c50 <_getpid_r>
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b818 	b.w	8008c2c <_kill_r>
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d00a      	beq.n	8008c16 <_raise_r+0x4c>
 8008c00:	1c59      	adds	r1, r3, #1
 8008c02:	d103      	bne.n	8008c0c <_raise_r+0x42>
 8008c04:	2316      	movs	r3, #22
 8008c06:	6003      	str	r3, [r0, #0]
 8008c08:	2001      	movs	r0, #1
 8008c0a:	e7e7      	b.n	8008bdc <_raise_r+0x12>
 8008c0c:	2400      	movs	r4, #0
 8008c0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c12:	4628      	mov	r0, r5
 8008c14:	4798      	blx	r3
 8008c16:	2000      	movs	r0, #0
 8008c18:	e7e0      	b.n	8008bdc <_raise_r+0x12>
	...

08008c1c <raise>:
 8008c1c:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <raise+0xc>)
 8008c1e:	4601      	mov	r1, r0
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	f7ff bfd2 	b.w	8008bca <_raise_r>
 8008c26:	bf00      	nop
 8008c28:	20000010 	.word	0x20000010

08008c2c <_kill_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	; (8008c4c <_kill_r+0x20>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	f7fe fd7f 	bl	800773c <_kill>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d102      	bne.n	8008c48 <_kill_r+0x1c>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	b103      	cbz	r3, 8008c48 <_kill_r+0x1c>
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20003438 	.word	0x20003438

08008c50 <_getpid_r>:
 8008c50:	f7fe bd6c 	b.w	800772c <_getpid>

08008c54 <__sread>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	f000 f89c 	bl	8008d98 <_read_r>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	bfab      	itete	ge
 8008c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c66:	89a3      	ldrhlt	r3, [r4, #12]
 8008c68:	181b      	addge	r3, r3, r0
 8008c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c6e:	bfac      	ite	ge
 8008c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c72:	81a3      	strhlt	r3, [r4, #12]
 8008c74:	bd10      	pop	{r4, pc}

08008c76 <__swrite>:
 8008c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	898b      	ldrh	r3, [r1, #12]
 8008c7e:	05db      	lsls	r3, r3, #23
 8008c80:	4605      	mov	r5, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	4616      	mov	r6, r2
 8008c86:	d505      	bpl.n	8008c94 <__swrite+0x1e>
 8008c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f000 f868 	bl	8008d64 <_lseek_r>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008caa:	f000 b817 	b.w	8008cdc <_write_r>

08008cae <__sseek>:
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb6:	f000 f855 	bl	8008d64 <_lseek_r>
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	bf15      	itete	ne
 8008cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cca:	81a3      	strheq	r3, [r4, #12]
 8008ccc:	bf18      	it	ne
 8008cce:	81a3      	strhne	r3, [r4, #12]
 8008cd0:	bd10      	pop	{r4, pc}

08008cd2 <__sclose>:
 8008cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd6:	f000 b813 	b.w	8008d00 <_close_r>
	...

08008cdc <_write_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_write_r+0x20>)
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7fe fd5d 	bl	80077aa <_write>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_write_r+0x1e>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_write_r+0x1e>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	20003438 	.word	0x20003438

08008d00 <_close_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	; (8008d1c <_close_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7fe fd69 	bl	80077e2 <_close>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_close_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_close_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20003438 	.word	0x20003438

08008d20 <_fstat_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_fstat_r+0x20>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	f7fe fd64 	bl	80077fa <_fstat>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d102      	bne.n	8008d3c <_fstat_r+0x1c>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b103      	cbz	r3, 8008d3c <_fstat_r+0x1c>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	20003438 	.word	0x20003438

08008d44 <_isatty_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_isatty_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7fe fd63 	bl	800781a <_isatty>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_isatty_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_isatty_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20003438 	.word	0x20003438

08008d64 <_lseek_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	; (8008d84 <_lseek_r+0x20>)
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4608      	mov	r0, r1
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7fe fd5c 	bl	8007830 <_lseek>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_lseek_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_lseek_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20003438 	.word	0x20003438

08008d88 <_malloc_usable_size_r>:
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f18      	subs	r0, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbc      	itt	lt
 8008d92:	580b      	ldrlt	r3, [r1, r0]
 8008d94:	18c0      	addlt	r0, r0, r3
 8008d96:	4770      	bx	lr

08008d98 <_read_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	; (8008db8 <_read_r+0x20>)
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	602a      	str	r2, [r5, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f7fe fce2 	bl	8007770 <_read>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_read_r+0x1e>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_read_r+0x1e>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20003438 	.word	0x20003438

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
